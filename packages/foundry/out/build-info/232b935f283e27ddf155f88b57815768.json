{
  "_format": "ethers-rs-sol-build-info-1",
  "solcVersion": "0.8.21",
  "solcLongVersion": "0.8.21+commit.d9974bed.Windows.msvc",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/ILiquidityPool.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface ILiquidityPool {\r\n    function accessFunds(uint256 _amount, string memory _action) external;\r\n}\r\n"
      },
      "contracts/LiquidityPool.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"openzeppelin/security/ReentrancyGuard.sol\";\r\nimport \"./ILiquidityPool.sol\";\r\n\r\n/**\r\n * @title Liqudity provider contract for rewards staking contract\r\n * @author https://anmol-dhiman.netlify.app/\r\n * @notice Provide NRK tokens only to verified address\r\n */\r\ncontract LiquidityPool is OwnableUpgradeable, ReentrancyGuard, ILiquidityPool {\r\n    event ContractVerified(address contractAddress, uint32 timeStamp);\r\n    event AccessedFunds(\r\n        address contractAddress,\r\n        string action,\r\n        uint32 timeStamp\r\n    );\r\n    event AmountMigrated(uint256 amount, address newAddress, uint32 timeStamp);\r\n    event OwnerAccessFunds(uint256 amount, uint32 timeStamp);\r\n\r\n    /**\r\n     * @notice mapping for verified contract which can be accessed by owner only\r\n     */\r\n    mapping(address => bool) public verifiedContract;\r\n\r\n    modifier isVerified() {\r\n        require(verifiedContract[msg.sender], \"contract is not verified\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Proxy initializer function sets new owner other than admin\r\n     * @param _owner The owner of this contract\r\n     */\r\n    function initialize(address _owner) external payable initializer {\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n     * @dev verficy the contract for access rewards\r\n     * @notice this function can only accessed by owner\r\n     * @param _contract is the contract address which can access NRK tokens\r\n     */\r\n    function verifyContract(address _contract) external onlyOwner {\r\n        require(_contract != address(0), \"invalid contract address\");\r\n        verifiedContract[_contract] = true;\r\n        emit ContractVerified(_contract, uint32(block.timestamp));\r\n    }\r\n\r\n    /**\r\n     * @dev verified contract can access NRK tokens with this function only\r\n     * @param _amount the amount of NRK tokens required by contract\r\n     * @param _action the purpose of NRK token\r\n     * @notice only verified contracts by owner can access this function\r\n     * @notice this function is non reentrant\r\n     */\r\n    function accessFunds(\r\n        uint256 _amount,\r\n        string memory _action\r\n    ) external isVerified nonReentrant {\r\n        address _contract = msg.sender;\r\n        require(address(this).balance >= _amount, \"No NRK tokens in pool\");\r\n\r\n        (bool success, ) = _contract.call{value: _amount}(\"\");\r\n        require(success, \"failed to send NRK tokens\");\r\n        emit AccessedFunds(_contract, _action, uint32(block.timestamp));\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev this function is used to migrate the NRK tokens from this contract to another EOA or contract\r\n     * @param amount the amount of NRK tokens needed to migrate\r\n     * @param newAddress the address on which NRK tokens should be sent\r\n     * @notice this functions can only be called by owner\r\n     * @notice this function is non reentrant\r\n     */\r\n    function migration(\r\n        uint256 amount,\r\n        address newAddress\r\n    ) external nonReentrant onlyOwner {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Contract insufficient balance\"\r\n        );\r\n        require(amount > 0, \"invalid amount\");\r\n        require(newAddress != address(0), \"invalid address\");\r\n        emit AmountMigrated(amount, newAddress, uint32(block.timestamp));\r\n        (bool success, ) = newAddress.call{value: amount}(\"\");\r\n        require(success, \"Unable to send value or recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev extract NRK tokens from this contract\r\n     * @param _amount Specific amount of NRK token needed to be removed from this contract\r\n     * @notice the contract owner can access this function\r\n     * @notice this function is non reentrant\r\n     */\r\n    function extractFunds(uint256 _amount) external onlyOwner nonReentrant {\r\n        require(\r\n            address(this).balance >= _amount,\r\n            \"Contract insufficient balance\"\r\n        );\r\n        require(_amount > 0, \"invalid amount\");\r\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\r\n        require(success, \"Unable to send value or recipient may have reverted\");\r\n        emit OwnerAccessFunds(_amount, uint32(block.timestamp));\r\n    }\r\n}\r\n"
      },
      "contracts/StakingContract.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"openzeppelin/security/ReentrancyGuard.sol\";\r\nimport \"openzeppelin/utils/math/SafeMath.sol\";\r\nimport \"./ILiquidityPool.sol\";\r\n\r\n/**\r\n * @title Stake NRK tokens and earn rewards\r\n * @author https://anmol-dhiman.netlify.app/\r\n * @notice Dynamic Staking, APY and Compounding frequency\r\n */\r\ncontract StakingContract is OwnableUpgradeable, ReentrancyGuard {\r\n    using SafeMath for uint256; // Using SafeMath for safe arithmetic operations\r\n\r\n    // Flag to pause staking\r\n    bool public pause;\r\n\r\n    // Annual Percentage Yield in divid of 100\r\n    // uint16 public apy;\r\n\r\n    // minimum nrk token to be staked by user\r\n    uint256 public minimumStake;\r\n\r\n    uint256 public frequency;\r\n\r\n    // this is the old struct block\r\n    struct Stake {\r\n        uint256 amount; // Amount of tokens staked\r\n        uint32 startTime; // Timestamp when staking occurred\r\n        uint256 rewards; // Accumulated rewards for the stake\r\n    }\r\n\r\n    struct APY {\r\n        uint16 value;\r\n        uint32 changeTime;\r\n    }\r\n\r\n    struct Slot {\r\n        uint256 amount;\r\n        uint256 rewards;\r\n        uint32 startTime;\r\n        uint256 id;\r\n    }\r\n\r\n    struct SlotStake {\r\n        uint256 counter;\r\n        // using 0 base indexing to store the staking slots\r\n        mapping(uint256 => Slot) slotStake;\r\n    }\r\n\r\n    // Maps users to their stakes\r\n    // mapping(address => Stake) public stakes;\r\n    mapping(address => SlotStake) public stakes;\r\n\r\n    APY[] public apy;\r\n\r\n    ILiquidityPool public liquidityPool;\r\n\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint32 stakeTime,\r\n        uint256 slotId\r\n    );\r\n    event ReStaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint32 stakeTime,\r\n        uint256 slotId,\r\n        uint256 rewardsLeft\r\n    );\r\n\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint32 unstakeTime,\r\n        uint256 slotid,\r\n        uint256 rewards\r\n    );\r\n    event UnstakedTokens(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint32 unstakeTime,\r\n        uint256 _slotId,\r\n        uint256 rewardsLeft\r\n    );\r\n    event UnstakedAllTokens(\r\n        address indexed user,\r\n        uint256 totalAmount,\r\n        uint256 rewards,\r\n        uint32 unstakeTime\r\n    );\r\n    event RewardClaimed(\r\n        address indexed user,\r\n        uint256 totalReward,\r\n        uint32 timeOfClaim,\r\n        uint256 slotId,\r\n        uint256 rewardsLeft\r\n    );\r\n\r\n    event AllRewardClaimed(\r\n        address indexed user,\r\n        uint256 totalReward,\r\n        uint32 timeOfClaim\r\n    );\r\n    event AmountMigrated(\r\n        uint256 amount,\r\n        address newAddress,\r\n        uint32 migrationTime\r\n    );\r\n    event RestakedAll(address user, uint256 restakedAmount, uint32 timeStamp);\r\n\r\n    event MinimumStakeUpdated(uint256 minimumStake, uint32 timeStamp);\r\n    event FrequencyUpdated(uint256 frequency, uint32 timeStamp);\r\n    event ApyUpdated(uint256 apy, uint32 timeStamp);\r\n    event LiquidityPoolUpdated(address newPool, uint32 timeStamp);\r\n\r\n    /**\r\n     * @dev Proxy initializer function sets new owner other than admin\r\n     * @param _apy  = 18\r\n     * @param _owner The owner of this contract\r\n     * @param _minimumStake = 100000000000000000000\r\n     * @param _frequency = 31536000\r\n     */\r\n    function initialize(\r\n        uint16 _apy,\r\n        uint256 _minimumStake,\r\n        uint256 _frequency,\r\n        address _liquidityPool,\r\n        address _owner\r\n    ) external initializer {\r\n        apy.push(APY(_apy, uint32(block.timestamp)));\r\n        minimumStake = _minimumStake;\r\n        frequency = _frequency;\r\n        liquidityPool = ILiquidityPool(_liquidityPool);\r\n        __Ownable_init();\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Stake tokens into the contract.\r\n     * @notice Native NRK token more or equal to minimum value should be provided by the user\r\n     */\r\n    function stake() external payable {\r\n        require(\r\n            msg.value >= minimumStake,\r\n            \"Amount must be greater than minimum value NRK Tokens\"\r\n        );\r\n        require(!pause, \"Please wait until the staking is unpaused\");\r\n\r\n        address user = msg.sender;\r\n\r\n        stakes[user].slotStake[stakes[user].counter].amount = stakes[user]\r\n            .slotStake[stakes[user].counter]\r\n            .amount\r\n            .add(msg.value);\r\n        stakes[user].slotStake[stakes[user].counter].startTime = uint32(\r\n            block.timestamp\r\n        );\r\n        stakes[user].slotStake[stakes[user].counter].id = stakes[user].counter;\r\n\r\n        stakes[user].counter++;\r\n        emit Staked(\r\n            user,\r\n            msg.value,\r\n            uint32(block.timestamp),\r\n            stakes[user].counter - 1\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Unstake a specific amount of tokens from a specific slot\r\n     * @param _amount The amount of tokens to be unstaked.\r\n     * @param _slotId the id of slot from which token should be unstaked\r\n     * @notice Unstaked tokens and rewards will be transferred to the user's address\r\n     * @notice This is a nonReentrant function\r\n     */\r\n    function unstake(uint256 _amount, uint256 _slotId) public nonReentrant {\r\n        require(!pause, \"Please wait until the staking is unpaused\");\r\n        require(_amount != 0, \"invalid unstake amount specified\");\r\n        address user = msg.sender;\r\n        require(\r\n            stakes[user].slotStake[_slotId].amount >= _amount,\r\n            \"Insufficient staked amount\"\r\n        );\r\n\r\n        uint256 currentReward = calculateRewards(stakes[user], _slotId);\r\n        uint256 remainingStake = stakes[user].slotStake[_slotId].amount.sub(\r\n            _amount\r\n        );\r\n\r\n        stakes[user].slotStake[_slotId].amount = remainingStake;\r\n        stakes[user].slotStake[_slotId].startTime = uint32(block.timestamp);\r\n        stakes[user].slotStake[_slotId].rewards = 0;\r\n\r\n        liquidityPool.accessFunds(currentReward, \"UNSTAKE\");\r\n\r\n        require(\r\n            address(this).balance >= _amount + currentReward,\r\n            \"Contract insufficient balance\"\r\n        );\r\n        emit Unstaked(\r\n            user,\r\n            _amount,\r\n            uint32(block.timestamp),\r\n            _slotId,\r\n            currentReward\r\n        );\r\n        (bool success, ) = user.call{value: _amount + currentReward}(\"\");\r\n        require(success, \"Unable to send value or recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Unstake all the token of user\r\n     * @notice Unstaked all tokens and total rewards will be transferred to the user's address.\r\n     * @notice This is a nonReentrant function\r\n     */\r\n    function unstakeAll() external nonReentrant {\r\n        require(!pause, \"Please wait until the staking is unpaused\");\r\n\r\n        address user = msg.sender;\r\n\r\n        uint256 rewards = getTotalRewards();\r\n        uint256 stakedAmount = getUserTotalStakes();\r\n\r\n        for (uint256 i = 0; i < stakes[user].counter; i++) {\r\n            delete stakes[user].slotStake[i];\r\n        }\r\n        stakes[user].counter = 0;\r\n        liquidityPool.accessFunds(rewards, \"UNSTAKE\");\r\n\r\n        require(\r\n            address(this).balance >= stakedAmount + rewards,\r\n            \"Contract insufficient balance\"\r\n        );\r\n        emit UnstakedAllTokens(\r\n            user,\r\n            stakedAmount,\r\n            rewards,\r\n            uint32(block.timestamp)\r\n        );\r\n        (bool success, ) = user.call{value: stakedAmount + rewards}(\"\");\r\n        require(success, \"Failed to send rewards and staked amount\");\r\n    }\r\n\r\n    /**\r\n     * @dev Unstake a specific amount of tokens\r\n     * @param amount The amount of token user want to unstake\r\n     * @notice Unstake specific amount of token and transfer unstaked tokens and rewards of those tokens to user\r\n     * @notice this is a nonReentrant function\r\n     */\r\n    function unstake(uint256 amount) external nonReentrant {\r\n        require(!pause, \"Please wait until the staking is unpaused\");\r\n        address user = msg.sender;\r\n\r\n        require(\r\n            amount <= getUserTotalStakes(),\r\n            \"invalid unstaking amount specified\"\r\n        );\r\n        SlotStake storage position = stakes[user];\r\n\r\n        uint256 i = 0;\r\n        uint256 totalRewards = 0;\r\n\r\n        for (i = 0; i < position.counter; i++) {\r\n            uint256 _amount = position.slotStake[i].amount;\r\n\r\n            if (_amount == 0) {\r\n                continue;\r\n            }\r\n\r\n            uint256 rewards = calculateRewards(position, i);\r\n            totalRewards = totalRewards.add(rewards);\r\n\r\n            position.slotStake[i].startTime = uint32(block.timestamp);\r\n\r\n            if (_amount > amount) {\r\n                position.slotStake[i].amount = _amount.sub(amount);\r\n                break;\r\n            } else {\r\n                delete position.slotStake[i];\r\n                amount = amount.sub(_amount);\r\n            }\r\n        }\r\n        liquidityPool.accessFunds(totalRewards, \"UNSTAKE\");\r\n\r\n        require(\r\n            address(this).balance >= amount + totalRewards,\r\n            \"Contract insufficient balance\"\r\n        );\r\n\r\n        // use , amount -> token + rewards, timestamp, last slot, total rewards\r\n        emit UnstakedTokens(\r\n            user,\r\n            amount,\r\n            uint32(block.timestamp),\r\n            i,\r\n            stakes[msg.sender].slotStake[i].amount\r\n        );\r\n        (bool success, ) = user.call{value: amount + totalRewards}(\"\");\r\n        require(success, \"Failed to send rewards and staked amount\");\r\n    }\r\n\r\n    /**\r\n     * @dev Claim a specific amount of rewards from accumulated rewards of specific slot\r\n     * @param _rewardAmount The amount of rewards to be claimed.\r\n     * @param _slotId The slot id from where rewards should be claimed\r\n     * @notice Claimed rewards will be transferred to the user's address.\r\n     * @notice This is a nonReentrant function\r\n     */\r\n    function claimRewards(\r\n        uint256 _rewardAmount,\r\n        uint256 _slotId\r\n    ) external nonReentrant {\r\n        require(!pause, \"Please wait until the staking is unpaused\");\r\n\r\n        address user = msg.sender;\r\n\r\n        require(_rewardAmount > 0, \"invalid amount\");\r\n\r\n        stakes[user].slotStake[_slotId].rewards = stakes[user]\r\n            .slotStake[_slotId]\r\n            .rewards\r\n            .add(calculateRewards(stakes[user], _slotId));\r\n\r\n        require(\r\n            stakes[user].slotStake[_slotId].rewards >= _rewardAmount,\r\n            \"Insufficient rewards to claim\"\r\n        );\r\n\r\n        stakes[user].slotStake[_slotId].rewards = stakes[user]\r\n            .slotStake[_slotId]\r\n            .rewards\r\n            .sub(_rewardAmount);\r\n        stakes[user].slotStake[_slotId].startTime = uint32(block.timestamp);\r\n\r\n        liquidityPool.accessFunds(_rewardAmount, \"CLAIM REWARDS\");\r\n\r\n        require(\r\n            address(this).balance >= _rewardAmount,\r\n            \"Contract insufficient balance\"\r\n        );\r\n        emit RewardClaimed(\r\n            user,\r\n            _rewardAmount,\r\n            uint32(block.timestamp),\r\n            _slotId,\r\n            stakes[user].slotStake[_slotId].rewards\r\n        );\r\n        (bool success, ) = user.call{value: _rewardAmount}(\"\");\r\n        require(success, \"Unable to send value or recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Claim all rewards from all the slots\r\n     * @notice Transfer total rewards of user from accumulated rewards of each slot\r\n     * @notice This is a nonReentrant function\r\n     */\r\n\r\n    function claimAllRewards() external nonReentrant {\r\n        require(!pause, \"Please wait until the staking is unpaused\");\r\n        uint256 length = stakes[msg.sender].counter;\r\n        address user = msg.sender;\r\n        uint256 _rewardAmount = getTotalRewards();\r\n        liquidityPool.accessFunds(_rewardAmount, \"CLAIM ALL REWARDS\");\r\n\r\n        require(\r\n            address(this).balance > _rewardAmount,\r\n            \"Contract insufficient balance\"\r\n        );\r\n        for (uint256 i = 0; i < length; i++) {\r\n            stakes[user].slotStake[i].rewards = 0;\r\n            stakes[user].slotStake[i].startTime = uint32(block.timestamp);\r\n        }\r\n        emit AllRewardClaimed(user, _rewardAmount, uint32(block.timestamp));\r\n        (bool success, ) = user.call{value: _rewardAmount}(\"\");\r\n        require(success, \"Unable to send value or recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the accumulated rewards for a specific stake in a specific slot.\r\n     * @param _stake The specific user stake data for which to calculate rewards.\r\n     * @param _slotId The slot for which to calculate rewards\r\n     * @return The calculated rewards for the given stake of specific slot .\r\n     **/\r\n    function calculateRewards(\r\n        SlotStake storage _stake,\r\n        uint256 _slotId\r\n    ) internal view returns (uint256) {\r\n        uint256 index = 0;\r\n\r\n        uint256 rewards = 0;\r\n\r\n        uint32 startTime = _stake.slotStake[_slotId].startTime;\r\n\r\n        uint256 initialAmount = _stake.slotStake[_slotId].amount;\r\n\r\n        uint256 length = apy.length;\r\n\r\n        // example apy changing format\r\n        // 18 -> 16 -> 14 -> 20(current)\r\n        // here we have to find at which point user staked his assets\r\n\r\n        if (length > 1) {\r\n            for (uint256 i = 0; i < length; i++) {\r\n                if (startTime <= apy[i].changeTime) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            // 18 -> 16 -> (staking point of user)\r\n            // this means that user staked after apy updated\r\n            if (index == 0) {\r\n                // calculate reward with current apy value\r\n                return\r\n                    initialAmount.mul(apy[length - 1].value).mul(\r\n                        block.timestamp - startTime\r\n                    ) / (10000 * frequency);\r\n            }\r\n            // 18-> (staking point of user) -> 16\r\n            // this means user staked before apy updation\r\n            else {\r\n                for (uint256 i = index; i < length; i++) {\r\n                    uint256 _value = initialAmount.mul(apy[i - 1].value).mul(\r\n                        apy[i].changeTime - startTime\r\n                    ) / (10000 * frequency);\r\n                    // rewards.add(_value);\r\n                    rewards += _value;\r\n                    startTime = apy[i].changeTime;\r\n                }\r\n                rewards +=\r\n                    initialAmount.mul(apy[length - 1].value).mul(\r\n                        block.timestamp - startTime\r\n                    ) /\r\n                    (10000 * frequency);\r\n\r\n                return rewards;\r\n            }\r\n        }\r\n        // single apy value in array\r\n        else {\r\n            return\r\n                initialAmount.mul(apy[0].value).mul(\r\n                    block.timestamp - startTime\r\n                ) / (10000 * frequency);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Restake a specific amount of rewards of specific slot and update stake.\r\n     * @param _amount The amount of rewards to be restaked.\r\n     * @param _slotId The slod it of which rewards to be restaked.\r\n     * @notice This is a nonReentrant function\r\n     */\r\n    function restake(uint256 _amount, uint256 _slotId) external nonReentrant {\r\n        require(!pause, \"Please wait until the staking is unpaused\");\r\n        address user = msg.sender;\r\n\r\n        stakes[user].slotStake[_slotId].rewards = stakes[user]\r\n            .slotStake[_slotId]\r\n            .rewards\r\n            .add(calculateRewards(stakes[user], _slotId)); // Use SafeMath\r\n        require(\r\n            stakes[user].slotStake[_slotId].rewards >= _amount,\r\n            \"Insufficient rewards to restake\"\r\n        );\r\n\r\n        uint256 totalStake = stakes[user].slotStake[_slotId].amount.add(\r\n            _amount\r\n        );\r\n\r\n        stakes[user].slotStake[_slotId].amount = totalStake;\r\n        stakes[user].slotStake[_slotId].startTime = uint32(block.timestamp);\r\n        stakes[user].slotStake[_slotId].rewards = stakes[user]\r\n            .slotStake[_slotId]\r\n            .rewards\r\n            .sub(_amount);\r\n\r\n        emit ReStaked(\r\n            user,\r\n            _amount,\r\n            uint32(block.timestamp),\r\n            _slotId,\r\n            stakes[user].slotStake[_slotId].rewards\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Restake a specific amount of rewards.\r\n     * @param amount The amount of rewards to restake\r\n     * @notice This is a nonReentrant function\r\n     */\r\n\r\n    function restake(uint256 amount) external nonReentrant {\r\n        require(!pause, \"Please wait until the staking is unpaused\");\r\n        address user = msg.sender;\r\n\r\n        uint256 totalRewards = getTotalRewards();\r\n        require(\r\n            amount <= totalRewards,\r\n            \"invalid amount specified for restaking\"\r\n        );\r\n        SlotStake storage position = stakes[user];\r\n        uint256 i = 0;\r\n        for (i = 0; i < position.counter; i++) {\r\n            uint256 rewardsPerSlot = position.slotStake[i].rewards.add(\r\n                calculateRewards(stakes[user], i)\r\n            );\r\n            position.slotStake[i].rewards = rewardsPerSlot;\r\n            position.slotStake[i].startTime = uint32(block.timestamp);\r\n            // break condition where amount specified to restake is smaller than rewards in particular slot\r\n            if (position.slotStake[i].rewards > amount) {\r\n                position.slotStake[i].amount = position.slotStake[i].amount.add(\r\n                    amount\r\n                );\r\n                position.slotStake[i].rewards = stakes[user]\r\n                    .slotStake[i]\r\n                    .rewards\r\n                    .sub(amount);\r\n                break;\r\n            } else {\r\n                position.slotStake[i].amount = position.slotStake[i].amount.add(\r\n                    rewardsPerSlot\r\n                );\r\n                position.slotStake[i].rewards = 0;\r\n                amount = amount.sub(rewardsPerSlot);\r\n            }\r\n        }\r\n\r\n        emit ReStaked(\r\n            user,\r\n            amount,\r\n            uint32(block.timestamp),\r\n            i,\r\n            position.slotStake[i].rewards\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Restake all the accumulated rewards of each slot\r\n     * @notice this is a nonReentrant function\r\n     */\r\n    function restakeAll() external nonReentrant {\r\n        require(!pause, \"Please wait until the staking is unpaused\");\r\n        address user = msg.sender;\r\n\r\n        SlotStake storage position = stakes[user];\r\n        uint256 i = 0;\r\n        uint256 totalAmountRestaked = 0;\r\n        for (i = 0; i < position.counter; i++) {\r\n            uint256 rewardsPerSlot = position.slotStake[i].rewards.add(\r\n                calculateRewards(stakes[user], i)\r\n            );\r\n            totalAmountRestaked = totalAmountRestaked.add(rewardsPerSlot);\r\n            position.slotStake[i].rewards = 0;\r\n            position.slotStake[i].startTime = uint32(block.timestamp);\r\n            position.slotStake[i].amount = position.slotStake[i].amount.add(\r\n                rewardsPerSlot\r\n            );\r\n        }\r\n\r\n        // TODO need to add an event here\r\n        emit RestakedAll(user, totalAmountRestaked, uint32(block.timestamp));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the staked amount and start time for sender of a specific slot.\r\n     * @param _slotId the slot id of which token amount and start time requested.\r\n     * @return amount The amount of tokens staked.\r\n     * @return startTime The timestamp when staking occurred.\r\n     */\r\n    function getUserStake(\r\n        uint256 _slotId\r\n    ) external view returns (uint256 amount, uint32 startTime) {\r\n        Slot storage userStake = stakes[msg.sender].slotStake[_slotId];\r\n        return (userStake.amount, userStake.startTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total staked amount of sender\r\n     **/\r\n    function getUserTotalStakes() public view returns (uint256 amount) {\r\n        SlotStake storage userSlotStakes = stakes[msg.sender];\r\n        for (uint256 i = 0; i < userSlotStakes.counter; i++) {\r\n            amount += userSlotStakes.slotStake[i].amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the array of details of each slot of user\r\n     * @return Array of detail of each slot i.e. slot id, amount staked, rewards and startTime\r\n     */\r\n    function getUserStakesInfo() external view returns (Slot[] memory) {\r\n        uint256 length = stakes[msg.sender].counter;\r\n        Slot[] memory userStakeSlots = new Slot[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            userStakeSlots[i] = stakes[msg.sender].slotStake[i];\r\n        }\r\n        return userStakeSlots;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total accumulated rewards for sender of specific slot.\r\n     * @param _slotId  the specific slot id of which senders rewards requested\r\n     * @return The total amount of accumulated rewards.\r\n     */\r\n    function getUserRewards(uint256 _slotId) public view returns (uint256) {\r\n        uint256 rewards = calculateRewards(stakes[msg.sender], _slotId).add(\r\n            stakes[msg.sender].slotStake[_slotId].rewards\r\n        ); // Use SafeMath\r\n        return rewards;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total rewards till now of sender.\r\n     * @return total accumulated rewards of sender of each slot till now\r\n     */\r\n    function getTotalRewards() public view returns (uint256) {\r\n        uint256 rewards;\r\n        uint256 length = stakes[msg.sender].counter;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            rewards += getUserRewards(i);\r\n        }\r\n        return rewards;\r\n    }\r\n\r\n    /**\r\n     * @dev Get current apy\r\n     * @return APY value\r\n     */\r\n    function getCurrentApy() external view returns (uint256) {\r\n        return apy[apy.length - 1].value;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the staking pause status.\r\n     * @param _pause The new staking pause status.\r\n     * @notice This function can only be called by the contract owner.\r\n     */\r\n    function updateStakingPause(bool _pause) external onlyOwner {\r\n        pause = _pause;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the APY (Annual Percentage Yield).\r\n     * @param _newAPY The new APY value.\r\n     * @notice This function can only be called by the contract owner.\r\n     */\r\n    function setAPY(uint16 _newAPY) external onlyOwner {\r\n        apy.push(APY(_newAPY, uint32(block.timestamp)));\r\n        emit ApyUpdated(_newAPY, uint32(block.timestamp));\r\n    }\r\n\r\n    /**\r\n     * @dev Set the minimum NRK token\r\n     * @param _newMinimumStake new minimum NRK stake value\r\n     * @notice this function can only be called by the contract owner.\r\n     */\r\n    function setMinimumStake(uint256 _newMinimumStake) external onlyOwner {\r\n        minimumStake = _newMinimumStake;\r\n        emit MinimumStakeUpdated(_newMinimumStake, uint32(block.timestamp));\r\n    }\r\n\r\n    /**\r\n     * @dev Set the frequency\r\n     * @param _frequency the new frequency\r\n     * @notice this function can only be called by the contract owner.\r\n     */\r\n    function setFrequency(uint256 _frequency) external onlyOwner {\r\n        frequency = _frequency;\r\n        emit FrequencyUpdated(_frequency, uint32(block.timestamp));\r\n    }\r\n\r\n    /**\r\n     * @dev Set the liqudity pool which provides reward NRK tokens\r\n     * @param _liquidityPool new pool address.\r\n     * @notice this function can only be called by the contract owner.\r\n     */\r\n    function setLiquidityPool(address _liquidityPool) external onlyOwner {\r\n        liquidityPool = ILiquidityPool(_liquidityPool);\r\n        emit LiquidityPoolUpdated(_liquidityPool, uint32(block.timestamp));\r\n    }\r\n\r\n    /**\r\n     * @dev Migrate funds to a new contract address.\r\n     * @param amount The amount of funds to migrate.\r\n     * @param newAddress The address of the new contract to receive the funds.\r\n     * @notice This function is non-reentrant and can only be called by the contract owner.\r\n     */\r\n    function migration(\r\n        uint256 amount,\r\n        address newAddress\r\n    ) external nonReentrant onlyOwner {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Contract insufficient balance\"\r\n        );\r\n        require(amount > 0, \"invalid amount\");\r\n        require(newAddress != address(0), \"invalid address\");\r\n        emit AmountMigrated(amount, newAddress, uint32(block.timestamp));\r\n        (bool success, ) = newAddress.call{value: amount}(\"\");\r\n        require(success, \"Unable to send value or recipient may have reverted\");\r\n    }\r\n}\r\n"
      },
      "contracts/UniswapV2ERC20.sol": {
        "content": "pragma solidity ^0.8.20;\n\nimport \"./interfaces/IUniswapV2ERC20.sol\";\nimport \"./libraries/SafeMath.sol\";\n\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\n    using SafeMath for uint;\n\n    string public constant name = \"Nordek V2\";\n    string public constant symbol = \"NRK-LP\";\n    uint8 public constant decimals = 18;\n    uint public totalSupply;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH =\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() {\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                ),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool) {\n        if (allowance[from][msg.sender] != type(uint).max) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\n                value\n            );\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint value,\n        uint deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(deadline >= block.timestamp, \"UniswapV2: EXPIRED\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(\n                        PERMIT_TYPEHASH,\n                        owner,\n                        spender,\n                        value,\n                        nonces[owner]++,\n                        deadline\n                    )\n                )\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(\n            recoveredAddress != address(0) && recoveredAddress == owner,\n            \"UniswapV2: INVALID_SIGNATURE\"\n        );\n        _approve(owner, spender, value);\n    }\n}\n"
      },
      "contracts/UniswapV2Factory.sol": {
        "content": "pragma solidity ^0.8.20;\n\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./UniswapV2Pair.sol\";\n\ncontract UniswapV2Factory is IUniswapV2Factory {\n    address public feeTo;\n    address public feeToSetter;\n\n    mapping(address => mapping(address => address)) public getPair;\n    address[] public allPairs;\n\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint\n    );\n\n    constructor(address _feeToSetter) {\n        feeToSetter = _feeToSetter;\n    }\n\n    function allPairsLength() external view returns (uint) {\n        return allPairs.length;\n    }\n\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair) {\n        require(tokenA != tokenB, \"UniswapV2: IDENTICAL_ADDRESSES\");\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2: ZERO_ADDRESS\");\n        require(\n            getPair[token0][token1] == address(0),\n            \"UniswapV2: PAIR_EXISTS\"\n        ); // single check is sufficient\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IUniswapV2Pair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setFeeTo(address _feeTo) external {\n        require(msg.sender == feeToSetter, \"UniswapV2: FORBIDDEN\");\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) external {\n        require(msg.sender == feeToSetter, \"UniswapV2: FORBIDDEN\");\n        feeToSetter = _feeToSetter;\n    }\n}\n"
      },
      "contracts/UniswapV2Pair.sol": {
        "content": "pragma solidity ^0.8.20;\n\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"./UniswapV2ERC20.sol\";\nimport \"./libraries/Math.sol\";\nimport \"./libraries/UQ112x112.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IUniswapV2Callee.sol\";\n\ncontract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {\n    using SafeMath for uint;\n    using UQ112x112 for uint224;\n\n    uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\n    bytes4 private constant SELECTOR =\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n\n    address public factory;\n    address public token0;\n    address public token1;\n\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint public price0CumulativeLast;\n    uint public price1CumulativeLast;\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, \"UniswapV2: LOCKED\");\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function getReserves()\n        public\n        view\n        returns (\n            uint112 _reserve0,\n            uint112 _reserve1,\n            uint32 _blockTimestampLast\n        )\n    {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(SELECTOR, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"UniswapV2: TRANSFER_FAILED\"\n        );\n    }\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(\n        address indexed sender,\n        uint amount0,\n        uint amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    constructor() {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external {\n        require(msg.sender == factory, \"UniswapV2: FORBIDDEN\"); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(\n        uint balance0,\n        uint balance1,\n        uint112 _reserve0,\n        uint112 _reserve1\n    ) private {\n        require(\n            balance0 <= type(uint112).max && balance1 <= type(uint112).max,\n            \"UniswapV2: OVERFLOW\"\n        );\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast +=\n                uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\n                timeElapsed;\n            price1CumulativeLast +=\n                uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\n                timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(\n        uint112 _reserve0,\n        uint112 _reserve1\n    ) private returns (bool feeOn) {\n        address feeTo = IUniswapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(\n                amount0.mul(_totalSupply) / _reserve0,\n                amount1.mul(_totalSupply) / _reserve1\n            );\n        }\n        require(liquidity > 0, \"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\");\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(\n        address to\n    ) external lock returns (uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(\n            amount0 > 0 && amount1 > 0,\n            \"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\"\n        );\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external lock {\n        require(\n            amount0Out > 0 || amount1Out > 0,\n            \"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        require(\n            amount0Out < _reserve0 && amount1Out < _reserve1,\n            \"UniswapV2: INSUFFICIENT_LIQUIDITY\"\n        );\n\n        uint balance0;\n        uint balance1;\n        {\n            // scope for _token{0,1}, avoids stack too deep errors\n            address _token0 = token0;\n            address _token1 = token1;\n            require(to != _token0 && to != _token1, \"UniswapV2: INVALID_TO\");\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n            if (data.length > 0)\n                IUniswapV2Callee(to).uniswapV2Call(\n                    msg.sender,\n                    amount0Out,\n                    amount1Out,\n                    data\n                );\n            balance0 = IERC20(_token0).balanceOf(address(this));\n            balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out\n            ? balance0 - (_reserve0 - amount0Out)\n            : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out\n            ? balance1 - (_reserve1 - amount1Out)\n            : 0;\n        require(\n            amount0In > 0 || amount1In > 0,\n            \"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\"\n        );\n        {\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n            require(\n                balance0Adjusted.mul(balance1Adjusted) >=\n                    uint(_reserve0).mul(_reserve1).mul(1000 ** 2),\n                \"UniswapV2: K\"\n            );\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(\n            _token0,\n            to,\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\n        );\n        _safeTransfer(\n            _token1,\n            to,\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\n        );\n    }\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(\n            IERC20(token0).balanceOf(address(this)),\n            IERC20(token1).balanceOf(address(this)),\n            reserve0,\n            reserve1\n        );\n    }\n}\n"
      },
      "contracts/UniswapV2Router02.sol": {
        "content": "pragma solidity ^0.8.20;\r\n\r\nimport \"./interfaces/IUniswapV2Factory.sol\";\r\nimport \"./libraries/TransferHelper.sol\";\r\nimport \"./interfaces/IUniswapV2Router02.sol\";\r\nimport \"./libraries/UniswapV2Library.sol\";\r\nimport \"./libraries/SafeMath.sol\";\r\nimport \"./interfaces/IERC20.sol\";\r\nimport \"./interfaces/IWETH.sol\";\r\n\r\ncontract UniswapV2Router02 is IUniswapV2Router02 {\r\n    using SafeMath for uint;\r\n\r\n    address public immutable factory;\r\n    address public immutable WETH;\r\n\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, \"UniswapV2Router: EXPIRED\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _factory, address _WETH) {\r\n        factory = _factory;\r\n        WETH = _WETH;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    // **** ADD LIQUIDITY ****\r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin\r\n    ) internal virtual returns (uint amountA, uint amountB) {\r\n        // create the pair if it doesn't exist yet\r\n        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\r\n            IUniswapV2Factory(factory).createPair(tokenA, tokenB);\r\n        }\r\n        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(\r\n            factory,\r\n            tokenA,\r\n            tokenB\r\n        );\r\n        if (reserveA == 0 && reserveB == 0) {\r\n            (amountA, amountB) = (amountADesired, amountBDesired);\r\n        } else {\r\n            uint amountBOptimal = UniswapV2Library.quote(\r\n                amountADesired,\r\n                reserveA,\r\n                reserveB\r\n            );\r\n            if (amountBOptimal <= amountBDesired) {\r\n                require(\r\n                    amountBOptimal >= amountBMin,\r\n                    \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\"\r\n                );\r\n                (amountA, amountB) = (amountADesired, amountBOptimal);\r\n            } else {\r\n                uint amountAOptimal = UniswapV2Library.quote(\r\n                    amountBDesired,\r\n                    reserveB,\r\n                    reserveA\r\n                );\r\n                assert(amountAOptimal <= amountADesired);\r\n                require(\r\n                    amountAOptimal >= amountAMin,\r\n                    \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\"\r\n                );\r\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint amountA, uint amountB, uint liquidity)\r\n    {\r\n        (amountA, amountB) = _addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            amountADesired,\r\n            amountBDesired,\r\n            amountAMin,\r\n            amountBMin\r\n        );\r\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\r\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\r\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\r\n        liquidity = IUniswapV2Pair(pair).mint(to);\r\n    }\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint amountToken, uint amountETH, uint liquidity)\r\n    {\r\n        (amountToken, amountETH) = _addLiquidity(\r\n            token,\r\n            WETH,\r\n            amountTokenDesired,\r\n            msg.value,\r\n            amountTokenMin,\r\n            amountETHMin\r\n        );\r\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\r\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\r\n        IWETH(WETH).deposit{value: amountETH}();\r\n        assert(IWETH(WETH).transfer(pair, amountETH));\r\n        liquidity = IUniswapV2Pair(pair).mint(to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amountETH)\r\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY ****\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint amountA, uint amountB)\r\n    {\r\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\r\n        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\r\n        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\r\n        (address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);\r\n        (amountA, amountB) = tokenA == token0\r\n            ? (amount0, amount1)\r\n            : (amount1, amount0);\r\n        require(\r\n            amountA >= amountAMin,\r\n            \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\"\r\n        );\r\n        require(\r\n            amountB >= amountBMin,\r\n            \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\"\r\n        );\r\n    }\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        public\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint amountToken, uint amountETH)\r\n    {\r\n        (amountToken, amountETH) = removeLiquidity(\r\n            token,\r\n            WETH,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n        TransferHelper.safeTransfer(token, to, amountToken);\r\n        IWETH(WETH).withdraw(amountETH);\r\n        TransferHelper.safeTransferETH(to, amountETH);\r\n    }\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override returns (uint amountA, uint amountB) {\r\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\r\n        uint value = approveMax ? type(uint256).max : liquidity;\r\n        IUniswapV2Pair(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        (amountA, amountB) = removeLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            liquidity,\r\n            amountAMin,\r\n            amountBMin,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override returns (uint amountToken, uint amountETH) {\r\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\r\n        uint value = approveMax ? type(uint256).max : liquidity;\r\n        IUniswapV2Pair(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        (amountToken, amountETH) = removeLiquidityETH(\r\n            token,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\r\n        (, amountETH) = removeLiquidity(\r\n            token,\r\n            WETH,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            token,\r\n            to,\r\n            IERC20(token).balanceOf(address(this))\r\n        );\r\n        IWETH(WETH).withdraw(amountETH);\r\n        TransferHelper.safeTransferETH(to, amountETH);\r\n    }\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override returns (uint amountETH) {\r\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\r\n        uint value = approveMax ? type(uint256).max : liquidity;\r\n        IUniswapV2Pair(pair).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            token,\r\n            liquidity,\r\n            amountTokenMin,\r\n            amountETHMin,\r\n            to,\r\n            deadline\r\n        );\r\n    }\r\n\r\n    // **** SWAP ****\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swap(\r\n        uint[] memory amounts,\r\n        address[] memory path,\r\n        address _to\r\n    ) internal virtual {\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\r\n            uint amountOut = amounts[i + 1];\r\n            (uint amount0Out, uint amount1Out) = input == token0\r\n                ? (uint(0), amountOut)\r\n                : (amountOut, uint(0));\r\n            address to = i < path.length - 2\r\n                ? UniswapV2Library.pairFor(factory, output, path[i + 2])\r\n                : _to;\r\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output))\r\n                .swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\r\n        require(\r\n            amounts[amounts.length - 1] >= amountOutMin,\r\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\r\n        require(\r\n            amounts[0] <= amountInMax,\r\n            \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\"\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\r\n        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\r\n        require(\r\n            amounts[amounts.length - 1] >= amountOutMin,\r\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        IWETH(WETH).deposit{value: amounts[0]}();\r\n        assert(\r\n            IWETH(WETH).transfer(\r\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\r\n                amounts[0]\r\n            )\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\r\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\r\n        require(\r\n            amounts[0] <= amountInMax,\r\n            \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\"\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\r\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\r\n    }\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\r\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\r\n        require(\r\n            amounts[amounts.length - 1] >= amountOutMin,\r\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\r\n            amounts[0]\r\n        );\r\n        _swap(amounts, path, address(this));\r\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\r\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\r\n    }\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        virtual\r\n        override\r\n        ensure(deadline)\r\n        returns (uint[] memory amounts)\r\n    {\r\n        require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\r\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\r\n        require(\r\n            amounts[0] <= msg.value,\r\n            \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\"\r\n        );\r\n        IWETH(WETH).deposit{value: amounts[0]}();\r\n        assert(\r\n            IWETH(WETH).transfer(\r\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\r\n                amounts[0]\r\n            )\r\n        );\r\n        _swap(amounts, path, to);\r\n        // refund dust eth, if any\r\n        if (msg.value > amounts[0])\r\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\r\n    }\r\n\r\n    // **** SWAP (supporting fee-on-transfer tokens) ****\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swapSupportingFeeOnTransferTokens(\r\n        address[] memory path,\r\n        address _to\r\n    ) internal virtual {\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\r\n            IUniswapV2Pair pair = IUniswapV2Pair(\r\n                UniswapV2Library.pairFor(factory, input, output)\r\n            );\r\n            uint amountInput;\r\n            uint amountOutput;\r\n            {\r\n                // scope to avoid stack too deep errors\r\n                (uint reserve0, uint reserve1, ) = pair.getReserves();\r\n                (uint reserveInput, uint reserveOutput) = input == token0\r\n                    ? (reserve0, reserve1)\r\n                    : (reserve1, reserve0);\r\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(\r\n                    reserveInput\r\n                );\r\n                amountOutput = UniswapV2Library.getAmountOut(\r\n                    amountInput,\r\n                    reserveInput,\r\n                    reserveOutput\r\n                );\r\n            }\r\n            (uint amount0Out, uint amount1Out) = input == token0\r\n                ? (uint(0), amountOutput)\r\n                : (amountOutput, uint(0));\r\n            address to = i < path.length - 2\r\n                ? UniswapV2Library.pairFor(factory, output, path[i + 2])\r\n                : _to;\r\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual override ensure(deadline) {\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\r\n            amountIn\r\n        );\r\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(\r\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\r\n                amountOutMin,\r\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n    }\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable virtual override ensure(deadline) {\r\n        require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\r\n        uint amountIn = msg.value;\r\n        IWETH(WETH).deposit{value: amountIn}();\r\n        assert(\r\n            IWETH(WETH).transfer(\r\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\r\n                amountIn\r\n            )\r\n        );\r\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\r\n        _swapSupportingFeeOnTransferTokens(path, to);\r\n        require(\r\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >=\r\n                amountOutMin,\r\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n    }\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external virtual override ensure(deadline) {\r\n        require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\r\n        TransferHelper.safeTransferFrom(\r\n            path[0],\r\n            msg.sender,\r\n            UniswapV2Library.pairFor(factory, path[0], path[1]),\r\n            amountIn\r\n        );\r\n        _swapSupportingFeeOnTransferTokens(path, address(this));\r\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\r\n        require(\r\n            amountOut >= amountOutMin,\r\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        IWETH(WETH).withdraw(amountOut);\r\n        TransferHelper.safeTransferETH(to, amountOut);\r\n    }\r\n\r\n    // **** LIBRARY FUNCTIONS ****\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) public pure virtual override returns (uint amountB) {\r\n        return UniswapV2Library.quote(amountA, reserveA, reserveB);\r\n    }\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) public pure virtual override returns (uint amountOut) {\r\n        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\r\n    }\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) public pure virtual override returns (uint amountIn) {\r\n        return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\r\n    }\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] memory path\r\n    ) public view virtual override returns (uint[] memory amounts) {\r\n        return UniswapV2Library.getAmountsOut(factory, amountIn, path);\r\n    }\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] memory path\r\n    ) public view virtual override returns (uint[] memory amounts) {\r\n        return UniswapV2Library.getAmountsIn(factory, amountOut, path);\r\n    }\r\n}\r\n"
      },
      "contracts/WNRK.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"openzeppelin/token/ERC20/ERC20.sol\";\r\n\r\ncontract WNRK is ERC20 {\r\n    constructor() ERC20(\"Wrapped NRK\", \"WNRK\") {}\r\n\r\n    fallback() external payable {\r\n        deposit();\r\n    }\r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function deposit() public payable {\r\n        _mint(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external {\r\n        address account = msg.sender;\r\n        _burn(account, _amount);\r\n        (bool success, ) = payable(account).call{value: _amount}(\"\");\r\n        require(success, \"failed to send NRK\");\r\n    }\r\n}\r\n"
      },
      "contracts/interfaces/IERC20.sol": {
        "content": "pragma solidity ^0.8.20;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n}\n"
      },
      "contracts/interfaces/IUniswapV2Callee.sol": {
        "content": "pragma solidity ^0.8.20;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(\n        address sender,\n        uint amount0,\n        uint amount1,\n        bytes calldata data\n    ) external;\n}\n"
      },
      "contracts/interfaces/IUniswapV2ERC20.sol": {
        "content": "pragma solidity ^0.8.20;\n\ninterface IUniswapV2ERC20 {\n     \n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
      },
      "contracts/interfaces/IUniswapV2Factory.sol": {
        "content": "pragma solidity ^0.8.20;\n\ninterface IUniswapV2Factory {\n   \n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(\n        address tokenA,\n        address tokenB\n    ) external view returns (address pair);\n\n    function allPairs(uint) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint);\n\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
      },
      "contracts/interfaces/IUniswapV2Pair.sol": {
        "content": "pragma solidity ^0.8.20;\n\nimport \"./IUniswapV2ERC20.sol\";\n\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint);\n\n    function price1CumulativeLast() external view returns (uint);\n\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
      },
      "contracts/interfaces/IUniswapV2Router01.sol": {
        "content": "pragma solidity ^0.8.20;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n"
      },
      "contracts/interfaces/IUniswapV2Router02.sol": {
        "content": "pragma solidity ^0.8.20;\r\n\r\nimport \"./IUniswapV2Router01.sol\";\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"
      },
      "contracts/interfaces/IWETH.sol": {
        "content": "pragma solidity ^0.8.20;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function withdraw(uint) external;\r\n}\r\n"
      },
      "contracts/libraries/Math.sol": {
        "content": "pragma solidity ^0.8.20;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
      },
      "contracts/libraries/SafeMath.sol": {
        "content": "pragma solidity ^0.8.20;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}\n"
      },
      "contracts/libraries/TransferHelper.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.20;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}"
      },
      "contracts/libraries/UQ112x112.sol": {
        "content": "pragma solidity ^0.8.20;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2 ** 112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
      },
      "contracts/libraries/UniswapV2Library.sol": {
        "content": "pragma solidity >=0.5.0;\r\n\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint160(\r\n                uint(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            hex\"ff\",\r\n                            factory,\r\n                            keccak256(abi.encodePacked(token0, token1)),\r\n                            hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(\r\n            pairFor(factory, tokenA, tokenB)\r\n        ).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) internal pure returns (uint amountB) {\r\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint amountIn,\r\n        address[] memory path\r\n    ) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(\r\n                factory,\r\n                path[i],\r\n                path[i + 1]\r\n            );\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint amountOut,\r\n        address[] memory path\r\n    ) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            (uint reserveIn, uint reserveOut) = getReserves(\r\n                factory,\r\n                path[i - 1],\r\n                path[i]\r\n            );\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/Base.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nimport {StdStorage} from \"./StdStorage.sol\";\r\nimport {Vm, VmSafe} from \"./Vm.sol\";\r\n\r\nabstract contract CommonBase {\r\n    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\r\n    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256(\"hevm cheat code\"))));\r\n    // console.sol and console2.sol work by executing a staticcall to this address.\r\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\r\n    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\r\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\r\n    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.\r\n    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256(\"foundry default caller\"))));\r\n    // Address of the test contract, deployed by the DEFAULT_SENDER.\r\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\r\n    // Deterministic deployment address of the Multicall3 contract.\r\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\r\n    // The order of the secp256k1 curve.\r\n    uint256 internal constant SECP256K1_ORDER =\r\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\r\n\r\n    uint256 internal constant UINT256_MAX =\r\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    Vm internal constant vm = Vm(VM_ADDRESS);\r\n    StdStorage internal stdstore;\r\n}\r\n\r\nabstract contract TestBase is CommonBase {}\r\n\r\nabstract contract ScriptBase is CommonBase {\r\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\r\n}\r\n"
      },
      "lib/forge-std/src/Script.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\n// 💬 ABOUT\r\n// Forge Std's default Script.\r\n\r\n// 🧩 MODULES\r\nimport {console} from \"./console.sol\";\r\nimport {console2} from \"./console2.sol\";\r\nimport {safeconsole} from \"./safeconsole.sol\";\r\nimport {StdChains} from \"./StdChains.sol\";\r\nimport {StdCheatsSafe} from \"./StdCheats.sol\";\r\nimport {stdJson} from \"./StdJson.sol\";\r\nimport {stdMath} from \"./StdMath.sol\";\r\nimport {StdStorage, stdStorageSafe} from \"./StdStorage.sol\";\r\nimport {StdStyle} from \"./StdStyle.sol\";\r\nimport {StdUtils} from \"./StdUtils.sol\";\r\nimport {VmSafe} from \"./Vm.sol\";\r\n\r\n// 📦 BOILERPLATE\r\nimport {ScriptBase} from \"./Base.sol\";\r\n\r\n// ⭐️ SCRIPT\r\nabstract contract Script is StdChains, StdCheatsSafe, StdUtils, ScriptBase {\r\n    // Note: IS_SCRIPT() must return true.\r\n    bool public IS_SCRIPT = true;\r\n}\r\n"
      },
      "lib/forge-std/src/StdChains.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nimport {VmSafe} from \"./Vm.sol\";\r\n\r\n/**\r\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\r\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\r\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\r\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\r\n * alias used in this contract, which can be found as the first argument to the\r\n * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.\r\n *\r\n * There are two main ways to use this contract:\r\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\r\n *      `setChain(string memory chainAlias, Chain memory chain)`\r\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\r\n *\r\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\r\n * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\r\n * `defaultRpcUrls`.\r\n *\r\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\r\n *\r\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\r\n * we want to retrieve the RPC URL for `mainnet`:\r\n *   - If you have specified data with `setChain`, it will return that.\r\n *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it\r\n *     is valid (e.g. a URL is specified, or an environment variable is given and exists).\r\n *   - If neither of the above conditions is met, the default data is returned.\r\n *\r\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\r\n */\r\nabstract contract StdChains {\r\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    bool private stdChainsInitialized;\r\n\r\n    struct ChainData {\r\n        string name;\r\n        uint256 chainId;\r\n        string rpcUrl;\r\n    }\r\n\r\n    struct Chain {\r\n        // The chain name.\r\n        string name;\r\n        // The chain's Chain ID.\r\n        uint256 chainId;\r\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\r\n        string chainAlias;\r\n        // A default RPC endpoint for this chain.\r\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\r\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\r\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\r\n        string rpcUrl;\r\n    }\r\n\r\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\r\n    mapping(string => Chain) private chains;\r\n    // Maps from the chain's alias to it's default RPC URL.\r\n    mapping(string => string) private defaultRpcUrls;\r\n    // Maps from a chain ID to it's alias.\r\n    mapping(uint256 => string) private idToAlias;\r\n\r\n    bool private fallbackToDefaultRpcUrls = true;\r\n\r\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\r\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\r\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\r\n\r\n        initializeStdChains();\r\n        chain = chains[chainAlias];\r\n        require(\r\n            chain.chainId != 0,\r\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\r\n        );\r\n\r\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\r\n    }\r\n\r\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\r\n        require(chainId != 0, \"StdChains getChain(uint256): Chain ID cannot be 0.\");\r\n        initializeStdChains();\r\n        string memory chainAlias = idToAlias[chainId];\r\n\r\n        chain = chains[chainAlias];\r\n\r\n        require(\r\n            chain.chainId != 0,\r\n            string(abi.encodePacked(\"StdChains getChain(uint256): Chain with ID \", vm.toString(chainId), \" not found.\"))\r\n        );\r\n\r\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\r\n    }\r\n\r\n    // set chain info, with priority to argument's rpcUrl field.\r\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\r\n        require(\r\n            bytes(chainAlias).length != 0,\r\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\r\n        );\r\n\r\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\r\n\r\n        initializeStdChains();\r\n        string memory foundAlias = idToAlias[chain.chainId];\r\n\r\n        require(\r\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\r\n            string(\r\n                abi.encodePacked(\r\n                    \"StdChains setChain(string,ChainData): Chain ID \",\r\n                    vm.toString(chain.chainId),\r\n                    \" already used by \\\"\",\r\n                    foundAlias,\r\n                    \"\\\".\"\r\n                )\r\n            )\r\n        );\r\n\r\n        uint256 oldChainId = chains[chainAlias].chainId;\r\n        delete idToAlias[oldChainId];\r\n\r\n        chains[chainAlias] =\r\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\r\n        idToAlias[chain.chainId] = chainAlias;\r\n    }\r\n\r\n    // set chain info, with priority to argument's rpcUrl field.\r\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\r\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\r\n    }\r\n\r\n    function _toUpper(string memory str) private pure returns (string memory) {\r\n        bytes memory strb = bytes(str);\r\n        bytes memory copy = new bytes(strb.length);\r\n        for (uint256 i = 0; i < strb.length; i++) {\r\n            bytes1 b = strb[i];\r\n            if (b >= 0x61 && b <= 0x7A) {\r\n                copy[i] = bytes1(uint8(b) - 32);\r\n            } else {\r\n                copy[i] = b;\r\n            }\r\n        }\r\n        return string(copy);\r\n    }\r\n\r\n    // lookup rpcUrl, in descending order of priority:\r\n    // current -> config (foundry.toml) -> environment variable -> default\r\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain) private returns (Chain memory) {\r\n        if (bytes(chain.rpcUrl).length == 0) {\r\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\r\n                chain.rpcUrl = configRpcUrl;\r\n            } catch (bytes memory err) {\r\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\r\n                if (fallbackToDefaultRpcUrls) {\r\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\r\n                } else {\r\n                    chain.rpcUrl = vm.envString(envName);\r\n                }\r\n                // distinguish 'not found' from 'cannot read'\r\n                bytes memory notFoundError =\r\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\r\n                if (keccak256(notFoundError) != keccak256(err) || bytes(chain.rpcUrl).length == 0) {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, err), mload(err))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return chain;\r\n    }\r\n\r\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\r\n        fallbackToDefaultRpcUrls = useDefault;\r\n    }\r\n\r\n    function initializeStdChains() private {\r\n        if (stdChainsInitialized) return;\r\n\r\n        stdChainsInitialized = true;\r\n\r\n        // If adding an RPC here, make sure to test the default RPC URL in `testRpcs`\r\n        setChainWithDefaultRpcUrl(\"anvil\", ChainData(\"Anvil\", 31337, \"http://127.0.0.1:8545\"));\r\n        setChainWithDefaultRpcUrl(\r\n            \"mainnet\", ChainData(\"Mainnet\", 1, \"https://mainnet.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\r\n            \"goerli\", ChainData(\"Goerli\", 5, \"https://goerli.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\r\n            \"sepolia\", ChainData(\"Sepolia\", 11155111, \"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\"optimism\", ChainData(\"Optimism\", 10, \"https://mainnet.optimism.io\"));\r\n        setChainWithDefaultRpcUrl(\"optimism_goerli\", ChainData(\"Optimism Goerli\", 420, \"https://goerli.optimism.io\"));\r\n        setChainWithDefaultRpcUrl(\"arbitrum_one\", ChainData(\"Arbitrum One\", 42161, \"https://arb1.arbitrum.io/rpc\"));\r\n        setChainWithDefaultRpcUrl(\r\n            \"arbitrum_one_goerli\", ChainData(\"Arbitrum One Goerli\", 421613, \"https://goerli-rollup.arbitrum.io/rpc\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\"arbitrum_nova\", ChainData(\"Arbitrum Nova\", 42170, \"https://nova.arbitrum.io/rpc\"));\r\n        setChainWithDefaultRpcUrl(\"polygon\", ChainData(\"Polygon\", 137, \"https://polygon-rpc.com\"));\r\n        setChainWithDefaultRpcUrl(\r\n            \"polygon_mumbai\", ChainData(\"Polygon Mumbai\", 80001, \"https://rpc-mumbai.maticvigil.com\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\"avalanche\", ChainData(\"Avalanche\", 43114, \"https://api.avax.network/ext/bc/C/rpc\"));\r\n        setChainWithDefaultRpcUrl(\r\n            \"avalanche_fuji\", ChainData(\"Avalanche Fuji\", 43113, \"https://api.avax-test.network/ext/bc/C/rpc\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\r\n            \"bnb_smart_chain\", ChainData(\"BNB Smart Chain\", 56, \"https://bsc-dataseed1.binance.org\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\r\n            \"bnb_smart_chain_testnet\",\r\n            ChainData(\"BNB Smart Chain Testnet\", 97, \"https://rpc.ankr.com/bsc_testnet_chapel\")\r\n        );\r\n        setChainWithDefaultRpcUrl(\"gnosis_chain\", ChainData(\"Gnosis Chain\", 100, \"https://rpc.gnosischain.com\"));\r\n    }\r\n\r\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\r\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\r\n        string memory rpcUrl = chain.rpcUrl;\r\n        defaultRpcUrls[chainAlias] = rpcUrl;\r\n        chain.rpcUrl = \"\";\r\n        setChain(chainAlias, chain);\r\n        chain.rpcUrl = rpcUrl; // restore argument\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdCheats.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\r\nimport {Vm} from \"./Vm.sol\";\r\n\r\nabstract contract StdCheatsSafe {\r\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    uint256 private constant UINT256_MAX =\r\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    bool private gasMeteringOff;\r\n\r\n    // Data structures to parse Transaction objects from the broadcast artifact\r\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\r\n    // and then converted to the one that is used by the user for better UX.\r\n\r\n    struct RawTx1559 {\r\n        string[] arguments;\r\n        address contractAddress;\r\n        string contractName;\r\n        // json value name = function\r\n        string functionSig;\r\n        bytes32 hash;\r\n        // json value name = tx\r\n        RawTx1559Detail txDetail;\r\n        // json value name = type\r\n        string opcode;\r\n    }\r\n\r\n    struct RawTx1559Detail {\r\n        AccessList[] accessList;\r\n        bytes data;\r\n        address from;\r\n        bytes gas;\r\n        bytes nonce;\r\n        address to;\r\n        bytes txType;\r\n        bytes value;\r\n    }\r\n\r\n    struct Tx1559 {\r\n        string[] arguments;\r\n        address contractAddress;\r\n        string contractName;\r\n        string functionSig;\r\n        bytes32 hash;\r\n        Tx1559Detail txDetail;\r\n        string opcode;\r\n    }\r\n\r\n    struct Tx1559Detail {\r\n        AccessList[] accessList;\r\n        bytes data;\r\n        address from;\r\n        uint256 gas;\r\n        uint256 nonce;\r\n        address to;\r\n        uint256 txType;\r\n        uint256 value;\r\n    }\r\n\r\n    // Data structures to parse Transaction objects from the broadcast artifact\r\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\r\n    // and then converted to the one that is used by the user for better UX.\r\n\r\n    struct TxLegacy {\r\n        string[] arguments;\r\n        address contractAddress;\r\n        string contractName;\r\n        string functionSig;\r\n        string hash;\r\n        string opcode;\r\n        TxDetailLegacy transaction;\r\n    }\r\n\r\n    struct TxDetailLegacy {\r\n        AccessList[] accessList;\r\n        uint256 chainId;\r\n        bytes data;\r\n        address from;\r\n        uint256 gas;\r\n        uint256 gasPrice;\r\n        bytes32 hash;\r\n        uint256 nonce;\r\n        bytes1 opcode;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint256 txType;\r\n        address to;\r\n        uint8 v;\r\n        uint256 value;\r\n    }\r\n\r\n    struct AccessList {\r\n        address accessAddress;\r\n        bytes32[] storageKeys;\r\n    }\r\n\r\n    // Data structures to parse Receipt objects from the broadcast artifact.\r\n    // The Raw structs is what is parsed from the JSON\r\n    // and then converted to the one that is used by the user for better UX.\r\n\r\n    struct RawReceipt {\r\n        bytes32 blockHash;\r\n        bytes blockNumber;\r\n        address contractAddress;\r\n        bytes cumulativeGasUsed;\r\n        bytes effectiveGasPrice;\r\n        address from;\r\n        bytes gasUsed;\r\n        RawReceiptLog[] logs;\r\n        bytes logsBloom;\r\n        bytes status;\r\n        address to;\r\n        bytes32 transactionHash;\r\n        bytes transactionIndex;\r\n    }\r\n\r\n    struct Receipt {\r\n        bytes32 blockHash;\r\n        uint256 blockNumber;\r\n        address contractAddress;\r\n        uint256 cumulativeGasUsed;\r\n        uint256 effectiveGasPrice;\r\n        address from;\r\n        uint256 gasUsed;\r\n        ReceiptLog[] logs;\r\n        bytes logsBloom;\r\n        uint256 status;\r\n        address to;\r\n        bytes32 transactionHash;\r\n        uint256 transactionIndex;\r\n    }\r\n\r\n    // Data structures to parse the entire broadcast artifact, assuming the\r\n    // transactions conform to EIP1559.\r\n\r\n    struct EIP1559ScriptArtifact {\r\n        string[] libraries;\r\n        string path;\r\n        string[] pending;\r\n        Receipt[] receipts;\r\n        uint256 timestamp;\r\n        Tx1559[] transactions;\r\n        TxReturn[] txReturns;\r\n    }\r\n\r\n    struct RawEIP1559ScriptArtifact {\r\n        string[] libraries;\r\n        string path;\r\n        string[] pending;\r\n        RawReceipt[] receipts;\r\n        TxReturn[] txReturns;\r\n        uint256 timestamp;\r\n        RawTx1559[] transactions;\r\n    }\r\n\r\n    struct RawReceiptLog {\r\n        // json value = address\r\n        address logAddress;\r\n        bytes32 blockHash;\r\n        bytes blockNumber;\r\n        bytes data;\r\n        bytes logIndex;\r\n        bool removed;\r\n        bytes32[] topics;\r\n        bytes32 transactionHash;\r\n        bytes transactionIndex;\r\n        bytes transactionLogIndex;\r\n    }\r\n\r\n    struct ReceiptLog {\r\n        // json value = address\r\n        address logAddress;\r\n        bytes32 blockHash;\r\n        uint256 blockNumber;\r\n        bytes data;\r\n        uint256 logIndex;\r\n        bytes32[] topics;\r\n        uint256 transactionIndex;\r\n        uint256 transactionLogIndex;\r\n        bool removed;\r\n    }\r\n\r\n    struct TxReturn {\r\n        string internalType;\r\n        string value;\r\n    }\r\n\r\n    struct Account {\r\n        address addr;\r\n        uint256 key;\r\n    }\r\n\r\n    enum AddressType {\r\n        Payable,\r\n        NonPayable,\r\n        ZeroAddress,\r\n        Precompile,\r\n        ForgeAddress\r\n    }\r\n\r\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\r\n    function assumeNotBlacklisted(address token, address addr) internal view virtual {\r\n        // Nothing to check if `token` is not a contract.\r\n        uint256 tokenCodeSize;\r\n        assembly {\r\n            tokenCodeSize := extcodesize(token)\r\n        }\r\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\r\n\r\n        bool success;\r\n        bytes memory returnData;\r\n\r\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\r\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\r\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\r\n\r\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\r\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\r\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\r\n    }\r\n\r\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\r\n    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\r\n    // backwards compatibility, since this name was used in the original PR which has already has\r\n    // a release. This function can be removed in a future release once we want a breaking change.\r\n    function assumeNoBlacklisted(address token, address addr) internal view virtual {\r\n        assumeNotBlacklisted(token, addr);\r\n    }\r\n\r\n    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {\r\n        if (addressType == AddressType.Payable) {\r\n            assumeNotPayable(addr);\r\n        } else if (addressType == AddressType.NonPayable) {\r\n            assumePayable(addr);\r\n        } else if (addressType == AddressType.ZeroAddress) {\r\n            assumeNotZeroAddress(addr);\r\n        } else if (addressType == AddressType.Precompile) {\r\n            assumeNotPrecompile(addr);\r\n        } else if (addressType == AddressType.ForgeAddress) {\r\n            assumeNotForgeAddress(addr);\r\n        }\r\n    }\r\n\r\n    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {\r\n        assumeAddressIsNot(addr, addressType1);\r\n        assumeAddressIsNot(addr, addressType2);\r\n    }\r\n\r\n    function assumeAddressIsNot(\r\n        address addr,\r\n        AddressType addressType1,\r\n        AddressType addressType2,\r\n        AddressType addressType3\r\n    ) internal virtual {\r\n        assumeAddressIsNot(addr, addressType1);\r\n        assumeAddressIsNot(addr, addressType2);\r\n        assumeAddressIsNot(addr, addressType3);\r\n    }\r\n\r\n    function assumeAddressIsNot(\r\n        address addr,\r\n        AddressType addressType1,\r\n        AddressType addressType2,\r\n        AddressType addressType3,\r\n        AddressType addressType4\r\n    ) internal virtual {\r\n        assumeAddressIsNot(addr, addressType1);\r\n        assumeAddressIsNot(addr, addressType2);\r\n        assumeAddressIsNot(addr, addressType3);\r\n        assumeAddressIsNot(addr, addressType4);\r\n    }\r\n\r\n    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\r\n    // `addr` and checking the `success` return value.\r\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\r\n    // implemented by `addr`, which should be taken into account when this function is used.\r\n    function _isPayable(address addr) private returns (bool) {\r\n        require(\r\n            addr.balance < UINT256_MAX,\r\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\r\n        );\r\n        uint256 origBalanceTest = address(this).balance;\r\n        uint256 origBalanceAddr = address(addr).balance;\r\n\r\n        vm.deal(address(this), 1);\r\n        (bool success,) = payable(addr).call{value: 1}(\"\");\r\n\r\n        // reset balances\r\n        vm.deal(address(this), origBalanceTest);\r\n        vm.deal(addr, origBalanceAddr);\r\n\r\n        return success;\r\n    }\r\n\r\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\r\n    // implemented by `addr`, which should be taken into account when this function is used. See the\r\n    // `_isPayable` method for more information.\r\n    function assumePayable(address addr) internal virtual {\r\n        vm.assume(_isPayable(addr));\r\n    }\r\n\r\n    function assumeNotPayable(address addr) internal virtual {\r\n        vm.assume(!_isPayable(addr));\r\n    }\r\n\r\n    function assumeNotZeroAddress(address addr) internal pure virtual {\r\n        vm.assume(addr != address(0));\r\n    }\r\n\r\n    function assumeNotPrecompile(address addr) internal pure virtual {\r\n        assumeNotPrecompile(addr, _pureChainId());\r\n    }\r\n\r\n    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {\r\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\r\n        // address), but the same rationale for excluding them applies so we include those too.\r\n\r\n        // These should be present on all EVM-compatible chains.\r\n        vm.assume(addr < address(0x1) || addr > address(0x9));\r\n\r\n        // forgefmt: disable-start\r\n        if (chainId == 10 || chainId == 420) {\r\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\r\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\r\n        } else if (chainId == 42161 || chainId == 421613) {\r\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\r\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\r\n        } else if (chainId == 43114 || chainId == 43113) {\r\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\r\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\r\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\r\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\r\n        }\r\n        // forgefmt: disable-end\r\n    }\r\n\r\n    function assumeNotForgeAddress(address addr) internal pure virtual {\r\n        // vm and console addresses\r\n        vm.assume(addr != address(vm) || addr != 0x000000000000000000636F6e736F6c652e6c6f67);\r\n    }\r\n\r\n    function readEIP1559ScriptArtifact(string memory path)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (EIP1559ScriptArtifact memory)\r\n    {\r\n        string memory data = vm.readFile(path);\r\n        bytes memory parsedData = vm.parseJson(data);\r\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\r\n        EIP1559ScriptArtifact memory artifact;\r\n        artifact.libraries = rawArtifact.libraries;\r\n        artifact.path = rawArtifact.path;\r\n        artifact.timestamp = rawArtifact.timestamp;\r\n        artifact.pending = rawArtifact.pending;\r\n        artifact.txReturns = rawArtifact.txReturns;\r\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\r\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\r\n        return artifact;\r\n    }\r\n\r\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\r\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\r\n        for (uint256 i; i < rawTxs.length; i++) {\r\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\r\n        }\r\n        return txs;\r\n    }\r\n\r\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\r\n        Tx1559 memory transaction;\r\n        transaction.arguments = rawTx.arguments;\r\n        transaction.contractName = rawTx.contractName;\r\n        transaction.functionSig = rawTx.functionSig;\r\n        transaction.hash = rawTx.hash;\r\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\r\n        transaction.opcode = rawTx.opcode;\r\n        return transaction;\r\n    }\r\n\r\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\r\n        internal\r\n        pure\r\n        virtual\r\n        returns (Tx1559Detail memory)\r\n    {\r\n        Tx1559Detail memory txDetail;\r\n        txDetail.data = rawDetail.data;\r\n        txDetail.from = rawDetail.from;\r\n        txDetail.to = rawDetail.to;\r\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\r\n        txDetail.txType = _bytesToUint(rawDetail.txType);\r\n        txDetail.value = _bytesToUint(rawDetail.value);\r\n        txDetail.gas = _bytesToUint(rawDetail.gas);\r\n        txDetail.accessList = rawDetail.accessList;\r\n        return txDetail;\r\n    }\r\n\r\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\r\n        string memory deployData = vm.readFile(path);\r\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions\");\r\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\r\n        return rawToConvertedEIPTx1559s(rawTxs);\r\n    }\r\n\r\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\r\n        string memory deployData = vm.readFile(path);\r\n        string memory key = string(abi.encodePacked(\".transactions[\", vm.toString(index), \"]\"));\r\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\r\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\r\n        return rawToConvertedEIPTx1559(rawTx);\r\n    }\r\n\r\n    // Analogous to readTransactions, but for receipts.\r\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\r\n        string memory deployData = vm.readFile(path);\r\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\r\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\r\n        return rawToConvertedReceipts(rawReceipts);\r\n    }\r\n\r\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\r\n        string memory deployData = vm.readFile(path);\r\n        string memory key = string(abi.encodePacked(\".receipts[\", vm.toString(index), \"]\"));\r\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\r\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\r\n        return rawToConvertedReceipt(rawReceipt);\r\n    }\r\n\r\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\r\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\r\n        for (uint256 i; i < rawReceipts.length; i++) {\r\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\r\n        }\r\n        return receipts;\r\n    }\r\n\r\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\r\n        Receipt memory receipt;\r\n        receipt.blockHash = rawReceipt.blockHash;\r\n        receipt.to = rawReceipt.to;\r\n        receipt.from = rawReceipt.from;\r\n        receipt.contractAddress = rawReceipt.contractAddress;\r\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\r\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\r\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\r\n        receipt.status = _bytesToUint(rawReceipt.status);\r\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\r\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\r\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\r\n        receipt.logsBloom = rawReceipt.logsBloom;\r\n        receipt.transactionHash = rawReceipt.transactionHash;\r\n        return receipt;\r\n    }\r\n\r\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\r\n        internal\r\n        pure\r\n        virtual\r\n        returns (ReceiptLog[] memory)\r\n    {\r\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\r\n        for (uint256 i; i < rawLogs.length; i++) {\r\n            logs[i].logAddress = rawLogs[i].logAddress;\r\n            logs[i].blockHash = rawLogs[i].blockHash;\r\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\r\n            logs[i].data = rawLogs[i].data;\r\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\r\n            logs[i].topics = rawLogs[i].topics;\r\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\r\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\r\n            logs[i].removed = rawLogs[i].removed;\r\n        }\r\n        return logs;\r\n    }\r\n\r\n    // Deploy a contract by fetching the contract bytecode from\r\n    // the artifacts directory\r\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\r\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\r\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\r\n        }\r\n\r\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\r\n    }\r\n\r\n    function deployCode(string memory what) internal virtual returns (address addr) {\r\n        bytes memory bytecode = vm.getCode(what);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\r\n        }\r\n\r\n        require(addr != address(0), \"StdCheats deployCode(string): Deployment failed.\");\r\n    }\r\n\r\n    /// @dev deploy contract with value on construction\r\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\r\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\r\n        }\r\n\r\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\r\n    }\r\n\r\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\r\n        bytes memory bytecode = vm.getCode(what);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\r\n        }\r\n\r\n        require(addr != address(0), \"StdCheats deployCode(string,uint256): Deployment failed.\");\r\n    }\r\n\r\n    // creates a labeled address and the corresponding private key\r\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\r\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\r\n        addr = vm.addr(privateKey);\r\n        vm.label(addr, name);\r\n    }\r\n\r\n    // creates a labeled address\r\n    function makeAddr(string memory name) internal virtual returns (address addr) {\r\n        (addr,) = makeAddrAndKey(name);\r\n    }\r\n\r\n    // Destroys an account immediately, sending the balance to beneficiary.\r\n    // Destroying means: balance will be zero, code will be empty, and nonce will be 0\r\n    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\r\n    // only after tx ends, this will run immediately.\r\n    function destroyAccount(address who, address beneficiary) internal virtual {\r\n        uint256 currBalance = who.balance;\r\n        vm.etch(who, abi.encode());\r\n        vm.deal(who, 0);\r\n        vm.resetNonce(who);\r\n\r\n        uint256 beneficiaryBalance = beneficiary.balance;\r\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\r\n    }\r\n\r\n    // creates a struct containing both a labeled address and the corresponding private key\r\n    function makeAccount(string memory name) internal virtual returns (Account memory account) {\r\n        (account.addr, account.key) = makeAddrAndKey(name);\r\n    }\r\n\r\n    function deriveRememberKey(string memory mnemonic, uint32 index)\r\n        internal\r\n        virtual\r\n        returns (address who, uint256 privateKey)\r\n    {\r\n        privateKey = vm.deriveKey(mnemonic, index);\r\n        who = vm.rememberKey(privateKey);\r\n    }\r\n\r\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\r\n        require(b.length <= 32, \"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\");\r\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\r\n    }\r\n\r\n    function isFork() internal view virtual returns (bool status) {\r\n        try vm.activeFork() {\r\n            status = true;\r\n        } catch (bytes memory) {}\r\n    }\r\n\r\n    modifier skipWhenForking() {\r\n        if (!isFork()) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier skipWhenNotForking() {\r\n        if (isFork()) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier noGasMetering() {\r\n        vm.pauseGasMetering();\r\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\r\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\r\n        // it back on until we exit the top level function that used the modifier\r\n        //\r\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\r\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\r\n        // so we only turn metering back on at the end of the funcA\r\n        bool gasStartedOff = gasMeteringOff;\r\n        gasMeteringOff = true;\r\n\r\n        _;\r\n\r\n        // if gas metering was on when this modifier was called, turn it back on at the end\r\n        if (!gasStartedOff) {\r\n            gasMeteringOff = false;\r\n            vm.resumeGasMetering();\r\n        }\r\n    }\r\n\r\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\r\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\r\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\r\n    // Checker changed `chainid` from pure to view in 0.8.0.\r\n    function _viewChainId() private view returns (uint256 chainId) {\r\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n\r\n        address(this); // Silence warnings in older Solc versions.\r\n    }\r\n\r\n    function _pureChainId() private pure returns (uint256 chainId) {\r\n        function() internal view returns (uint256) fnIn = _viewChainId;\r\n        function() internal pure returns (uint256) pureChainId;\r\n        assembly {\r\n            pureChainId := fnIn\r\n        }\r\n        chainId = pureChainId();\r\n    }\r\n}\r\n\r\n// Wrappers around cheatcodes to avoid footguns\r\nabstract contract StdCheats is StdCheatsSafe {\r\n    using stdStorage for StdStorage;\r\n\r\n    StdStorage private stdstore;\r\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    // Skip forward or rewind time by the specified number of seconds\r\n    function skip(uint256 time) internal virtual {\r\n        vm.warp(block.timestamp + time);\r\n    }\r\n\r\n    function rewind(uint256 time) internal virtual {\r\n        vm.warp(block.timestamp - time);\r\n    }\r\n\r\n    // Setup a prank from an address that has some ether\r\n    function hoax(address msgSender) internal virtual {\r\n        vm.deal(msgSender, 1 << 128);\r\n        vm.prank(msgSender);\r\n    }\r\n\r\n    function hoax(address msgSender, uint256 give) internal virtual {\r\n        vm.deal(msgSender, give);\r\n        vm.prank(msgSender);\r\n    }\r\n\r\n    function hoax(address msgSender, address origin) internal virtual {\r\n        vm.deal(msgSender, 1 << 128);\r\n        vm.prank(msgSender, origin);\r\n    }\r\n\r\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\r\n        vm.deal(msgSender, give);\r\n        vm.prank(msgSender, origin);\r\n    }\r\n\r\n    // Start perpetual prank from an address that has some ether\r\n    function startHoax(address msgSender) internal virtual {\r\n        vm.deal(msgSender, 1 << 128);\r\n        vm.startPrank(msgSender);\r\n    }\r\n\r\n    function startHoax(address msgSender, uint256 give) internal virtual {\r\n        vm.deal(msgSender, give);\r\n        vm.startPrank(msgSender);\r\n    }\r\n\r\n    // Start perpetual prank from an address that has some ether\r\n    // tx.origin is set to the origin parameter\r\n    function startHoax(address msgSender, address origin) internal virtual {\r\n        vm.deal(msgSender, 1 << 128);\r\n        vm.startPrank(msgSender, origin);\r\n    }\r\n\r\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\r\n        vm.deal(msgSender, give);\r\n        vm.startPrank(msgSender, origin);\r\n    }\r\n\r\n    function changePrank(address msgSender) internal virtual {\r\n        vm.stopPrank();\r\n        vm.startPrank(msgSender);\r\n    }\r\n\r\n    function changePrank(address msgSender, address txOrigin) internal virtual {\r\n        vm.stopPrank();\r\n        vm.startPrank(msgSender, txOrigin);\r\n    }\r\n\r\n    // The same as Vm's `deal`\r\n    // Use the alternative signature for ERC20 tokens\r\n    function deal(address to, uint256 give) internal virtual {\r\n        vm.deal(to, give);\r\n    }\r\n\r\n    // Set the balance of an account for any ERC20 token\r\n    // Use the alternative signature to update `totalSupply`\r\n    function deal(address token, address to, uint256 give) internal virtual {\r\n        deal(token, to, give, false);\r\n    }\r\n\r\n    // Set the balance of an account for any ERC1155 token\r\n    // Use the alternative signature to update `totalSupply`\r\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\r\n        dealERC1155(token, to, id, give, false);\r\n    }\r\n\r\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\r\n        // get current balance\r\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\r\n        uint256 prevBal = abi.decode(balData, (uint256));\r\n\r\n        // update balance\r\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\r\n\r\n        // update total supply\r\n        if (adjust) {\r\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));\r\n            uint256 totSup = abi.decode(totSupData, (uint256));\r\n            if (give < prevBal) {\r\n                totSup -= (prevBal - give);\r\n            } else {\r\n                totSup += (give - prevBal);\r\n            }\r\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\r\n        }\r\n    }\r\n\r\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\r\n        // get current balance\r\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));\r\n        uint256 prevBal = abi.decode(balData, (uint256));\r\n\r\n        // update balance\r\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\r\n\r\n        // update total supply\r\n        if (adjust) {\r\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));\r\n            require(\r\n                totSupData.length != 0,\r\n                \"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\"\r\n            );\r\n            uint256 totSup = abi.decode(totSupData, (uint256));\r\n            if (give < prevBal) {\r\n                totSup -= (prevBal - give);\r\n            } else {\r\n                totSup += (give - prevBal);\r\n            }\r\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\r\n        }\r\n    }\r\n\r\n    function dealERC721(address token, address to, uint256 id) internal virtual {\r\n        // check if token id is already minted and the actual owner.\r\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\r\n        require(successMinted, \"StdCheats deal(address,address,uint,bool): id not minted.\");\r\n\r\n        // get owner current balance\r\n        (, bytes memory fromBalData) =\r\n            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\r\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\r\n\r\n        // get new user current balance\r\n        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\r\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\r\n\r\n        // update balances\r\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\r\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\r\n\r\n        // update owner\r\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\r\n    }\r\n\r\n    function deployCodeTo(string memory what, address where) internal virtual {\r\n        deployCodeTo(what, \"\", 0, where);\r\n    }\r\n\r\n    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {\r\n        deployCodeTo(what, args, 0, where);\r\n    }\r\n\r\n    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {\r\n        bytes memory creationCode = vm.getCode(what);\r\n        vm.etch(where, abi.encodePacked(creationCode, args));\r\n        (bool success, bytes memory runtimeBytecode) = where.call{value: value}(\"\");\r\n        require(success, \"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\");\r\n        vm.etch(where, runtimeBytecode);\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdJson.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {VmSafe} from \"./Vm.sol\";\r\n\r\n// Helpers for parsing and writing JSON files\r\n// To parse:\r\n// ```\r\n// using stdJson for string;\r\n// string memory json = vm.readFile(\"some_peth\");\r\n// json.parseUint(\"<json_path>\");\r\n// ```\r\n// To write:\r\n// ```\r\n// using stdJson for string;\r\n// string memory json = \"deploymentArtifact\";\r\n// Contract contract = new Contract();\r\n// json.serialize(\"contractAddress\", address(contract));\r\n// json = json.serialize(\"deploymentTimes\", uint(1));\r\n// // store the stringified JSON to the 'json' variable we have been using as a key\r\n// // as we won't need it any longer\r\n// string memory json2 = \"finalArtifact\";\r\n// string memory final = json2.serialize(\"depArtifact\", json);\r\n// final.write(\"<some_path>\");\r\n// ```\r\n\r\nlibrary stdJson {\r\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\r\n        return vm.parseJson(json, key);\r\n    }\r\n\r\n    function readUint(string memory json, string memory key) internal returns (uint256) {\r\n        return vm.parseJsonUint(json, key);\r\n    }\r\n\r\n    function readUintArray(string memory json, string memory key) internal returns (uint256[] memory) {\r\n        return vm.parseJsonUintArray(json, key);\r\n    }\r\n\r\n    function readInt(string memory json, string memory key) internal returns (int256) {\r\n        return vm.parseJsonInt(json, key);\r\n    }\r\n\r\n    function readIntArray(string memory json, string memory key) internal returns (int256[] memory) {\r\n        return vm.parseJsonIntArray(json, key);\r\n    }\r\n\r\n    function readBytes32(string memory json, string memory key) internal returns (bytes32) {\r\n        return vm.parseJsonBytes32(json, key);\r\n    }\r\n\r\n    function readBytes32Array(string memory json, string memory key) internal returns (bytes32[] memory) {\r\n        return vm.parseJsonBytes32Array(json, key);\r\n    }\r\n\r\n    function readString(string memory json, string memory key) internal returns (string memory) {\r\n        return vm.parseJsonString(json, key);\r\n    }\r\n\r\n    function readStringArray(string memory json, string memory key) internal returns (string[] memory) {\r\n        return vm.parseJsonStringArray(json, key);\r\n    }\r\n\r\n    function readAddress(string memory json, string memory key) internal returns (address) {\r\n        return vm.parseJsonAddress(json, key);\r\n    }\r\n\r\n    function readAddressArray(string memory json, string memory key) internal returns (address[] memory) {\r\n        return vm.parseJsonAddressArray(json, key);\r\n    }\r\n\r\n    function readBool(string memory json, string memory key) internal returns (bool) {\r\n        return vm.parseJsonBool(json, key);\r\n    }\r\n\r\n    function readBoolArray(string memory json, string memory key) internal returns (bool[] memory) {\r\n        return vm.parseJsonBoolArray(json, key);\r\n    }\r\n\r\n    function readBytes(string memory json, string memory key) internal returns (bytes memory) {\r\n        return vm.parseJsonBytes(json, key);\r\n    }\r\n\r\n    function readBytesArray(string memory json, string memory key) internal returns (bytes[] memory) {\r\n        return vm.parseJsonBytesArray(json, key);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\r\n        return vm.serializeBool(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeBool(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\r\n        return vm.serializeUint(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeUint(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\r\n        return vm.serializeInt(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeInt(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\r\n        return vm.serializeAddress(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeAddress(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\r\n        return vm.serializeBytes32(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeBytes32(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\r\n        return vm.serializeBytes(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeBytes(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, string memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeString(jsonKey, key, value);\r\n    }\r\n\r\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\r\n        internal\r\n        returns (string memory)\r\n    {\r\n        return vm.serializeString(jsonKey, key, value);\r\n    }\r\n\r\n    function write(string memory jsonKey, string memory path) internal {\r\n        vm.writeJson(jsonKey, path);\r\n    }\r\n\r\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\r\n        vm.writeJson(jsonKey, path, valueKey);\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nlibrary stdMath {\r\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\n\r\n    function abs(int256 a) internal pure returns (uint256) {\r\n        // Required or it will fail when `a = type(int256).min`\r\n        if (a == INT256_MIN) {\r\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\n        }\r\n\r\n        return uint256(a > 0 ? a : -a);\r\n    }\r\n\r\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a - b : b - a;\r\n    }\r\n\r\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\r\n        // a and b are of the same sign\r\n        // this works thanks to two's complement, the left-most bit is the sign bit\r\n        if ((a ^ b) > -1) {\r\n            return delta(abs(a), abs(b));\r\n        }\r\n\r\n        // a and b are of opposite signs\r\n        return abs(a) + abs(b);\r\n    }\r\n\r\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 absDelta = delta(a, b);\r\n\r\n        return absDelta * 1e18 / b;\r\n    }\r\n\r\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\r\n        uint256 absDelta = delta(a, b);\r\n        uint256 absB = abs(b);\r\n\r\n        return absDelta * 1e18 / absB;\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdStorage.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\nimport {Vm} from \"./Vm.sol\";\r\n\r\nstruct StdStorage {\r\n    mapping(address => mapping(bytes4 => mapping(bytes32 => uint256))) slots;\r\n    mapping(address => mapping(bytes4 => mapping(bytes32 => bool))) finds;\r\n    bytes32[] _keys;\r\n    bytes4 _sig;\r\n    uint256 _depth;\r\n    address _target;\r\n    bytes32 _set;\r\n}\r\n\r\nlibrary stdStorageSafe {\r\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\r\n    event WARNING_UninitedSlot(address who, uint256 slot);\r\n\r\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\r\n        return bytes4(keccak256(bytes(sigStr)));\r\n    }\r\n\r\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\r\n    // slot complexity:\r\n    //  if flat, will be bytes32(uint256(uint));\r\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\r\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\r\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\r\n    function find(StdStorage storage self) internal returns (uint256) {\r\n        address who = self._target;\r\n        bytes4 fsig = self._sig;\r\n        uint256 field_depth = self._depth;\r\n        bytes32[] memory ins = self._keys;\r\n\r\n        // calldata to test against\r\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\r\n            return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\r\n        }\r\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\r\n        vm.record();\r\n        bytes32 fdat;\r\n        {\r\n            (, bytes memory rdat) = who.staticcall(cald);\r\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\r\n        }\r\n\r\n        (bytes32[] memory reads,) = vm.accesses(address(who));\r\n        if (reads.length == 1) {\r\n            bytes32 curr = vm.load(who, reads[0]);\r\n            if (curr == bytes32(0)) {\r\n                emit WARNING_UninitedSlot(who, uint256(reads[0]));\r\n            }\r\n            if (fdat != curr) {\r\n                require(\r\n                    false,\r\n                    \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\r\n                );\r\n            }\r\n            emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[0]));\r\n            self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[0]);\r\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\r\n        } else if (reads.length > 1) {\r\n            for (uint256 i = 0; i < reads.length; i++) {\r\n                bytes32 prev = vm.load(who, reads[i]);\r\n                if (prev == bytes32(0)) {\r\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\r\n                }\r\n                // store\r\n                vm.store(who, reads[i], bytes32(hex\"1337\"));\r\n                bool success;\r\n                bytes memory rdat;\r\n                {\r\n                    (success, rdat) = who.staticcall(cald);\r\n                    fdat = bytesToBytes32(rdat, 32 * field_depth);\r\n                }\r\n\r\n                if (success && fdat == bytes32(hex\"1337\")) {\r\n                    // we found which of the slots is the actual one\r\n                    emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[i]));\r\n                    self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[i]);\r\n                    self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\r\n                    vm.store(who, reads[i], prev);\r\n                    break;\r\n                }\r\n                vm.store(who, reads[i], prev);\r\n            }\r\n        } else {\r\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\r\n        }\r\n\r\n        require(\r\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))],\r\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\r\n        );\r\n\r\n        delete self._target;\r\n        delete self._sig;\r\n        delete self._keys;\r\n        delete self._depth;\r\n\r\n        return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\r\n    }\r\n\r\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\r\n        self._target = _target;\r\n        return self;\r\n    }\r\n\r\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\r\n        self._sig = _sig;\r\n        return self;\r\n    }\r\n\r\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\r\n        self._sig = sigs(_sig);\r\n        return self;\r\n    }\r\n\r\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\r\n        self._keys.push(bytes32(uint256(uint160(who))));\r\n        return self;\r\n    }\r\n\r\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\r\n        self._keys.push(bytes32(amt));\r\n        return self;\r\n    }\r\n\r\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\r\n        self._keys.push(key);\r\n        return self;\r\n    }\r\n\r\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\r\n        self._depth = _depth;\r\n        return self;\r\n    }\r\n\r\n    function read(StdStorage storage self) private returns (bytes memory) {\r\n        address t = self._target;\r\n        uint256 s = find(self);\r\n        return abi.encode(vm.load(t, bytes32(s)));\r\n    }\r\n\r\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\r\n        return abi.decode(read(self), (bytes32));\r\n    }\r\n\r\n    function read_bool(StdStorage storage self) internal returns (bool) {\r\n        int256 v = read_int(self);\r\n        if (v == 0) return false;\r\n        if (v == 1) return true;\r\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\r\n    }\r\n\r\n    function read_address(StdStorage storage self) internal returns (address) {\r\n        return abi.decode(read(self), (address));\r\n    }\r\n\r\n    function read_uint(StdStorage storage self) internal returns (uint256) {\r\n        return abi.decode(read(self), (uint256));\r\n    }\r\n\r\n    function read_int(StdStorage storage self) internal returns (int256) {\r\n        return abi.decode(read(self), (int256));\r\n    }\r\n\r\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\r\n        bytes32 out;\r\n\r\n        uint256 max = b.length > 32 ? 32 : b.length;\r\n        for (uint256 i = 0; i < max; i++) {\r\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\r\n        bytes memory result = new bytes(b.length * 32);\r\n        for (uint256 i = 0; i < b.length; i++) {\r\n            bytes32 k = b[i];\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                mstore(add(result, add(32, mul(32, i))), k)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nlibrary stdStorage {\r\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\r\n        return stdStorageSafe.sigs(sigStr);\r\n    }\r\n\r\n    function find(StdStorage storage self) internal returns (uint256) {\r\n        return stdStorageSafe.find(self);\r\n    }\r\n\r\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.target(self, _target);\r\n    }\r\n\r\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.sig(self, _sig);\r\n    }\r\n\r\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.sig(self, _sig);\r\n    }\r\n\r\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.with_key(self, who);\r\n    }\r\n\r\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.with_key(self, amt);\r\n    }\r\n\r\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.with_key(self, key);\r\n    }\r\n\r\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\r\n        return stdStorageSafe.depth(self, _depth);\r\n    }\r\n\r\n    function checked_write(StdStorage storage self, address who) internal {\r\n        checked_write(self, bytes32(uint256(uint160(who))));\r\n    }\r\n\r\n    function checked_write(StdStorage storage self, uint256 amt) internal {\r\n        checked_write(self, bytes32(amt));\r\n    }\r\n\r\n    function checked_write_int(StdStorage storage self, int256 val) internal {\r\n        checked_write(self, bytes32(uint256(val)));\r\n    }\r\n\r\n    function checked_write(StdStorage storage self, bool write) internal {\r\n        bytes32 t;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            t := write\r\n        }\r\n        checked_write(self, t);\r\n    }\r\n\r\n    function checked_write(StdStorage storage self, bytes32 set) internal {\r\n        address who = self._target;\r\n        bytes4 fsig = self._sig;\r\n        uint256 field_depth = self._depth;\r\n        bytes32[] memory ins = self._keys;\r\n\r\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\r\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\r\n            find(self);\r\n        }\r\n        bytes32 slot = bytes32(self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]);\r\n\r\n        bytes32 fdat;\r\n        {\r\n            (, bytes memory rdat) = who.staticcall(cald);\r\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\r\n        }\r\n        bytes32 curr = vm.load(who, slot);\r\n\r\n        if (fdat != curr) {\r\n            require(\r\n                false,\r\n                \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\r\n            );\r\n        }\r\n        vm.store(who, slot, set);\r\n        delete self._target;\r\n        delete self._sig;\r\n        delete self._keys;\r\n        delete self._depth;\r\n    }\r\n\r\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\r\n        return stdStorageSafe.read_bytes32(self);\r\n    }\r\n\r\n    function read_bool(StdStorage storage self) internal returns (bool) {\r\n        return stdStorageSafe.read_bool(self);\r\n    }\r\n\r\n    function read_address(StdStorage storage self) internal returns (address) {\r\n        return stdStorageSafe.read_address(self);\r\n    }\r\n\r\n    function read_uint(StdStorage storage self) internal returns (uint256) {\r\n        return stdStorageSafe.read_uint(self);\r\n    }\r\n\r\n    function read_int(StdStorage storage self) internal returns (int256) {\r\n        return stdStorageSafe.read_int(self);\r\n    }\r\n\r\n    // Private function so needs to be copied over\r\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\r\n        bytes32 out;\r\n\r\n        uint256 max = b.length > 32 ? 32 : b.length;\r\n        for (uint256 i = 0; i < max; i++) {\r\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    // Private function so needs to be copied over\r\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\r\n        bytes memory result = new bytes(b.length * 32);\r\n        for (uint256 i = 0; i < b.length; i++) {\r\n            bytes32 k = b[i];\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                mstore(add(result, add(32, mul(32, i))), k)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdStyle.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nimport {VmSafe} from \"./Vm.sol\";\r\n\r\nlibrary StdStyle {\r\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n\r\n    string constant RED = \"\\u001b[91m\";\r\n    string constant GREEN = \"\\u001b[92m\";\r\n    string constant YELLOW = \"\\u001b[93m\";\r\n    string constant BLUE = \"\\u001b[94m\";\r\n    string constant MAGENTA = \"\\u001b[95m\";\r\n    string constant CYAN = \"\\u001b[96m\";\r\n    string constant BOLD = \"\\u001b[1m\";\r\n    string constant DIM = \"\\u001b[2m\";\r\n    string constant ITALIC = \"\\u001b[3m\";\r\n    string constant UNDERLINE = \"\\u001b[4m\";\r\n    string constant INVERSE = \"\\u001b[7m\";\r\n    string constant RESET = \"\\u001b[0m\";\r\n\r\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\r\n        return string(abi.encodePacked(style, self, RESET));\r\n    }\r\n\r\n    function red(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(RED, self);\r\n    }\r\n\r\n    function red(uint256 self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function red(int256 self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function red(address self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function red(bool self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function redBytes(bytes memory self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return red(vm.toString(self));\r\n    }\r\n\r\n    function green(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(GREEN, self);\r\n    }\r\n\r\n    function green(uint256 self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function green(int256 self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function green(address self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function green(bool self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return green(vm.toString(self));\r\n    }\r\n\r\n    function yellow(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(YELLOW, self);\r\n    }\r\n\r\n    function yellow(uint256 self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellow(int256 self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellow(address self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellow(bool self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return yellow(vm.toString(self));\r\n    }\r\n\r\n    function blue(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(BLUE, self);\r\n    }\r\n\r\n    function blue(uint256 self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blue(int256 self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blue(address self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blue(bool self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return blue(vm.toString(self));\r\n    }\r\n\r\n    function magenta(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(MAGENTA, self);\r\n    }\r\n\r\n    function magenta(uint256 self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magenta(int256 self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magenta(address self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magenta(bool self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return magenta(vm.toString(self));\r\n    }\r\n\r\n    function cyan(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(CYAN, self);\r\n    }\r\n\r\n    function cyan(uint256 self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyan(int256 self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyan(address self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyan(bool self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return cyan(vm.toString(self));\r\n    }\r\n\r\n    function bold(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(BOLD, self);\r\n    }\r\n\r\n    function bold(uint256 self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function bold(int256 self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function bold(address self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function bold(bool self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return bold(vm.toString(self));\r\n    }\r\n\r\n    function dim(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(DIM, self);\r\n    }\r\n\r\n    function dim(uint256 self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dim(int256 self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dim(address self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dim(bool self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return dim(vm.toString(self));\r\n    }\r\n\r\n    function italic(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(ITALIC, self);\r\n    }\r\n\r\n    function italic(uint256 self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italic(int256 self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italic(address self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italic(bool self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return italic(vm.toString(self));\r\n    }\r\n\r\n    function underline(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(UNDERLINE, self);\r\n    }\r\n\r\n    function underline(uint256 self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underline(int256 self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underline(address self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underline(bool self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return underline(vm.toString(self));\r\n    }\r\n\r\n    function inverse(string memory self) internal pure returns (string memory) {\r\n        return styleConcat(INVERSE, self);\r\n    }\r\n\r\n    function inverse(uint256 self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverse(int256 self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverse(address self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverse(bool self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n\r\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\r\n        return inverse(vm.toString(self));\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/StdUtils.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\r\nimport {VmSafe} from \"./Vm.sol\";\r\n\r\nabstract contract StdUtils {\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                     CONSTANTS\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\r\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\r\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\r\n    uint256 private constant INT256_MIN_ABS =\r\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\r\n    uint256 private constant SECP256K1_ORDER =\r\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\r\n    uint256 private constant UINT256_MAX =\r\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n\r\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\r\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\r\n\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                 INTERNAL FUNCTIONS\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\r\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\r\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\r\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\r\n        if (x >= min && x <= max) return x;\r\n\r\n        uint256 size = max - min + 1;\r\n\r\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\r\n        // This helps ensure coverage of the min/max values.\r\n        if (x <= 3 && size > x) return min + x;\r\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\r\n\r\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\r\n        if (x > max) {\r\n            uint256 diff = x - max;\r\n            uint256 rem = diff % size;\r\n            if (rem == 0) return max;\r\n            result = min + rem - 1;\r\n        } else if (x < min) {\r\n            uint256 diff = min - x;\r\n            uint256 rem = diff % size;\r\n            if (rem == 0) return min;\r\n            result = max - rem + 1;\r\n        }\r\n    }\r\n\r\n    function bound(uint256 x, uint256 min, uint256 max) internal view virtual returns (uint256 result) {\r\n        result = _bound(x, min, max);\r\n        console2_log(\"Bound Result\", result);\r\n    }\r\n\r\n    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\r\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\r\n\r\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\r\n        // int256 : -(2**255) ~ (2**255 - 1)\r\n        // uint256:     0     ~ (2**256 - 1)\r\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\r\n        //\r\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\r\n        // So, use `~uint256(x) + 1` instead.\r\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\r\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\r\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\r\n\r\n        uint256 y = _bound(_x, _min, _max);\r\n\r\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\r\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\r\n    }\r\n\r\n    function bound(int256 x, int256 min, int256 max) internal view virtual returns (int256 result) {\r\n        result = _bound(x, min, max);\r\n        console2_log(\"Bound result\", vm.toString(result));\r\n    }\r\n\r\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\r\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\r\n    }\r\n\r\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\r\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\r\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\r\n    }\r\n\r\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\r\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\r\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\r\n        // forgefmt: disable-start\r\n        // The integer zero is treated as an empty byte string, and as a result it only has a length prefix, 0x80, computed via 0x80 + 0.\r\n        // A one byte integer uses its own value as its length prefix, there is no additional \"0x80 + length\" prefix that comes before it.\r\n        if (nonce == 0x00)      return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, bytes1(0x80))));\r\n        if (nonce <= 0x7f)      return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, uint8(nonce))));\r\n\r\n        // Nonces greater than 1 byte all follow a consistent encoding scheme, where each value is preceded by a prefix of 0x80 + length.\r\n        if (nonce <= 2**8 - 1)  return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd7), bytes1(0x94), deployer, bytes1(0x81), uint8(nonce))));\r\n        if (nonce <= 2**16 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd8), bytes1(0x94), deployer, bytes1(0x82), uint16(nonce))));\r\n        if (nonce <= 2**24 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd9), bytes1(0x94), deployer, bytes1(0x83), uint24(nonce))));\r\n        // forgefmt: disable-end\r\n\r\n        // More details about RLP encoding can be found here: https://eth.wiki/fundamentals/rlp\r\n        // 0xda = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x84 ++ nonce)\r\n        // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\r\n        // 0x84 = 0x80 + 0x04 (0x04 = the bytes length of the nonce, 4 bytes, in hex)\r\n        // We assume nobody can have a nonce large enough to require more than 32 bytes.\r\n        return addressFromLast20Bytes(\r\n            keccak256(abi.encodePacked(bytes1(0xda), bytes1(0x94), deployer, bytes1(0x84), uint32(nonce)))\r\n        );\r\n    }\r\n\r\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\r\n        internal\r\n        pure\r\n        virtual\r\n        returns (address)\r\n    {\r\n        return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, initcodeHash)));\r\n    }\r\n\r\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\r\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\r\n        return computeCreate2Address(salt, initCodeHash, CREATE2_FACTORY);\r\n    }\r\n\r\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\r\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\r\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\r\n        return hashInitCode(creationCode, \"\");\r\n    }\r\n\r\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\r\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\r\n    /// @param args the ABI-encoded arguments to the constructor of C\r\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(creationCode, args));\r\n    }\r\n\r\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\r\n    function getTokenBalances(address token, address[] memory addresses)\r\n        internal\r\n        virtual\r\n        returns (uint256[] memory balances)\r\n    {\r\n        uint256 tokenCodeSize;\r\n        assembly {\r\n            tokenCodeSize := extcodesize(token)\r\n        }\r\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\r\n\r\n        // ABI encode the aggregate call to Multicall3.\r\n        uint256 length = addresses.length;\r\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\r\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\r\n        }\r\n\r\n        // Make the aggregate call.\r\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\r\n\r\n        // ABI decode the return data and return the balances.\r\n        balances = new uint256[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            balances[i] = abi.decode(returnData[i], (uint256));\r\n        }\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                 PRIVATE FUNCTIONS\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\r\n        return address(uint160(uint256(bytesValue)));\r\n    }\r\n\r\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\r\n\r\n    function console2_log(string memory p0, uint256 p1) private view {\r\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\r\n        status;\r\n    }\r\n\r\n    function console2_log(string memory p0, string memory p1) private view {\r\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n        status;\r\n    }\r\n}\r\n"
      },
      "lib/forge-std/src/Vm.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// Cheatcodes are marked as view/pure/none using the following rules:\r\n// 0. A call's observable behaviour includes its return value, logs, reverts and state writes,\r\n// 1. If you can influence a later call's observable behaviour, you're neither `view` nor `pure (you are modifying some state be it the EVM, interpreter, filesystem, etc),\r\n// 2. Otherwise if you can be influenced by an earlier call, or if reading some state, you're `view`,\r\n// 3. Otherwise you're `pure`.\r\n\r\ninterface VmSafe {\r\n    enum CallerMode {\r\n        None,\r\n        Broadcast,\r\n        RecurrentBroadcast,\r\n        Prank,\r\n        RecurrentPrank\r\n    }\r\n\r\n    struct Log {\r\n        bytes32[] topics;\r\n        bytes data;\r\n        address emitter;\r\n    }\r\n\r\n    struct Rpc {\r\n        string key;\r\n        string url;\r\n    }\r\n\r\n    struct DirEntry {\r\n        string errorMessage;\r\n        string path;\r\n        uint64 depth;\r\n        bool isDir;\r\n        bool isSymlink;\r\n    }\r\n\r\n    struct FsMetadata {\r\n        bool isDir;\r\n        bool isSymlink;\r\n        uint256 length;\r\n        bool readOnly;\r\n        uint256 modified;\r\n        uint256 accessed;\r\n        uint256 created;\r\n    }\r\n\r\n    // Loads a storage slot from an address\r\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\r\n    // Signs data\r\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\r\n    // Gets the address for a given private key\r\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\r\n    // Gets the nonce of an account\r\n    function getNonce(address account) external view returns (uint64 nonce);\r\n    // Performs a foreign function call via the terminal\r\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\r\n    // Sets environment variables\r\n    function setEnv(string calldata name, string calldata value) external;\r\n    // Reads environment variables, (name) => (value)\r\n    function envBool(string calldata name) external view returns (bool value);\r\n    function envUint(string calldata name) external view returns (uint256 value);\r\n    function envInt(string calldata name) external view returns (int256 value);\r\n    function envAddress(string calldata name) external view returns (address value);\r\n    function envBytes32(string calldata name) external view returns (bytes32 value);\r\n    function envString(string calldata name) external view returns (string memory value);\r\n    function envBytes(string calldata name) external view returns (bytes memory value);\r\n    // Reads environment variables as arrays\r\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\r\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\r\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\r\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\r\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\r\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\r\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\r\n    // Read environment variables with default value\r\n    function envOr(string calldata name, bool defaultValue) external returns (bool value);\r\n    function envOr(string calldata name, uint256 defaultValue) external returns (uint256 value);\r\n    function envOr(string calldata name, int256 defaultValue) external returns (int256 value);\r\n    function envOr(string calldata name, address defaultValue) external returns (address value);\r\n    function envOr(string calldata name, bytes32 defaultValue) external returns (bytes32 value);\r\n    function envOr(string calldata name, string calldata defaultValue) external returns (string memory value);\r\n    function envOr(string calldata name, bytes calldata defaultValue) external returns (bytes memory value);\r\n    // Read environment variables as arrays with default value\r\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\r\n        external\r\n        returns (bool[] memory value);\r\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\r\n        external\r\n        returns (uint256[] memory value);\r\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\r\n        external\r\n        returns (int256[] memory value);\r\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\r\n        external\r\n        returns (address[] memory value);\r\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\r\n        external\r\n        returns (bytes32[] memory value);\r\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\r\n        external\r\n        returns (string[] memory value);\r\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\r\n        external\r\n        returns (bytes[] memory value);\r\n    // Records all storage reads and writes\r\n    function record() external;\r\n    // Gets all accessed reads and write slot from a recording session, for a given address\r\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\r\n    // Gets the _creation_ bytecode from an artifact file. Takes in the relative path to the json file\r\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\r\n    // Gets the _deployed_ bytecode from an artifact file. Takes in the relative path to the json file\r\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\r\n    // Labels an address in call traces\r\n    function label(address account, string calldata newLabel) external;\r\n    // Gets the label for the specified address\r\n    function getLabel(address account) external returns (string memory currentLabel);\r\n    // Using the address that calls the test contract, has the next call (at this call depth only) create a transaction that can later be signed and sent onchain\r\n    function broadcast() external;\r\n    // Has the next call (at this call depth only) create a transaction with the address provided as the sender that can later be signed and sent onchain\r\n    function broadcast(address signer) external;\r\n    // Has the next call (at this call depth only) create a transaction with the private key provided as the sender that can later be signed and sent onchain\r\n    function broadcast(uint256 privateKey) external;\r\n    // Using the address that calls the test contract, has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain\r\n    function startBroadcast() external;\r\n    // Has all subsequent calls (at this call depth only) create transactions with the address provided that can later be signed and sent onchain\r\n    function startBroadcast(address signer) external;\r\n    // Has all subsequent calls (at this call depth only) create transactions with the private key provided that can later be signed and sent onchain\r\n    function startBroadcast(uint256 privateKey) external;\r\n    // Stops collecting onchain transactions\r\n    function stopBroadcast() external;\r\n\r\n    // Get the path of the current project root.\r\n    function projectRoot() external view returns (string memory path);\r\n    // Reads the entire content of file to string. `path` is relative to the project root.\r\n    function readFile(string calldata path) external view returns (string memory data);\r\n    // Reads the entire content of file as binary. `path` is relative to the project root.\r\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\r\n    // Reads next line of file to string.\r\n    function readLine(string calldata path) external view returns (string memory line);\r\n    // Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\r\n    // `path` is relative to the project root.\r\n    function writeFile(string calldata path, string calldata data) external;\r\n    // Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\r\n    // `path` is relative to the project root.\r\n    function writeFileBinary(string calldata path, bytes calldata data) external;\r\n    // Writes line to file, creating a file if it does not exist.\r\n    // `path` is relative to the project root.\r\n    function writeLine(string calldata path, string calldata data) external;\r\n    // Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\r\n    // `path` is relative to the project root.\r\n    function closeFile(string calldata path) external;\r\n    // Removes a file from the filesystem.\r\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    // - `path` points to a directory.\r\n    // - The file doesn't exist.\r\n    // - The user lacks permissions to remove the file.\r\n    // `path` is relative to the project root.\r\n    function removeFile(string calldata path) external;\r\n    // Creates a new, empty directory at the provided path.\r\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    // - User lacks permissions to modify `path`.\r\n    // - A parent of the given path doesn't exist and `recursive` is false.\r\n    // - `path` already exists and `recursive` is false.\r\n    // `path` is relative to the project root.\r\n    function createDir(string calldata path, bool recursive) external;\r\n    // Removes a directory at the provided path.\r\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    // - `path` doesn't exist.\r\n    // - `path` isn't a directory.\r\n    // - User lacks permissions to modify `path`.\r\n    // - The directory is not empty and `recursive` is false.\r\n    // `path` is relative to the project root.\r\n    function removeDir(string calldata path, bool recursive) external;\r\n    // Reads the directory at the given path recursively, up to `max_depth`.\r\n    // `max_depth` defaults to 1, meaning only the direct children of the given directory will be returned.\r\n    // Follows symbolic links if `follow_links` is true.\r\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\r\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\r\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\r\n        external\r\n        view\r\n        returns (DirEntry[] memory entries);\r\n    // Reads a symbolic link, returning the path that the link points to.\r\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    // - `path` is not a symbolic link.\r\n    // - `path` does not exist.\r\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\r\n    // Given a path, query the file system to get information about a file, directory, etc.\r\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\r\n\r\n    // Convert values to a string\r\n    function toString(address value) external pure returns (string memory stringifiedValue);\r\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\r\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\r\n    function toString(bool value) external pure returns (string memory stringifiedValue);\r\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\r\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\r\n    // Convert values from a string\r\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\r\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\r\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\r\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\r\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\r\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\r\n    // Record all the transaction logs\r\n    function recordLogs() external;\r\n    // Gets all the recorded logs\r\n    function getRecordedLogs() external returns (Log[] memory logs);\r\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path m/44'/60'/0'/0/{index}\r\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\r\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at {derivationPath}{index}\r\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\r\n        external\r\n        pure\r\n        returns (uint256 privateKey);\r\n    // Adds a private key to the local forge wallet and returns the address\r\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\r\n    //\r\n    // parseJson\r\n    //\r\n    // ----\r\n    // In case the returned value is a JSON object, it's encoded as a ABI-encoded tuple. As JSON objects\r\n    // don't have the notion of ordered, but tuples do, they JSON object is encoded with it's fields ordered in\r\n    // ALPHABETICAL order. That means that in order to successfully decode the tuple, we need to define a tuple that\r\n    // encodes the fields in the same order, which is alphabetical. In the case of Solidity structs, they are encoded\r\n    // as tuples, with the attributes in the order in which they are defined.\r\n    // For example: json = { 'a': 1, 'b': 0xa4tb......3xs}\r\n    // a: uint256\r\n    // b: address\r\n    // To decode that json, we need to define a struct or a tuple as follows:\r\n    // struct json = { uint256 a; address b; }\r\n    // If we defined a json struct with the opposite order, meaning placing the address b first, it would try to\r\n    // decode the tuple in that order, and thus fail.\r\n    // ----\r\n    // Given a string of JSON, return it as ABI-encoded\r\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\r\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\r\n\r\n    // The following parseJson cheatcodes will do type coercion, for the type that they indicate.\r\n    // For example, parseJsonUint will coerce all values to a uint256. That includes stringified numbers '12'\r\n    // and hex numbers '0xEF'.\r\n    // Type coercion works ONLY for discrete values or arrays. That means that the key must return a value or array, not\r\n    // a JSON object.\r\n    function parseJsonUint(string calldata, string calldata) external returns (uint256);\r\n    function parseJsonUintArray(string calldata, string calldata) external returns (uint256[] memory);\r\n    function parseJsonInt(string calldata, string calldata) external returns (int256);\r\n    function parseJsonIntArray(string calldata, string calldata) external returns (int256[] memory);\r\n    function parseJsonBool(string calldata, string calldata) external returns (bool);\r\n    function parseJsonBoolArray(string calldata, string calldata) external returns (bool[] memory);\r\n    function parseJsonAddress(string calldata, string calldata) external returns (address);\r\n    function parseJsonAddressArray(string calldata, string calldata) external returns (address[] memory);\r\n    function parseJsonString(string calldata, string calldata) external returns (string memory);\r\n    function parseJsonStringArray(string calldata, string calldata) external returns (string[] memory);\r\n    function parseJsonBytes(string calldata, string calldata) external returns (bytes memory);\r\n    function parseJsonBytesArray(string calldata, string calldata) external returns (bytes[] memory);\r\n    function parseJsonBytes32(string calldata, string calldata) external returns (bytes32);\r\n    function parseJsonBytes32Array(string calldata, string calldata) external returns (bytes32[] memory);\r\n\r\n    // Serialize a key and value to a JSON object stored in-memory that can be later written to a file\r\n    // It returns the stringified version of the specific JSON file up to that moment.\r\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\r\n        external\r\n        returns (string memory json);\r\n\r\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n\r\n    //\r\n    // writeJson\r\n    //\r\n    // ----\r\n    // Write a serialized JSON object to a file. If the file exists, it will be overwritten.\r\n    // Let's assume we want to write the following JSON to a file:\r\n    //\r\n    // { \"boolean\": true, \"number\": 342, \"object\": { \"title\": \"finally json serialization\" } }\r\n    //\r\n    // ```\r\n    //  string memory json1 = \"some key\";\r\n    //  vm.serializeBool(json1, \"boolean\", true);\r\n    //  vm.serializeBool(json1, \"number\", uint256(342));\r\n    //  json2 = \"some other key\";\r\n    //  string memory output = vm.serializeString(json2, \"title\", \"finally json serialization\");\r\n    //  string memory finalJson = vm.serialize(json1, \"object\", output);\r\n    //  vm.writeJson(finalJson, \"./output/example.json\");\r\n    // ```\r\n    // The critical insight is that every invocation of serialization will return the stringified version of the JSON\r\n    // up to that point. That means we can construct arbitrary JSON objects and then use the return stringified version\r\n    // to serialize them as values to another JSON object.\r\n    //\r\n    // json1 and json2 are simply keys used by the backend to keep track of the objects. So vm.serializeJson(json1,..)\r\n    // will find the object in-memory that is keyed by \"some key\".\r\n    function writeJson(string calldata json, string calldata path) external;\r\n    // Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key>\r\n    // This is useful to replace a specific value of a JSON file, without having to parse the entire thing\r\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\r\n    // Returns the RPC url for the given alias\r\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\r\n    // Returns all rpc urls and their aliases `[alias, url][]`\r\n    function rpcUrls() external view returns (string[2][] memory urls);\r\n    // Returns all rpc urls and their aliases as structs.\r\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\r\n    // If the condition is false, discard this run's fuzz inputs and generate new ones.\r\n    function assume(bool condition) external pure;\r\n    // Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\r\n    function pauseGasMetering() external;\r\n    // Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\r\n    function resumeGasMetering() external;\r\n    // Writes a breakpoint to jump to in the debugger\r\n    function breakpoint(string calldata char) external;\r\n    // Writes a conditional breakpoint to jump to in the debugger\r\n    function breakpoint(string calldata char, bool value) external;\r\n}\r\n\r\ninterface Vm is VmSafe {\r\n    // Sets block.timestamp\r\n    function warp(uint256 newTimestamp) external;\r\n    // Sets block.height\r\n    function roll(uint256 newHeight) external;\r\n    // Sets block.basefee\r\n    function fee(uint256 newBasefee) external;\r\n    // Sets block.difficulty\r\n    // Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\r\n    // If used on unsupported EVM versions it will revert.\r\n    function difficulty(uint256 newDifficulty) external;\r\n    // Sets block.prevrandao\r\n    // Not available on EVM versions before Paris. Use `difficulty` instead.\r\n    // If used on unsupported EVM versions it will revert.\r\n    function prevrandao(bytes32 newPrevrandao) external;\r\n    // Sets block.chainid\r\n    function chainId(uint256 newChainId) external;\r\n    // Sets tx.gasprice\r\n    function txGasPrice(uint256 newGasPrice) external;\r\n    // Stores a value to an address' storage slot.\r\n    function store(address target, bytes32 slot, bytes32 value) external;\r\n    // Sets the nonce of an account; must be higher than the current nonce of the account\r\n    function setNonce(address account, uint64 newNonce) external;\r\n    // Sets the nonce of an account to an arbitrary value\r\n    function setNonceUnsafe(address account, uint64 newNonce) external;\r\n    // Resets the nonce of an account to 0 for EOAs and 1 for contract accounts\r\n    function resetNonce(address account) external;\r\n    // Sets the *next* call's msg.sender to be the input address\r\n    function prank(address msgSender) external;\r\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\r\n    function startPrank(address msgSender) external;\r\n    // Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input\r\n    function prank(address msgSender, address txOrigin) external;\r\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input\r\n    function startPrank(address msgSender, address txOrigin) external;\r\n    // Resets subsequent calls' msg.sender to be `address(this)`\r\n    function stopPrank() external;\r\n    // Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification\r\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\r\n    // Sets an address' balance\r\n    function deal(address account, uint256 newBalance) external;\r\n    // Sets an address' code\r\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\r\n    // Marks a test as skipped. Must be called at the top of the test.\r\n    function skip(bool skipTest) external;\r\n    // Expects an error on next call\r\n    function expectRevert(bytes calldata revertData) external;\r\n    function expectRevert(bytes4 revertData) external;\r\n    function expectRevert() external;\r\n\r\n    // Prepare an expected log with all four checks enabled.\r\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\r\n    // logs were emitted in the expected order with the expected topics and data.\r\n    // Second form also checks supplied address against emitting contract.\r\n    function expectEmit() external;\r\n    function expectEmit(address emitter) external;\r\n\r\n    // Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).\r\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\r\n    // logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\r\n    // Second form also checks supplied address against emitting contract.\r\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\r\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\r\n        external;\r\n\r\n    // Mocks a call to an address, returning specified data.\r\n    // Calldata can either be strict or a partial match, e.g. if you only\r\n    // pass a Solidity selector to the expected calldata, then the entire Solidity\r\n    // function will be mocked.\r\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\r\n    // Mocks a call to an address with a specific msg.value, returning specified data.\r\n    // Calldata match takes precedence over msg.value in case of ambiguity.\r\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\r\n    // Reverts a call to an address with specified revert data.\r\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\r\n    // Reverts a call to an address with a specific msg.value, with specified revert data.\r\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\r\n        external;\r\n    // Clears all mocked calls\r\n    function clearMockedCalls() external;\r\n    // Expects a call to an address with the specified calldata.\r\n    // Calldata can either be a strict or a partial match\r\n    function expectCall(address callee, bytes calldata data) external;\r\n    // Expects given number of calls to an address with the specified calldata.\r\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\r\n    // Expects a call to an address with the specified msg.value and calldata\r\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\r\n    // Expects given number of calls to an address with the specified msg.value and calldata\r\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\r\n    // Expect a call to an address with the specified msg.value, gas, and calldata.\r\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\r\n    // Expects given number of calls to an address with the specified msg.value, gas, and calldata.\r\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\r\n    // Expect a call to an address with the specified msg.value and calldata, and a *minimum* amount of gas.\r\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\r\n    // Expect given number of calls to an address with the specified msg.value and calldata, and a *minimum* amount of gas.\r\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\r\n        external;\r\n    // Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\r\n    // memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\r\n    function expectSafeMemory(uint64 min, uint64 max) external;\r\n    // Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\r\n    // If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\r\n    // to the set.\r\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\r\n    // Sets block.coinbase\r\n    function coinbase(address newCoinbase) external;\r\n    // Snapshot the current state of the evm.\r\n    // Returns the id of the snapshot that was created.\r\n    // To revert a snapshot use `revertTo`\r\n    function snapshot() external returns (uint256 snapshotId);\r\n    // Revert the state of the EVM to a previous snapshot\r\n    // Takes the snapshot id to revert to.\r\n    // This deletes the snapshot and all snapshots taken after the given snapshot id.\r\n    function revertTo(uint256 snapshotId) external returns (bool success);\r\n    // Creates a new fork with the given endpoint and block and returns the identifier of the fork\r\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\r\n    // Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork\r\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\r\n    // Creates a new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before the transaction,\r\n    // and returns the identifier of the fork\r\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\r\n    // Creates _and_ also selects a new fork with the given endpoint and block and returns the identifier of the fork\r\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\r\n    // Creates _and_ also selects new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before\r\n    // the transaction, returns the identifier of the fork\r\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\r\n    // Creates _and_ also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork\r\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\r\n    // Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\r\n    function selectFork(uint256 forkId) external;\r\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\r\n    function activeFork() external view returns (uint256 forkId);\r\n    // Updates the currently active fork to given block number\r\n    // This is similar to `roll` but for the currently active fork\r\n    function rollFork(uint256 blockNumber) external;\r\n    // Updates the currently active fork to given transaction\r\n    // this will `rollFork` with the number of the block the transaction was mined in and replays all transaction mined before it in the block\r\n    function rollFork(bytes32 txHash) external;\r\n    // Updates the given fork to given block number\r\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\r\n    // Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block\r\n    function rollFork(uint256 forkId, bytes32 txHash) external;\r\n    // Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\r\n    // Meaning, changes made to the state of this account will be kept when switching forks\r\n    function makePersistent(address account) external;\r\n    function makePersistent(address account0, address account1) external;\r\n    function makePersistent(address account0, address account1, address account2) external;\r\n    function makePersistent(address[] calldata accounts) external;\r\n    // Revokes persistent status from the address, previously added via `makePersistent`\r\n    function revokePersistent(address account) external;\r\n    function revokePersistent(address[] calldata accounts) external;\r\n    // Returns true if the account is marked as persistent\r\n    function isPersistent(address account) external view returns (bool persistent);\r\n    // In forking mode, explicitly grant the given address cheatcode access\r\n    function allowCheatcodes(address account) external;\r\n    // Fetches the given transaction from the active fork and executes it on the current state\r\n    function transact(bytes32 txHash) external;\r\n    // Fetches the given transaction from the given fork and executes it on the current state\r\n    function transact(uint256 forkId, bytes32 txHash) external;\r\n}\r\n"
      },
      "lib/forge-std/src/console.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n    function _sendLogPayload(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n        }\r\n    }\r\n\r\n    function log() internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n    }\r\n\r\n    function logUint(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n}"
      },
      "lib/forge-std/src/console2.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\n/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should\r\n/// use `int256` and `uint256`. This modified version fixes that. This version is recommended\r\n/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\r\n/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\r\n/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\r\nlibrary console2 {\r\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n    function _castLogPayloadViewToPure(\r\n        function(bytes memory) internal view fnIn\r\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\r\n        assembly {\r\n            fnOut := fnIn\r\n        }\r\n    }\r\n\r\n    function _sendLogPayload(bytes memory payload) internal pure {\r\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\r\n    }\r\n\r\n    function _sendLogPayloadView(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n        }\r\n    }\r\n\r\n    function log() internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\r\n    }\r\n\r\n    function logUint(uint256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n    }\r\n\r\n    function log(int256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, int256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int256)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n}"
      },
      "lib/forge-std/src/interfaces/IMulticall3.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IMulticall3 {\r\n    struct Call {\r\n        address target;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Call3 {\r\n        address target;\r\n        bool allowFailure;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Call3Value {\r\n        address target;\r\n        bool allowFailure;\r\n        uint256 value;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Result {\r\n        bool success;\r\n        bytes returnData;\r\n    }\r\n\r\n    function aggregate(Call[] calldata calls)\r\n        external\r\n        payable\r\n        returns (uint256 blockNumber, bytes[] memory returnData);\r\n\r\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\r\n\r\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\r\n\r\n    function blockAndAggregate(Call[] calldata calls)\r\n        external\r\n        payable\r\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\r\n\r\n    function getBasefee() external view returns (uint256 basefee);\r\n\r\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\r\n\r\n    function getBlockNumber() external view returns (uint256 blockNumber);\r\n\r\n    function getChainId() external view returns (uint256 chainid);\r\n\r\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\r\n\r\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\r\n\r\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\r\n\r\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\r\n\r\n    function getEthBalance(address addr) external view returns (uint256 balance);\r\n\r\n    function getLastBlockHash() external view returns (bytes32 blockHash);\r\n\r\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\r\n        external\r\n        payable\r\n        returns (Result[] memory returnData);\r\n\r\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\r\n        external\r\n        payable\r\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\r\n}\r\n"
      },
      "lib/forge-std/src/safeconsole.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2 <0.9.0;\r\n\r\n/// @author philogy <https://github.com/philogy>\r\n/// @dev Code generated automatically by script.\r\nlibrary safeconsole {\r\n    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;\r\n\r\n    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)\r\n    // for the view-to-pure log trick.\r\n    function _sendLogPayload(uint256 offset, uint256 size) private pure {\r\n        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;\r\n        function(uint256, uint256) internal pure pureSendLogPayload;\r\n        assembly {\r\n            pureSendLogPayload := fnIn\r\n        }\r\n        pureSendLogPayload(offset, size);\r\n    }\r\n\r\n    function _sendLogPayloadView(uint256 offset, uint256 size) private view {\r\n        assembly {\r\n            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))\r\n        }\r\n    }\r\n\r\n    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {\r\n        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;\r\n        function(uint256, uint256, uint256) internal pure pureMemcopy;\r\n        assembly {\r\n            pureMemcopy := fnIn\r\n        }\r\n        pureMemcopy(fromOffset, toOffset, length);\r\n    }\r\n\r\n    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {\r\n        assembly {\r\n            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))\r\n        }\r\n    }\r\n\r\n    function logMemory(uint256 offset, uint256 length) internal pure {\r\n        if (offset >= 0x60) {\r\n            // Sufficient memory before slice to prepare call header.\r\n            bytes32 m0;\r\n            bytes32 m1;\r\n            bytes32 m2;\r\n            assembly {\r\n                m0 := mload(sub(offset, 0x60))\r\n                m1 := mload(sub(offset, 0x40))\r\n                m2 := mload(sub(offset, 0x20))\r\n                // Selector of `logBytes(bytes)`.\r\n                mstore(sub(offset, 0x60), 0xe17bf956)\r\n                mstore(sub(offset, 0x40), 0x20)\r\n                mstore(sub(offset, 0x20), length)\r\n            }\r\n            _sendLogPayload(offset - 0x44, length + 0x44);\r\n            assembly {\r\n                mstore(sub(offset, 0x60), m0)\r\n                mstore(sub(offset, 0x40), m1)\r\n                mstore(sub(offset, 0x20), m2)\r\n            }\r\n        } else {\r\n            // Insufficient space, so copy slice forward, add header and reverse.\r\n            bytes32 m0;\r\n            bytes32 m1;\r\n            bytes32 m2;\r\n            uint256 endOffset = offset + length;\r\n            assembly {\r\n                m0 := mload(add(endOffset, 0x00))\r\n                m1 := mload(add(endOffset, 0x20))\r\n                m2 := mload(add(endOffset, 0x40))\r\n            }\r\n            _memcopy(offset, offset + 0x60, length);\r\n            assembly {\r\n                // Selector of `logBytes(bytes)`.\r\n                mstore(add(offset, 0x00), 0xe17bf956)\r\n                mstore(add(offset, 0x20), 0x20)\r\n                mstore(add(offset, 0x40), length)\r\n            }\r\n            _sendLogPayload(offset + 0x1c, length + 0x44);\r\n            _memcopy(offset + 0x60, offset, length);\r\n            assembly {\r\n                mstore(add(endOffset, 0x00), m0)\r\n                mstore(add(endOffset, 0x20), m1)\r\n                mstore(add(endOffset, 0x40), m2)\r\n            }\r\n        }\r\n    }\r\n\r\n    function log(address p0) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            // Selector of `log(address)`.\r\n            mstore(0x00, 0x2c2ecbc2)\r\n            mstore(0x20, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x24);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n        }\r\n    }\r\n\r\n    function log(bool p0) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            // Selector of `log(bool)`.\r\n            mstore(0x00, 0x32458eed)\r\n            mstore(0x20, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x24);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            // Selector of `log(uint256)`.\r\n            mstore(0x00, 0xf82c50f1)\r\n            mstore(0x20, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x24);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(string)`.\r\n            mstore(0x00, 0x41304fac)\r\n            mstore(0x20, 0x20)\r\n            writeString(0x40, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(address,address)`.\r\n            mstore(0x00, 0xdaf0d4aa)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(address,bool)`.\r\n            mstore(0x00, 0x75b605d3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(address,uint256)`.\r\n            mstore(0x00, 0x8309e8a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,string)`.\r\n            mstore(0x00, 0x759f86bb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x40)\r\n            writeString(0x60, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(bool,address)`.\r\n            mstore(0x00, 0x853c4849)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(bool,bool)`.\r\n            mstore(0x00, 0x2a110e83)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(bool,uint256)`.\r\n            mstore(0x00, 0x399174d3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,string)`.\r\n            mstore(0x00, 0x8feac525)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x40)\r\n            writeString(0x60, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(uint256,address)`.\r\n            mstore(0x00, 0x69276c86)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(uint256,bool)`.\r\n            mstore(0x00, 0x1c9d7eb3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            // Selector of `log(uint256,uint256)`.\r\n            mstore(0x00, 0xf666715a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x44);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,string)`.\r\n            mstore(0x00, 0x643fd0df)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x40)\r\n            writeString(0x60, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(string,address)`.\r\n            mstore(0x00, 0x319af333)\r\n            mstore(0x20, 0x40)\r\n            mstore(0x40, p1)\r\n            writeString(0x60, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(string,bool)`.\r\n            mstore(0x00, 0xc3b55635)\r\n            mstore(0x20, 0x40)\r\n            mstore(0x40, p1)\r\n            writeString(0x60, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(string,uint256)`.\r\n            mstore(0x00, 0xb60e72cc)\r\n            mstore(0x20, 0x40)\r\n            mstore(0x40, p1)\r\n            writeString(0x60, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,string)`.\r\n            mstore(0x00, 0x4b5c4277)\r\n            mstore(0x20, 0x40)\r\n            mstore(0x40, 0x80)\r\n            writeString(0x60, p0)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,address,address)`.\r\n            mstore(0x00, 0x018c84c2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,address,bool)`.\r\n            mstore(0x00, 0xf2a66286)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,address,uint256)`.\r\n            mstore(0x00, 0x17fe6185)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,address,string)`.\r\n            mstore(0x00, 0x007150be)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,bool,address)`.\r\n            mstore(0x00, 0xf11699ed)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,bool,bool)`.\r\n            mstore(0x00, 0xeb830c92)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,bool,uint256)`.\r\n            mstore(0x00, 0x9c4f99fb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,bool,string)`.\r\n            mstore(0x00, 0x212255cc)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,uint256,address)`.\r\n            mstore(0x00, 0x7bc0d848)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,uint256,bool)`.\r\n            mstore(0x00, 0x678209a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(address,uint256,uint256)`.\r\n            mstore(0x00, 0xb69bcaf6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,uint256,string)`.\r\n            mstore(0x00, 0xa1f2e8aa)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,string,address)`.\r\n            mstore(0x00, 0xf08744e8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,string,bool)`.\r\n            mstore(0x00, 0xcf020fb1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(address,string,uint256)`.\r\n            mstore(0x00, 0x67dd6ff1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(address,string,string)`.\r\n            mstore(0x00, 0xfb772265)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p1)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,address,address)`.\r\n            mstore(0x00, 0xd2763667)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,address,bool)`.\r\n            mstore(0x00, 0x18c9c746)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,address,uint256)`.\r\n            mstore(0x00, 0x5f7b9afb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,address,string)`.\r\n            mstore(0x00, 0xde9a9270)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,bool,address)`.\r\n            mstore(0x00, 0x1078f68d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,bool,bool)`.\r\n            mstore(0x00, 0x50709698)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,bool,uint256)`.\r\n            mstore(0x00, 0x12f21602)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,bool,string)`.\r\n            mstore(0x00, 0x2555fa46)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,uint256,address)`.\r\n            mstore(0x00, 0x088ef9d2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,uint256,bool)`.\r\n            mstore(0x00, 0xe8defba9)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(bool,uint256,uint256)`.\r\n            mstore(0x00, 0x37103367)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,uint256,string)`.\r\n            mstore(0x00, 0xc3fc3970)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,string,address)`.\r\n            mstore(0x00, 0x9591b953)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,string,bool)`.\r\n            mstore(0x00, 0xdbb4c247)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(bool,string,uint256)`.\r\n            mstore(0x00, 0x1093ee11)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(bool,string,string)`.\r\n            mstore(0x00, 0xb076847f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p1)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,address,address)`.\r\n            mstore(0x00, 0xbcfd9be0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,address,bool)`.\r\n            mstore(0x00, 0x9b6ec042)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,address,uint256)`.\r\n            mstore(0x00, 0x5a9b5ed5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,address,string)`.\r\n            mstore(0x00, 0x63cb41f9)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,bool,address)`.\r\n            mstore(0x00, 0x35085f7b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,bool,bool)`.\r\n            mstore(0x00, 0x20718650)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,bool,uint256)`.\r\n            mstore(0x00, 0x20098014)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,bool,string)`.\r\n            mstore(0x00, 0x85775021)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,uint256,address)`.\r\n            mstore(0x00, 0x5c96b331)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,uint256,bool)`.\r\n            mstore(0x00, 0x4766da72)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            // Selector of `log(uint256,uint256,uint256)`.\r\n            mstore(0x00, 0xd1ed7a3c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x64);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,uint256,string)`.\r\n            mstore(0x00, 0x71d04af2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x60)\r\n            writeString(0x80, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,string,address)`.\r\n            mstore(0x00, 0x7afac959)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,string,bool)`.\r\n            mstore(0x00, 0x4ceda75a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(uint256,string,uint256)`.\r\n            mstore(0x00, 0x37aa7d4c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(uint256,string,string)`.\r\n            mstore(0x00, 0xb115611f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x60)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p1)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,address,address)`.\r\n            mstore(0x00, 0xfcec75e0)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,address,bool)`.\r\n            mstore(0x00, 0xc91d5ed4)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,address,uint256)`.\r\n            mstore(0x00, 0x0d26b925)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,address,string)`.\r\n            mstore(0x00, 0xe0e9ad4f)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,bool,address)`.\r\n            mstore(0x00, 0x932bbb38)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,bool,bool)`.\r\n            mstore(0x00, 0x850b7ad6)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,bool,uint256)`.\r\n            mstore(0x00, 0xc95958d6)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,bool,string)`.\r\n            mstore(0x00, 0xe298f47d)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,uint256,address)`.\r\n            mstore(0x00, 0x1c7ec448)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,uint256,bool)`.\r\n            mstore(0x00, 0xca7733b1)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            // Selector of `log(string,uint256,uint256)`.\r\n            mstore(0x00, 0xca47c4eb)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xa4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,uint256,string)`.\r\n            mstore(0x00, 0x5970e089)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xa0)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,string,address)`.\r\n            mstore(0x00, 0x95ed0195)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, 0xa0)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,string,bool)`.\r\n            mstore(0x00, 0xb0e0f9b5)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, 0xa0)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            // Selector of `log(string,string,uint256)`.\r\n            mstore(0x00, 0x5821efa1)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, 0xa0)\r\n            mstore(0x60, p2)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xe4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            // Selector of `log(string,string,string)`.\r\n            mstore(0x00, 0x2ced7cef)\r\n            mstore(0x20, 0x60)\r\n            mstore(0x40, 0xa0)\r\n            mstore(0x60, 0xe0)\r\n            writeString(0x80, p0)\r\n            writeString(0xc0, p1)\r\n            writeString(0x100, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x124);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,address,address)`.\r\n            mstore(0x00, 0x665bf134)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,address,bool)`.\r\n            mstore(0x00, 0x0e378994)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,address,uint256)`.\r\n            mstore(0x00, 0x94250d77)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,address,string)`.\r\n            mstore(0x00, 0xf808da20)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,bool,address)`.\r\n            mstore(0x00, 0x9f1bc36e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,bool,bool)`.\r\n            mstore(0x00, 0x2cd4134a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,bool,uint256)`.\r\n            mstore(0x00, 0x3971e78c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,bool,string)`.\r\n            mstore(0x00, 0xaa6540c8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,uint256,address)`.\r\n            mstore(0x00, 0x8da6def5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,uint256,bool)`.\r\n            mstore(0x00, 0x9b4254e2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,address,uint256,uint256)`.\r\n            mstore(0x00, 0xbe553481)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,uint256,string)`.\r\n            mstore(0x00, 0xfdb4f990)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,string,address)`.\r\n            mstore(0x00, 0x8f736d16)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,string,bool)`.\r\n            mstore(0x00, 0x6f1a594e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,address,string,uint256)`.\r\n            mstore(0x00, 0xef1cefe7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,address,string,string)`.\r\n            mstore(0x00, 0x21bdaf25)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,address,address)`.\r\n            mstore(0x00, 0x660375dd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,address,bool)`.\r\n            mstore(0x00, 0xa6f50b0f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,address,uint256)`.\r\n            mstore(0x00, 0xa75c59de)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,address,string)`.\r\n            mstore(0x00, 0x2dd778e6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,bool,address)`.\r\n            mstore(0x00, 0xcf394485)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,bool,bool)`.\r\n            mstore(0x00, 0xcac43479)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,bool,uint256)`.\r\n            mstore(0x00, 0x8c4e5de6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,bool,string)`.\r\n            mstore(0x00, 0xdfc4a2e8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,uint256,address)`.\r\n            mstore(0x00, 0xccf790a1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,uint256,bool)`.\r\n            mstore(0x00, 0xc4643e20)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,bool,uint256,uint256)`.\r\n            mstore(0x00, 0x386ff5f4)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,uint256,string)`.\r\n            mstore(0x00, 0x0aa6cfad)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,string,address)`.\r\n            mstore(0x00, 0x19fd4956)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,string,bool)`.\r\n            mstore(0x00, 0x50ad461d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,bool,string,uint256)`.\r\n            mstore(0x00, 0x80e6a20b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,bool,string,string)`.\r\n            mstore(0x00, 0x475c5c33)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,address,address)`.\r\n            mstore(0x00, 0x478d1c62)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,address,bool)`.\r\n            mstore(0x00, 0xa1bcc9b3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,address,uint256)`.\r\n            mstore(0x00, 0x100f650e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,address,string)`.\r\n            mstore(0x00, 0x1da986ea)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,bool,address)`.\r\n            mstore(0x00, 0xa31bfdcc)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,bool,bool)`.\r\n            mstore(0x00, 0x3bf5e537)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,bool,uint256)`.\r\n            mstore(0x00, 0x22f6b999)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,bool,string)`.\r\n            mstore(0x00, 0xc5ad85f9)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,uint256,address)`.\r\n            mstore(0x00, 0x20e3984d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,uint256,bool)`.\r\n            mstore(0x00, 0x66f1bc67)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(address,uint256,uint256,uint256)`.\r\n            mstore(0x00, 0x34f0e636)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,uint256,string)`.\r\n            mstore(0x00, 0x4a28c017)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,string,address)`.\r\n            mstore(0x00, 0x5c430d47)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,string,bool)`.\r\n            mstore(0x00, 0xcf18105c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,uint256,string,uint256)`.\r\n            mstore(0x00, 0xbf01f891)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,uint256,string,string)`.\r\n            mstore(0x00, 0x88a8c406)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,address,address)`.\r\n            mstore(0x00, 0x0d36fa20)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,address,bool)`.\r\n            mstore(0x00, 0x0df12b76)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,address,uint256)`.\r\n            mstore(0x00, 0x457fe3cf)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,address,string)`.\r\n            mstore(0x00, 0xf7e36245)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,bool,address)`.\r\n            mstore(0x00, 0x205871c2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,bool,bool)`.\r\n            mstore(0x00, 0x5f1d5c9f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,bool,uint256)`.\r\n            mstore(0x00, 0x515e38b6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,bool,string)`.\r\n            mstore(0x00, 0xbc0b61fe)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,uint256,address)`.\r\n            mstore(0x00, 0x63183678)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,uint256,bool)`.\r\n            mstore(0x00, 0x0ef7e050)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(address,string,uint256,uint256)`.\r\n            mstore(0x00, 0x1dc8e1b8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,uint256,string)`.\r\n            mstore(0x00, 0x448830a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,string,address)`.\r\n            mstore(0x00, 0xa04e2f87)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,string,bool)`.\r\n            mstore(0x00, 0x35a5071f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(address,string,string,uint256)`.\r\n            mstore(0x00, 0x159f8927)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(address,string,string,string)`.\r\n            mstore(0x00, 0x5d02c50b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,address,address)`.\r\n            mstore(0x00, 0x1d14d001)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,address,bool)`.\r\n            mstore(0x00, 0x46600be0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,address,uint256)`.\r\n            mstore(0x00, 0x0c66d1be)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,address,string)`.\r\n            mstore(0x00, 0xd812a167)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,bool,address)`.\r\n            mstore(0x00, 0x1c41a336)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,bool,bool)`.\r\n            mstore(0x00, 0x6a9c478b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,bool,uint256)`.\r\n            mstore(0x00, 0x07831502)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,bool,string)`.\r\n            mstore(0x00, 0x4a66cb34)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,uint256,address)`.\r\n            mstore(0x00, 0x136b05dd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,uint256,bool)`.\r\n            mstore(0x00, 0xd6019f1c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,address,uint256,uint256)`.\r\n            mstore(0x00, 0x7bf181a1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,uint256,string)`.\r\n            mstore(0x00, 0x51f09ff8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,string,address)`.\r\n            mstore(0x00, 0x6f7c603e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,string,bool)`.\r\n            mstore(0x00, 0xe2bfd60b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,address,string,uint256)`.\r\n            mstore(0x00, 0xc21f64c7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,address,string,string)`.\r\n            mstore(0x00, 0xa73c1db6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,address,address)`.\r\n            mstore(0x00, 0xf4880ea4)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,address,bool)`.\r\n            mstore(0x00, 0xc0a302d8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,address,uint256)`.\r\n            mstore(0x00, 0x4c123d57)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,address,string)`.\r\n            mstore(0x00, 0xa0a47963)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,bool,address)`.\r\n            mstore(0x00, 0x8c329b1a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,bool,bool)`.\r\n            mstore(0x00, 0x3b2a5ce0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,bool,uint256)`.\r\n            mstore(0x00, 0x6d7045c1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,bool,string)`.\r\n            mstore(0x00, 0x2ae408d4)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,uint256,address)`.\r\n            mstore(0x00, 0x54a7a9a0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,uint256,bool)`.\r\n            mstore(0x00, 0x619e4d0e)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,bool,uint256,uint256)`.\r\n            mstore(0x00, 0x0bb00eab)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,uint256,string)`.\r\n            mstore(0x00, 0x7dd4d0e0)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,string,address)`.\r\n            mstore(0x00, 0xf9ad2b89)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,string,bool)`.\r\n            mstore(0x00, 0xb857163a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,bool,string,uint256)`.\r\n            mstore(0x00, 0xe3a9ca2f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,bool,string,string)`.\r\n            mstore(0x00, 0x6d1e8751)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,address,address)`.\r\n            mstore(0x00, 0x26f560a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,address,bool)`.\r\n            mstore(0x00, 0xb4c314ff)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,address,uint256)`.\r\n            mstore(0x00, 0x1537dc87)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,address,string)`.\r\n            mstore(0x00, 0x1bb3b09a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,bool,address)`.\r\n            mstore(0x00, 0x9acd3616)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,bool,bool)`.\r\n            mstore(0x00, 0xceb5f4d7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,bool,uint256)`.\r\n            mstore(0x00, 0x7f9bbca2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,bool,string)`.\r\n            mstore(0x00, 0x9143dbb1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,uint256,address)`.\r\n            mstore(0x00, 0x00dd87b9)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,uint256,bool)`.\r\n            mstore(0x00, 0xbe984353)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(bool,uint256,uint256,uint256)`.\r\n            mstore(0x00, 0x374bb4b2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,uint256,string)`.\r\n            mstore(0x00, 0x8e69fb5d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,string,address)`.\r\n            mstore(0x00, 0xfedd1fff)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,string,bool)`.\r\n            mstore(0x00, 0xe5e70b2b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,uint256,string,uint256)`.\r\n            mstore(0x00, 0x6a1199e2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,uint256,string,string)`.\r\n            mstore(0x00, 0xf5bc2249)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,address,address)`.\r\n            mstore(0x00, 0x2b2b18dc)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,address,bool)`.\r\n            mstore(0x00, 0x6dd434ca)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,address,uint256)`.\r\n            mstore(0x00, 0xa5cada94)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,address,string)`.\r\n            mstore(0x00, 0x12d6c788)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,bool,address)`.\r\n            mstore(0x00, 0x538e06ab)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,bool,bool)`.\r\n            mstore(0x00, 0xdc5e935b)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,bool,uint256)`.\r\n            mstore(0x00, 0x1606a393)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,bool,string)`.\r\n            mstore(0x00, 0x483d0416)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,uint256,address)`.\r\n            mstore(0x00, 0x1596a1ce)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,uint256,bool)`.\r\n            mstore(0x00, 0x6b0e5d53)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(bool,string,uint256,uint256)`.\r\n            mstore(0x00, 0x28863fcb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,uint256,string)`.\r\n            mstore(0x00, 0x1ad96de6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,string,address)`.\r\n            mstore(0x00, 0x97d394d8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,string,bool)`.\r\n            mstore(0x00, 0x1e4b87e5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(bool,string,string,uint256)`.\r\n            mstore(0x00, 0x7be0c3eb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(bool,string,string,string)`.\r\n            mstore(0x00, 0x1762e32a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,address,address)`.\r\n            mstore(0x00, 0x2488b414)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,address,bool)`.\r\n            mstore(0x00, 0x091ffaf5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,address,uint256)`.\r\n            mstore(0x00, 0x736efbb6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,address,string)`.\r\n            mstore(0x00, 0x031c6f73)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,bool,address)`.\r\n            mstore(0x00, 0xef72c513)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,bool,bool)`.\r\n            mstore(0x00, 0xe351140f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,bool,uint256)`.\r\n            mstore(0x00, 0x5abd992a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,bool,string)`.\r\n            mstore(0x00, 0x90fb06aa)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,uint256,address)`.\r\n            mstore(0x00, 0x15c127b5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,uint256,bool)`.\r\n            mstore(0x00, 0x5f743a7c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,address,uint256,uint256)`.\r\n            mstore(0x00, 0x0c9cd9c1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,uint256,string)`.\r\n            mstore(0x00, 0xddb06521)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,string,address)`.\r\n            mstore(0x00, 0x9cba8fff)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,string,bool)`.\r\n            mstore(0x00, 0xcc32ab07)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,address,string,uint256)`.\r\n            mstore(0x00, 0x46826b5d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,address,string,string)`.\r\n            mstore(0x00, 0x3e128ca3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,address,address)`.\r\n            mstore(0x00, 0xa1ef4cbb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,address,bool)`.\r\n            mstore(0x00, 0x454d54a5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,address,uint256)`.\r\n            mstore(0x00, 0x078287f5)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,address,string)`.\r\n            mstore(0x00, 0xade052c7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,bool,address)`.\r\n            mstore(0x00, 0x69640b59)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,bool,bool)`.\r\n            mstore(0x00, 0xb6f577a1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,bool,uint256)`.\r\n            mstore(0x00, 0x7464ce23)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,bool,string)`.\r\n            mstore(0x00, 0xdddb9561)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,uint256,address)`.\r\n            mstore(0x00, 0x88cb6041)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,uint256,bool)`.\r\n            mstore(0x00, 0x91a02e2a)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,bool,uint256,uint256)`.\r\n            mstore(0x00, 0xc6acc7a8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,uint256,string)`.\r\n            mstore(0x00, 0xde03e774)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,string,address)`.\r\n            mstore(0x00, 0xef529018)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,string,bool)`.\r\n            mstore(0x00, 0xeb928d7f)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,bool,string,uint256)`.\r\n            mstore(0x00, 0x2c1d0746)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,bool,string,string)`.\r\n            mstore(0x00, 0x68c8b8bd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,address,address)`.\r\n            mstore(0x00, 0x56a5d1b1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,address,bool)`.\r\n            mstore(0x00, 0x15cac476)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,address,uint256)`.\r\n            mstore(0x00, 0x88f6e4b2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,address,string)`.\r\n            mstore(0x00, 0x6cde40b8)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,bool,address)`.\r\n            mstore(0x00, 0x9a816a83)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,bool,bool)`.\r\n            mstore(0x00, 0xab085ae6)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,bool,uint256)`.\r\n            mstore(0x00, 0xeb7f6fd2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,bool,string)`.\r\n            mstore(0x00, 0xa5b4fc99)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,uint256,address)`.\r\n            mstore(0x00, 0xfa8185af)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,uint256,bool)`.\r\n            mstore(0x00, 0xc598d185)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        assembly {\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            // Selector of `log(uint256,uint256,uint256,uint256)`.\r\n            mstore(0x00, 0x193fb800)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x84);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,uint256,string)`.\r\n            mstore(0x00, 0x59cfcbe3)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x80)\r\n            writeString(0xa0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,string,address)`.\r\n            mstore(0x00, 0x42d21db7)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,string,bool)`.\r\n            mstore(0x00, 0x7af6ab25)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,uint256,string,uint256)`.\r\n            mstore(0x00, 0x5da297eb)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,uint256,string,string)`.\r\n            mstore(0x00, 0x27d8afd2)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0x80)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p2)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,address,address)`.\r\n            mstore(0x00, 0x6168ed61)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,address,bool)`.\r\n            mstore(0x00, 0x90c30a56)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,address,uint256)`.\r\n            mstore(0x00, 0xe8d3018d)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,address,string)`.\r\n            mstore(0x00, 0x9c3adfa1)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,bool,address)`.\r\n            mstore(0x00, 0xae2ec581)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,bool,bool)`.\r\n            mstore(0x00, 0xba535d9c)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,bool,uint256)`.\r\n            mstore(0x00, 0xcf009880)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,bool,string)`.\r\n            mstore(0x00, 0xd2d423cd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,uint256,address)`.\r\n            mstore(0x00, 0x3b2279b4)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,uint256,bool)`.\r\n            mstore(0x00, 0x691a8f74)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(uint256,string,uint256,uint256)`.\r\n            mstore(0x00, 0x82c25b74)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,uint256,string)`.\r\n            mstore(0x00, 0xb7b914ca)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,string,address)`.\r\n            mstore(0x00, 0xd583c602)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,string,bool)`.\r\n            mstore(0x00, 0xb3a6b6bd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(uint256,string,string,uint256)`.\r\n            mstore(0x00, 0xb028c9bd)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(uint256,string,string,string)`.\r\n            mstore(0x00, 0x21ad0683)\r\n            mstore(0x20, p0)\r\n            mstore(0x40, 0x80)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p1)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,address,address)`.\r\n            mstore(0x00, 0xed8f28f6)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,address,bool)`.\r\n            mstore(0x00, 0xb59dbd60)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,address,uint256)`.\r\n            mstore(0x00, 0x8ef3f399)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,address,string)`.\r\n            mstore(0x00, 0x800a1c67)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,bool,address)`.\r\n            mstore(0x00, 0x223603bd)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,bool,bool)`.\r\n            mstore(0x00, 0x79884c2b)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,bool,uint256)`.\r\n            mstore(0x00, 0x3e9f866a)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,bool,string)`.\r\n            mstore(0x00, 0x0454c079)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,uint256,address)`.\r\n            mstore(0x00, 0x63fb8bc5)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,uint256,bool)`.\r\n            mstore(0x00, 0xfc4845f0)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,address,uint256,uint256)`.\r\n            mstore(0x00, 0xf8f51b1e)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,uint256,string)`.\r\n            mstore(0x00, 0x5a477632)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,string,address)`.\r\n            mstore(0x00, 0xaabc9a31)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,string,bool)`.\r\n            mstore(0x00, 0x5f15d28c)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,address,string,uint256)`.\r\n            mstore(0x00, 0x91d1112e)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,address,string,string)`.\r\n            mstore(0x00, 0x245986f2)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,address,address)`.\r\n            mstore(0x00, 0x33e9dd1d)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,address,bool)`.\r\n            mstore(0x00, 0x958c28c6)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,address,uint256)`.\r\n            mstore(0x00, 0x5d08bb05)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,address,string)`.\r\n            mstore(0x00, 0x2d8e33a4)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,bool,address)`.\r\n            mstore(0x00, 0x7190a529)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,bool,bool)`.\r\n            mstore(0x00, 0x895af8c5)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,bool,uint256)`.\r\n            mstore(0x00, 0x8e3f78a9)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,bool,string)`.\r\n            mstore(0x00, 0x9d22d5dd)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,uint256,address)`.\r\n            mstore(0x00, 0x935e09bf)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,uint256,bool)`.\r\n            mstore(0x00, 0x8af7cf8a)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,bool,uint256,uint256)`.\r\n            mstore(0x00, 0x64b5bb67)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,uint256,string)`.\r\n            mstore(0x00, 0x742d6ee7)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,string,address)`.\r\n            mstore(0x00, 0xe0625b29)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,string,bool)`.\r\n            mstore(0x00, 0x3f8a701d)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,bool,string,uint256)`.\r\n            mstore(0x00, 0x24f91465)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,bool,string,string)`.\r\n            mstore(0x00, 0xa826caeb)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,address,address)`.\r\n            mstore(0x00, 0x5ea2b7ae)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,address,bool)`.\r\n            mstore(0x00, 0x82112a42)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,address,uint256)`.\r\n            mstore(0x00, 0x4f04fdc6)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,address,string)`.\r\n            mstore(0x00, 0x9ffb2f93)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,bool,address)`.\r\n            mstore(0x00, 0xe0e95b98)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,bool,bool)`.\r\n            mstore(0x00, 0x354c36d6)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,bool,uint256)`.\r\n            mstore(0x00, 0xe41b6f6f)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,bool,string)`.\r\n            mstore(0x00, 0xabf73a98)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,uint256,address)`.\r\n            mstore(0x00, 0xe21de278)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,uint256,bool)`.\r\n            mstore(0x00, 0x7626db92)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            // Selector of `log(string,uint256,uint256,uint256)`.\r\n            mstore(0x00, 0xa7a87853)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n        }\r\n        _sendLogPayload(0x1c, 0xc4);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,uint256,string)`.\r\n            mstore(0x00, 0x854b3496)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0xc0)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,string,address)`.\r\n            mstore(0x00, 0x7c4632a4)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,string,bool)`.\r\n            mstore(0x00, 0x7d24491d)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,uint256,string,uint256)`.\r\n            mstore(0x00, 0xc67ea9d1)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,uint256,string,string)`.\r\n            mstore(0x00, 0x5ab84e1f)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, p1)\r\n            mstore(0x60, 0xc0)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p2)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,address,address)`.\r\n            mstore(0x00, 0x439c7bef)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,address,bool)`.\r\n            mstore(0x00, 0x5ccd4e37)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,address,uint256)`.\r\n            mstore(0x00, 0x7cc3c607)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,address,string)`.\r\n            mstore(0x00, 0xeb1bff80)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,bool,address)`.\r\n            mstore(0x00, 0xc371c7db)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,bool,bool)`.\r\n            mstore(0x00, 0x40785869)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,bool,uint256)`.\r\n            mstore(0x00, 0xd6aefad2)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,bool,string)`.\r\n            mstore(0x00, 0x5e84b0ea)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,uint256,address)`.\r\n            mstore(0x00, 0x1023f7b2)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,uint256,bool)`.\r\n            mstore(0x00, 0xc3a8a654)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            // Selector of `log(string,string,uint256,uint256)`.\r\n            mstore(0x00, 0xf45d7d2c)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n        }\r\n        _sendLogPayload(0x1c, 0x104);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,uint256,string)`.\r\n            mstore(0x00, 0x5d1a971a)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, p2)\r\n            mstore(0x80, 0x100)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,string,address)`.\r\n            mstore(0x00, 0x6d572f44)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, 0x100)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,string,bool)`.\r\n            mstore(0x00, 0x2c1754ed)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, 0x100)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            // Selector of `log(string,string,string,uint256)`.\r\n            mstore(0x00, 0x8eafb02b)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, 0x100)\r\n            mstore(0x80, p3)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p2)\r\n        }\r\n        _sendLogPayload(0x1c, 0x144);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n        }\r\n    }\r\n\r\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\r\n        bytes32 m0;\r\n        bytes32 m1;\r\n        bytes32 m2;\r\n        bytes32 m3;\r\n        bytes32 m4;\r\n        bytes32 m5;\r\n        bytes32 m6;\r\n        bytes32 m7;\r\n        bytes32 m8;\r\n        bytes32 m9;\r\n        bytes32 m10;\r\n        bytes32 m11;\r\n        bytes32 m12;\r\n        assembly {\r\n            function writeString(pos, w) {\r\n                let length := 0\r\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\r\n                mstore(pos, length)\r\n                let shift := sub(256, shl(3, length))\r\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\r\n            }\r\n            m0 := mload(0x00)\r\n            m1 := mload(0x20)\r\n            m2 := mload(0x40)\r\n            m3 := mload(0x60)\r\n            m4 := mload(0x80)\r\n            m5 := mload(0xa0)\r\n            m6 := mload(0xc0)\r\n            m7 := mload(0xe0)\r\n            m8 := mload(0x100)\r\n            m9 := mload(0x120)\r\n            m10 := mload(0x140)\r\n            m11 := mload(0x160)\r\n            m12 := mload(0x180)\r\n            // Selector of `log(string,string,string,string)`.\r\n            mstore(0x00, 0xde68f20a)\r\n            mstore(0x20, 0x80)\r\n            mstore(0x40, 0xc0)\r\n            mstore(0x60, 0x100)\r\n            mstore(0x80, 0x140)\r\n            writeString(0xa0, p0)\r\n            writeString(0xe0, p1)\r\n            writeString(0x120, p2)\r\n            writeString(0x160, p3)\r\n        }\r\n        _sendLogPayload(0x1c, 0x184);\r\n        assembly {\r\n            mstore(0x00, m0)\r\n            mstore(0x20, m1)\r\n            mstore(0x40, m2)\r\n            mstore(0x60, m3)\r\n            mstore(0x80, m4)\r\n            mstore(0xa0, m5)\r\n            mstore(0xc0, m6)\r\n            mstore(0xe0, m7)\r\n            mstore(0x100, m8)\r\n            mstore(0x120, m9)\r\n            mstore(0x140, m10)\r\n            mstore(0x160, m11)\r\n            mstore(0x180, m12)\r\n        }\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\r\n *\r\n * _Available since v4.8.3._\r\n */\r\ninterface IERC1967 {\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is changed.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822Proxiable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../Proxy.sol\";\r\nimport \"./ERC1967Upgrade.sol\";\r\n\r\n/**\r\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\r\n * implementation address that can be changed. This address is stored in storage in the location specified by\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\r\n * implementation behind the proxy.\r\n */\r\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\r\n    /**\r\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\r\n     *\r\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\r\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\r\n     */\r\n    constructor(address _logic, bytes memory _data) payable {\r\n        _upgradeToAndCall(_logic, _data, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal view virtual override returns (address impl) {\r\n        return ERC1967Upgrade._getImplementation();\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../beacon/IBeacon.sol\";\r\nimport \"../../interfaces/IERC1967.sol\";\r\nimport \"../../interfaces/draft-IERC1822.sol\";\r\nimport \"../../utils/Address.sol\";\r\nimport \"../../utils/StorageSlot.sol\";\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract ERC1967Upgrade is IERC1967 {\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            Address.isContract(IBeacon(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overridden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {}\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC1967/ERC1967Proxy.sol\";\r\n\r\n/**\r\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\r\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\r\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\r\n * include them in the ABI so this interface must be used to interact with it.\r\n */\r\ninterface ITransparentUpgradeableProxy is IERC1967 {\r\n    function admin() external view returns (address);\r\n\r\n    function implementation() external view returns (address);\r\n\r\n    function changeAdmin(address) external;\r\n\r\n    function upgradeTo(address) external;\r\n\r\n    function upgradeToAndCall(address, bytes memory) external payable;\r\n}\r\n\r\n/**\r\n * @dev This contract implements a proxy that is upgradeable by an admin.\r\n *\r\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\r\n * clashing], which can potentially be used in an attack, this contract uses the\r\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\r\n * things that go hand in hand:\r\n *\r\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\r\n * that call matches one of the admin functions exposed by the proxy itself.\r\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\r\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\r\n * \"admin cannot fallback to proxy target\".\r\n *\r\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\r\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\r\n * to sudden errors when trying to call a function from the proxy implementation.\r\n *\r\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\r\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\r\n *\r\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\r\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\r\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\r\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\r\n * implementation.\r\n *\r\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\r\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\r\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\r\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\r\n */\r\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\r\n    /**\r\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\r\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\r\n     */\r\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\r\n        _changeAdmin(admin_);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\r\n     *\r\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\r\n     * implementation provides a function with the same selector.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _getAdmin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\r\n     */\r\n    function _fallback() internal virtual override {\r\n        if (msg.sender == _getAdmin()) {\r\n            bytes memory ret;\r\n            bytes4 selector = msg.sig;\r\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\r\n                ret = _dispatchUpgradeTo();\r\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\r\n                ret = _dispatchUpgradeToAndCall();\r\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\r\n                ret = _dispatchChangeAdmin();\r\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\r\n                ret = _dispatchAdmin();\r\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\r\n                ret = _dispatchImplementation();\r\n            } else {\r\n                revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\r\n            }\r\n            assembly {\r\n                return(add(ret, 0x20), mload(ret))\r\n            }\r\n        } else {\r\n            super._fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\r\n     */\r\n    function _dispatchAdmin() private returns (bytes memory) {\r\n        _requireZeroValue();\r\n\r\n        address admin = _getAdmin();\r\n        return abi.encode(admin);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\r\n     */\r\n    function _dispatchImplementation() private returns (bytes memory) {\r\n        _requireZeroValue();\r\n\r\n        address implementation = _implementation();\r\n        return abi.encode(implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _dispatchChangeAdmin() private returns (bytes memory) {\r\n        _requireZeroValue();\r\n\r\n        address newAdmin = abi.decode(msg.data[4:], (address));\r\n        _changeAdmin(newAdmin);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy.\r\n     */\r\n    function _dispatchUpgradeTo() private returns (bytes memory) {\r\n        _requireZeroValue();\r\n\r\n        address newImplementation = abi.decode(msg.data[4:], (address));\r\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\r\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\r\n     * proxied contract.\r\n     */\r\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\r\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\r\n        _upgradeToAndCall(newImplementation, data, true);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     *\r\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\r\n     */\r\n    function _admin() internal view virtual returns (address) {\r\n        return _getAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\r\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\r\n     */\r\n    function _requireZeroValue() private {\r\n        require(msg.value == 0);\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./extensions/IERC20Metadata.sol\";\r\nimport \"../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\r\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```solidity\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\r\n * _Available since v4.9 for `string`, `bytes`._\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    struct StringSlot {\r\n        string value;\r\n    }\r\n\r\n    struct BytesSlot {\r\n        bytes value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\r\n     */\r\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\r\n     */\r\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\r\n     */\r\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/ContextUpgradeable.sol\";\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized != type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n"
      },
      "script/Deploy.s.sol": {
        "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"./DeployHelpers.s.sol\";\r\nimport \"../contracts/StakingContract.sol\";\r\nimport \"../contracts/LiquidityPool.sol\";\r\nimport \"openzeppelin/proxy/transparent/TransparentUpgradeableProxy.sol\";\r\nimport {UniswapV2Factory} from \"../contracts/UniswapV2Factory.sol\";\r\nimport {UniswapV2Router02} from \"../contracts/UniswapV2Router02.sol\";\r\nimport {WNRK} from \"../contracts/WNRK.sol\";\r\n\r\ncontract DeployScript is ScaffoldETHDeploy {\r\n    error InvalidPrivateKey(string);\r\n    error InvalidOwnerAddress();\r\n\r\n    // ERC20Mintable tokenA;\r\n    // ERC20Mintable tokenB;\r\n    // ERC20Mintable tokenC;\r\n    // ERC20Mintable tokenD;\r\n\r\n    StakingContract stakingContract;\r\n    LiquidityPool liquidityPool;\r\n    TransparentUpgradeableProxy liquidityPoolProxy;\r\n    TransparentUpgradeableProxy stakingContractProxy;\r\n    UniswapV2Factory factory;\r\n    UniswapV2Router02 router;\r\n    WNRK wnrk;\r\n\r\n    function run() external {\r\n        uint256 deployerPrivateKey = vm.envUint(\"ADMIN_PRIVATE_KEY\");\r\n        uint256 owner = vm.envUint(\"OWNER_ADDRESS\");\r\n        address admin = vm.addr(deployerPrivateKey);\r\n\r\n        if (deployerPrivateKey == 0) {\r\n            revert InvalidPrivateKey(\r\n                \"You don't have a deployer account. Make sure you have set DEPLOYER_PRIVATE_KEY in .env or use `yarn generate` to generate a new random account\"\r\n            );\r\n        }\r\n        if (owner == 0) {\r\n            revert InvalidOwnerAddress();\r\n        }\r\n        vm.startBroadcast(deployerPrivateKey);\r\n        address setter = vm.addr(deployerPrivateKey);\r\n        // _staking(admin, owner);\r\n        factory = new UniswapV2Factory(setter);\r\n        wnrk = new WNRK();\r\n        router = new UniswapV2Router02(address(factory), address(wnrk));\r\n\r\n        console.logString(\r\n            string.concat(\r\n                \"factory contract deployed at: \",\r\n                vm.toString(address(factory))\r\n            )\r\n        );\r\n        console.logString(\r\n            string.concat(\r\n                \"wnrk contract deployed at: \",\r\n                vm.toString(address(wnrk))\r\n            )\r\n        );\r\n        console.logString(\r\n            string.concat(\r\n                \"router contract deployed at: \",\r\n                vm.toString(address(router))\r\n            )\r\n        );\r\n        vm.stopBroadcast();\r\n        exportDeployments();\r\n    }\r\n\r\n    function test() public {}\r\n\r\n    // function _uniswapV2(address setter) internal {\r\n\r\n    // }\r\n\r\n    function _staking(address admin, uint256 owner) internal {\r\n        liquidityPool = new LiquidityPool();\r\n\r\n        liquidityPoolProxy = new TransparentUpgradeableProxy(\r\n            address(liquidityPool),\r\n            admin,\r\n            abi.encodeWithSignature(\r\n                \"initialize(address)\",\r\n                address(uint160(owner))\r\n            )\r\n        );\r\n\r\n        stakingContract = new StakingContract();\r\n\r\n        /**\r\n         * _apy = 18%\r\n         * minimum stake amount =  1 NRK\r\n         * frequency = 31536000\r\n         * liquidity pool contract address = address(liquidityPoolProxy)\r\n         */\r\n\r\n        stakingContractProxy = new TransparentUpgradeableProxy(\r\n            address(stakingContract),\r\n            admin,\r\n            abi.encodeWithSignature(\r\n                \"initialize(uint16,uint256,uint256,address,address)\",\r\n                18,\r\n                1000000000000000000,\r\n                31536000,\r\n                address(liquidityPoolProxy),\r\n                address(uint160(owner))\r\n            )\r\n        );\r\n\r\n        console.logString(\r\n            string.concat(\r\n                \"staking contract deployed at: \",\r\n                vm.toString(address(stakingContractProxy))\r\n            )\r\n        );\r\n        console.logString(\r\n            string.concat(\r\n                \"balance of liquidity : \",\r\n                vm.toString(address(liquidityPoolProxy).balance)\r\n            )\r\n        );\r\n        console.logString(\r\n            string.concat(\r\n                \"liquidity pool contract at: \",\r\n                vm.toString(address(liquidityPoolProxy))\r\n            )\r\n        );\r\n    }\r\n}\r\n"
      },
      "script/DeployHelpers.s.sol": {
        "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"forge-std/Script.sol\";\r\nimport \"forge-std/Vm.sol\";\r\n\r\ncontract ScaffoldETHDeploy is Script {\r\n    error InvalidChain();\r\n\r\n    struct Deployment {\r\n        string name;\r\n        address addr;\r\n    }\r\n\r\n    string root;\r\n    string path;\r\n    Deployment[] public deployments;\r\n\r\n    function setupLocalhostEnv()\r\n        internal\r\n        returns (uint256 localhostPrivateKey)\r\n    {\r\n        if (block.chainid == 31337) {\r\n            root = vm.projectRoot();\r\n            path = string.concat(root, \"/localhost.json\");\r\n            string memory json = vm.readFile(path);\r\n            bytes memory mnemonicBytes = vm.parseJson(json, \".wallet.mnemonic\");\r\n            string memory mnemonic = abi.decode(mnemonicBytes, (string));\r\n            return vm.deriveKey(mnemonic, 0);\r\n        } else {\r\n            return vm.envUint(\"DEPLOYER_PRIVATE_KEY\");\r\n        }\r\n    }\r\n\r\n    function exportDeployments() internal {\r\n        // fetch already existing contracts\r\n        root = vm.projectRoot();\r\n        path = string.concat(root, \"/deployments/\");\r\n        string memory chainIdStr = vm.toString(block.chainid);\r\n        path = string.concat(path, string.concat(chainIdStr, \".json\"));\r\n\r\n        string memory jsonWrite;\r\n\r\n        uint256 len = deployments.length;\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            vm.serializeString(\r\n                jsonWrite,\r\n                vm.toString(deployments[i].addr),\r\n                deployments[i].name\r\n            );\r\n        }\r\n\r\n        string memory chainName;\r\n\r\n        try this.getChain() returns (Chain memory chain) {\r\n            chainName = chain.name;\r\n        } catch {\r\n            chainName = findChainName();\r\n        }\r\n        jsonWrite = vm.serializeString(jsonWrite, \"networkName\", chainName);\r\n        vm.writeJson(jsonWrite, path);\r\n    }\r\n\r\n    function getChain() public returns (Chain memory) {\r\n        return getChain(block.chainid);\r\n    }\r\n\r\n    function findChainName() public returns (string memory) {\r\n        uint256 thisChainId = block.chainid;\r\n        string[2][] memory allRpcUrls = vm.rpcUrls();\r\n        for (uint256 i = 0; i < allRpcUrls.length; i++) {\r\n            try vm.createSelectFork(allRpcUrls[i][1]) {\r\n                if (block.chainid == thisChainId) {\r\n                    return allRpcUrls[i][0];\r\n                }\r\n            } catch {\r\n                continue;\r\n            }\r\n        }\r\n        revert InvalidChain();\r\n    }\r\n}\r\n"
      }
    },
    "settings": {
      "remappings": [
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "contracts/ILiquidityPool.sol": {
          "*": []
        },
        "contracts/LiquidityPool.sol": {
          "*": []
        },
        "contracts/StakingContract.sol": {
          "*": []
        },
        "contracts/UniswapV2ERC20.sol": {
          "*": []
        },
        "contracts/UniswapV2Factory.sol": {
          "*": []
        },
        "contracts/UniswapV2Pair.sol": {
          "*": []
        },
        "contracts/UniswapV2Router02.sol": {
          "*": []
        },
        "contracts/WNRK.sol": {
          "*": []
        },
        "contracts/interfaces/IERC20.sol": {
          "*": []
        },
        "contracts/interfaces/IUniswapV2Callee.sol": {
          "*": []
        },
        "contracts/interfaces/IUniswapV2ERC20.sol": {
          "*": []
        },
        "contracts/interfaces/IUniswapV2Factory.sol": {
          "*": []
        },
        "contracts/interfaces/IUniswapV2Pair.sol": {
          "*": []
        },
        "contracts/interfaces/IUniswapV2Router01.sol": {
          "*": []
        },
        "contracts/interfaces/IUniswapV2Router02.sol": {
          "*": []
        },
        "contracts/interfaces/IWETH.sol": {
          "*": []
        },
        "contracts/libraries/Math.sol": {
          "*": []
        },
        "contracts/libraries/SafeMath.sol": {
          "*": []
        },
        "contracts/libraries/TransferHelper.sol": {
          "*": []
        },
        "contracts/libraries/UQ112x112.sol": {
          "*": []
        },
        "contracts/libraries/UniswapV2Library.sol": {
          "*": []
        },
        "lib/forge-std/src/Base.sol": {
          "*": []
        },
        "lib/forge-std/src/Script.sol": {
          "*": []
        },
        "lib/forge-std/src/StdChains.sol": {
          "*": []
        },
        "lib/forge-std/src/StdCheats.sol": {
          "*": []
        },
        "lib/forge-std/src/StdJson.sol": {
          "*": []
        },
        "lib/forge-std/src/StdMath.sol": {
          "*": []
        },
        "lib/forge-std/src/StdStorage.sol": {
          "*": []
        },
        "lib/forge-std/src/StdStyle.sol": {
          "*": []
        },
        "lib/forge-std/src/StdUtils.sol": {
          "*": []
        },
        "lib/forge-std/src/Vm.sol": {
          "*": []
        },
        "lib/forge-std/src/console.sol": {
          "*": []
        },
        "lib/forge-std/src/console2.sol": {
          "*": []
        },
        "lib/forge-std/src/interfaces/IMulticall3.sol": {
          "*": []
        },
        "lib/forge-std/src/safeconsole.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {
          "*": []
        },
        "script/Deploy.s.sol": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        },
        "script/DeployHelpers.s.sol": {
          "*": []
        }
      },
      "evmVersion": "paris",
      "libraries": {}
    }
  },
  "id": "232b935f283e27ddf155f88b57815768",
  "output": {
    "errors": [
      {
        "sourceLocation": {
          "file": "contracts/UniswapV2ERC20.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/UniswapV2ERC20.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/UniswapV2Factory.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/UniswapV2Factory.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/UniswapV2Pair.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/UniswapV2Pair.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/UniswapV2Router02.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/UniswapV2Router02.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/interfaces/IERC20.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IERC20.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/interfaces/IUniswapV2Callee.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IUniswapV2Callee.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/interfaces/IUniswapV2ERC20.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IUniswapV2ERC20.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/interfaces/IUniswapV2Factory.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IUniswapV2Factory.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/interfaces/IUniswapV2Pair.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IUniswapV2Pair.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/interfaces/IUniswapV2Router01.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IUniswapV2Router01.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/interfaces/IUniswapV2Router02.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IUniswapV2Router02.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/interfaces/IWETH.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IWETH.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/libraries/Math.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/libraries/Math.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/libraries/SafeMath.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/libraries/SafeMath.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/libraries/UQ112x112.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/libraries/UQ112x112.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "contracts/libraries/UniswapV2Library.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/libraries/UniswapV2Library.sol\n\n"
      },
      {
        "sourceLocation": {
          "file": "script/Deploy.s.sol",
          "start": 1106,
          "end": 1119
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "2072",
        "message": "Unused local variable.",
        "formattedMessage": "Warning: Unused local variable.\n  --> script/Deploy.s.sol:32:9:\n   |\n32 |         address admin = vm.addr(deployerPrivateKey);\n   |         ^^^^^^^^^^^^^\n\n"
      },
      {
        "sourceLocation": {
          "file": "script/Deploy.s.sol",
          "start": 440,
          "end": 4152
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "5574",
        "message": "Contract code size is 44607 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.",
        "formattedMessage": "Warning: Contract code size is 44607 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n  --> script/Deploy.s.sol:12:1:\n   |\n12 | contract DeployScript is ScaffoldETHDeploy {\n   | ^ (Relevant source part starts here and spans across multiple lines).\n\n"
      }
    ],
    "sources": {
      "contracts/ILiquidityPool.sol": {
        "id": 0,
        "ast": {}
      },
      "contracts/LiquidityPool.sol": {
        "id": 1,
        "ast": {}
      },
      "contracts/StakingContract.sol": {
        "id": 2,
        "ast": {}
      },
      "contracts/UniswapV2ERC20.sol": {
        "id": 3,
        "ast": {}
      },
      "contracts/UniswapV2Factory.sol": {
        "id": 4,
        "ast": {}
      },
      "contracts/UniswapV2Pair.sol": {
        "id": 5,
        "ast": {}
      },
      "contracts/UniswapV2Router02.sol": {
        "id": 6,
        "ast": {}
      },
      "contracts/WNRK.sol": {
        "id": 7,
        "ast": {}
      },
      "contracts/interfaces/IERC20.sol": {
        "id": 8,
        "ast": {}
      },
      "contracts/interfaces/IUniswapV2Callee.sol": {
        "id": 9,
        "ast": {}
      },
      "contracts/interfaces/IUniswapV2ERC20.sol": {
        "id": 10,
        "ast": {}
      },
      "contracts/interfaces/IUniswapV2Factory.sol": {
        "id": 11,
        "ast": {}
      },
      "contracts/interfaces/IUniswapV2Pair.sol": {
        "id": 12,
        "ast": {}
      },
      "contracts/interfaces/IUniswapV2Router01.sol": {
        "id": 13,
        "ast": {}
      },
      "contracts/interfaces/IUniswapV2Router02.sol": {
        "id": 14,
        "ast": {}
      },
      "contracts/interfaces/IWETH.sol": {
        "id": 15,
        "ast": {}
      },
      "contracts/libraries/Math.sol": {
        "id": 16,
        "ast": {}
      },
      "contracts/libraries/SafeMath.sol": {
        "id": 17,
        "ast": {}
      },
      "contracts/libraries/TransferHelper.sol": {
        "id": 18,
        "ast": {}
      },
      "contracts/libraries/UQ112x112.sol": {
        "id": 19,
        "ast": {}
      },
      "contracts/libraries/UniswapV2Library.sol": {
        "id": 20,
        "ast": {}
      },
      "lib/forge-std/src/Base.sol": {
        "id": 21,
        "ast": {}
      },
      "lib/forge-std/src/Script.sol": {
        "id": 22,
        "ast": {}
      },
      "lib/forge-std/src/StdChains.sol": {
        "id": 23,
        "ast": {}
      },
      "lib/forge-std/src/StdCheats.sol": {
        "id": 24,
        "ast": {}
      },
      "lib/forge-std/src/StdJson.sol": {
        "id": 25,
        "ast": {}
      },
      "lib/forge-std/src/StdMath.sol": {
        "id": 26,
        "ast": {}
      },
      "lib/forge-std/src/StdStorage.sol": {
        "id": 27,
        "ast": {}
      },
      "lib/forge-std/src/StdStyle.sol": {
        "id": 28,
        "ast": {}
      },
      "lib/forge-std/src/StdUtils.sol": {
        "id": 29,
        "ast": {}
      },
      "lib/forge-std/src/Vm.sol": {
        "id": 30,
        "ast": {}
      },
      "lib/forge-std/src/console.sol": {
        "id": 31,
        "ast": {}
      },
      "lib/forge-std/src/console2.sol": {
        "id": 32,
        "ast": {}
      },
      "lib/forge-std/src/interfaces/IMulticall3.sol": {
        "id": 33,
        "ast": {}
      },
      "lib/forge-std/src/safeconsole.sol": {
        "id": 34,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
        "id": 35,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "id": 36,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "id": 37,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "id": 38,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "id": 39,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "id": 40,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
        "id": 41,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "id": 42,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "id": 43,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "id": 44,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
        "id": 45,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
        "id": 46,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "id": 47,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "id": 48,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "id": 49,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "id": 50,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "id": 51,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "id": 52,
        "ast": {}
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol": {
        "id": 53,
        "ast": {}
      },
      "script/Deploy.s.sol": {
        "id": 54,
        "ast": {
          "absolutePath": "script/Deploy.s.sol",
          "id": 49808,
          "exportedSymbols": {
            "Address": [
              49046
            ],
            "AddressUpgradeable": [
              47162
            ],
            "ContextUpgradeable": [
              47204
            ],
            "DeployScript": [
              49807
            ],
            "ERC1967Proxy": [
              47272
            ],
            "ERC1967Upgrade": [
              47576
            ],
            "IBeacon": [
              47638
            ],
            "IERC1822Proxiable": [
              47235
            ],
            "IERC1967": [
              47225
            ],
            "ILiquidityPool": [
              9
            ],
            "ITransparentUpgradeableProxy": [
              47672
            ],
            "Initializable": [
              46832
            ],
            "LiquidityPool": [
              296
            ],
            "OwnableUpgradeable": [
              46663
            ],
            "Proxy": [
              47628
            ],
            "ReentrancyGuard": [
              48026
            ],
            "SafeMath": [
              49490
            ],
            "ScaffoldETHDeploy": [
              50088
            ],
            "Script": [
              7804
            ],
            "ScriptBase": [
              7765
            ],
            "StakingContract": [
              2340
            ],
            "StdChains": [
              8497
            ],
            "StdCheatsSafe": [
              10551
            ],
            "StdStorage": [
              12065
            ],
            "StdStyle": [
              14729
            ],
            "StdUtils": [
              15577
            ],
            "StorageSlot": [
              49178
            ],
            "TransparentUpgradeableProxy": [
              47961
            ],
            "UniswapV2Factory": [
              2929
            ],
            "UniswapV2Router02": [
              6037
            ],
            "Vm": [
              17104
            ],
            "VmSafe": [
              16632
            ],
            "WNRK": [
              6109
            ],
            "console": [
              25168
            ],
            "console2": [
              33293
            ],
            "safeconsole": [
              46531
            ],
            "stdJson": [
              11891
            ],
            "stdMath": [
              12033
            ],
            "stdStorageSafe": [
              12957
            ]
          },
          "nodeType": "SourceUnit",
          "src": "32:4122:54",
          "nodes": [
            {
              "id": 49492,
              "nodeType": "PragmaDirective",
              "src": "32:24:54",
              "nodes": [],
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".19"
              ]
            },
            {
              "id": 49493,
              "nodeType": "ImportDirective",
              "src": "60:31:54",
              "nodes": [],
              "absolutePath": "script/DeployHelpers.s.sol",
              "file": "./DeployHelpers.s.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 49808,
              "sourceUnit": 50089,
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "id": 49494,
              "nodeType": "ImportDirective",
              "src": "93:42:54",
              "nodes": [],
              "absolutePath": "contracts/StakingContract.sol",
              "file": "../contracts/StakingContract.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 49808,
              "sourceUnit": 2341,
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "id": 49495,
              "nodeType": "ImportDirective",
              "src": "137:40:54",
              "nodes": [],
              "absolutePath": "contracts/LiquidityPool.sol",
              "file": "../contracts/LiquidityPool.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 49808,
              "sourceUnit": 297,
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "id": 49496,
              "nodeType": "ImportDirective",
              "src": "179:72:54",
              "nodes": [],
              "absolutePath": "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol",
              "file": "openzeppelin/proxy/transparent/TransparentUpgradeableProxy.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 49808,
              "sourceUnit": 47962,
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "id": 49498,
              "nodeType": "ImportDirective",
              "src": "253:67:54",
              "nodes": [],
              "absolutePath": "contracts/UniswapV2Factory.sol",
              "file": "../contracts/UniswapV2Factory.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 49808,
              "sourceUnit": 2930,
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 49497,
                    "name": "UniswapV2Factory",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2929,
                    "src": "261:16:54",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "id": 49500,
              "nodeType": "ImportDirective",
              "src": "322:69:54",
              "nodes": [],
              "absolutePath": "contracts/UniswapV2Router02.sol",
              "file": "../contracts/UniswapV2Router02.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 49808,
              "sourceUnit": 6038,
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 49499,
                    "name": "UniswapV2Router02",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6037,
                    "src": "330:17:54",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "id": 49502,
              "nodeType": "ImportDirective",
              "src": "393:43:54",
              "nodes": [],
              "absolutePath": "contracts/WNRK.sol",
              "file": "../contracts/WNRK.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 49808,
              "sourceUnit": 6110,
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 49501,
                    "name": "WNRK",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6109,
                    "src": "401:4:54",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "id": 49807,
              "nodeType": "ContractDefinition",
              "src": "440:3712:54",
              "nodes": [
                {
                  "id": 49508,
                  "nodeType": "ErrorDefinition",
                  "src": "490:32:54",
                  "nodes": [],
                  "errorSelector": "fd535ce1",
                  "name": "InvalidPrivateKey",
                  "nameLocation": "496:17:54",
                  "parameters": {
                    "id": 49507,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 49506,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 49508,
                        "src": "514:6:54",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 49505,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "514:6:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "513:8:54"
                  }
                },
                {
                  "id": 49510,
                  "nodeType": "ErrorDefinition",
                  "src": "528:28:54",
                  "nodes": [],
                  "errorSelector": "d924e5f4",
                  "name": "InvalidOwnerAddress",
                  "nameLocation": "534:19:54",
                  "parameters": {
                    "id": 49509,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "553:2:54"
                  }
                },
                {
                  "id": 49513,
                  "nodeType": "VariableDeclaration",
                  "src": "686:31:54",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "stakingContract",
                  "nameLocation": "702:15:54",
                  "scope": 49807,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_StakingContract_$2340",
                    "typeString": "contract StakingContract"
                  },
                  "typeName": {
                    "id": 49512,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49511,
                      "name": "StakingContract",
                      "nameLocations": [
                        "686:15:54"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2340,
                      "src": "686:15:54"
                    },
                    "referencedDeclaration": 2340,
                    "src": "686:15:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_StakingContract_$2340",
                      "typeString": "contract StakingContract"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 49516,
                  "nodeType": "VariableDeclaration",
                  "src": "724:27:54",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "liquidityPool",
                  "nameLocation": "738:13:54",
                  "scope": 49807,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LiquidityPool_$296",
                    "typeString": "contract LiquidityPool"
                  },
                  "typeName": {
                    "id": 49515,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49514,
                      "name": "LiquidityPool",
                      "nameLocations": [
                        "724:13:54"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 296,
                      "src": "724:13:54"
                    },
                    "referencedDeclaration": 296,
                    "src": "724:13:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LiquidityPool_$296",
                      "typeString": "contract LiquidityPool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 49519,
                  "nodeType": "VariableDeclaration",
                  "src": "758:46:54",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "liquidityPoolProxy",
                  "nameLocation": "786:18:54",
                  "scope": 49807,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                    "typeString": "contract TransparentUpgradeableProxy"
                  },
                  "typeName": {
                    "id": 49518,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49517,
                      "name": "TransparentUpgradeableProxy",
                      "nameLocations": [
                        "758:27:54"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 47961,
                      "src": "758:27:54"
                    },
                    "referencedDeclaration": 47961,
                    "src": "758:27:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                      "typeString": "contract TransparentUpgradeableProxy"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 49522,
                  "nodeType": "VariableDeclaration",
                  "src": "811:48:54",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "stakingContractProxy",
                  "nameLocation": "839:20:54",
                  "scope": 49807,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                    "typeString": "contract TransparentUpgradeableProxy"
                  },
                  "typeName": {
                    "id": 49521,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49520,
                      "name": "TransparentUpgradeableProxy",
                      "nameLocations": [
                        "811:27:54"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 47961,
                      "src": "811:27:54"
                    },
                    "referencedDeclaration": 47961,
                    "src": "811:27:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                      "typeString": "contract TransparentUpgradeableProxy"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 49525,
                  "nodeType": "VariableDeclaration",
                  "src": "866:24:54",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "factory",
                  "nameLocation": "883:7:54",
                  "scope": 49807,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                    "typeString": "contract UniswapV2Factory"
                  },
                  "typeName": {
                    "id": 49524,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49523,
                      "name": "UniswapV2Factory",
                      "nameLocations": [
                        "866:16:54"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2929,
                      "src": "866:16:54"
                    },
                    "referencedDeclaration": 2929,
                    "src": "866:16:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                      "typeString": "contract UniswapV2Factory"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 49528,
                  "nodeType": "VariableDeclaration",
                  "src": "897:24:54",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "router",
                  "nameLocation": "915:6:54",
                  "scope": 49807,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_UniswapV2Router02_$6037",
                    "typeString": "contract UniswapV2Router02"
                  },
                  "typeName": {
                    "id": 49527,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49526,
                      "name": "UniswapV2Router02",
                      "nameLocations": [
                        "897:17:54"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6037,
                      "src": "897:17:54"
                    },
                    "referencedDeclaration": 6037,
                    "src": "897:17:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_UniswapV2Router02_$6037",
                      "typeString": "contract UniswapV2Router02"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 49531,
                  "nodeType": "VariableDeclaration",
                  "src": "928:9:54",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "wnrk",
                  "nameLocation": "933:4:54",
                  "scope": 49807,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_WNRK_$6109",
                    "typeString": "contract WNRK"
                  },
                  "typeName": {
                    "id": 49530,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49529,
                      "name": "WNRK",
                      "nameLocations": [
                        "928:4:54"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 6109,
                      "src": "928:4:54"
                    },
                    "referencedDeclaration": 6109,
                    "src": "928:4:54",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_WNRK_$6109",
                      "typeString": "contract WNRK"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 49675,
                  "nodeType": "FunctionDefinition",
                  "src": "946:1448:54",
                  "nodes": [],
                  "body": {
                    "id": 49674,
                    "nodeType": "Block",
                    "src": "970:1424:54",
                    "nodes": [],
                    "statements": [
                      {
                        "assignments": [
                          49535
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 49535,
                            "mutability": "mutable",
                            "name": "deployerPrivateKey",
                            "nameLocation": "989:18:54",
                            "nodeType": "VariableDeclaration",
                            "scope": 49674,
                            "src": "981:26:54",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 49534,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "981:7:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 49540,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "41444d494e5f505249564154455f4b4559",
                              "id": 49538,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1021:19:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0f9b2418403e0efe0b594cd5a0bbad664afce7e82ee227d7bdd13366fe6c27b1",
                                "typeString": "literal_string \"ADMIN_PRIVATE_KEY\""
                              },
                              "value": "ADMIN_PRIVATE_KEY"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_0f9b2418403e0efe0b594cd5a0bbad664afce7e82ee227d7bdd13366fe6c27b1",
                                "typeString": "literal_string \"ADMIN_PRIVATE_KEY\""
                              }
                            ],
                            "expression": {
                              "id": 49536,
                              "name": "vm",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7749,
                              "src": "1010:2:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Vm_$17104",
                                "typeString": "contract Vm"
                              }
                            },
                            "id": 49537,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1013:7:54",
                            "memberName": "envUint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 15690,
                            "src": "1010:10:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (string memory) view external returns (uint256)"
                            }
                          },
                          "id": 49539,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1010:31:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "981:60:54"
                      },
                      {
                        "assignments": [
                          49542
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 49542,
                            "mutability": "mutable",
                            "name": "owner",
                            "nameLocation": "1060:5:54",
                            "nodeType": "VariableDeclaration",
                            "scope": 49674,
                            "src": "1052:13:54",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 49541,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1052:7:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 49547,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "4f574e45525f41444452455353",
                              "id": 49545,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1079:15:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_126dc7d4763b2b2c23a60aa98a5d472584b4ae417eca2b2710f81792900a6ecc",
                                "typeString": "literal_string \"OWNER_ADDRESS\""
                              },
                              "value": "OWNER_ADDRESS"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_126dc7d4763b2b2c23a60aa98a5d472584b4ae417eca2b2710f81792900a6ecc",
                                "typeString": "literal_string \"OWNER_ADDRESS\""
                              }
                            ],
                            "expression": {
                              "id": 49543,
                              "name": "vm",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7749,
                              "src": "1068:2:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Vm_$17104",
                                "typeString": "contract Vm"
                              }
                            },
                            "id": 49544,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1071:7:54",
                            "memberName": "envUint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 15690,
                            "src": "1068:10:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (string memory) view external returns (uint256)"
                            }
                          },
                          "id": 49546,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1068:27:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1052:43:54"
                      },
                      {
                        "assignments": [
                          49549
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 49549,
                            "mutability": "mutable",
                            "name": "admin",
                            "nameLocation": "1114:5:54",
                            "nodeType": "VariableDeclaration",
                            "scope": 49674,
                            "src": "1106:13:54",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 49548,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1106:7:54",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 49554,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 49552,
                              "name": "deployerPrivateKey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 49535,
                              "src": "1130:18:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 49550,
                              "name": "vm",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7749,
                              "src": "1122:2:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Vm_$17104",
                                "typeString": "contract Vm"
                              }
                            },
                            "id": 49551,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1125:4:54",
                            "memberName": "addr",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 15654,
                            "src": "1122:7:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_pure$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) pure external returns (address)"
                            }
                          },
                          "id": 49553,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1122:27:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1106:43:54"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 49557,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 49555,
                            "name": "deployerPrivateKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49535,
                            "src": "1166:18:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 49556,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1188:1:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1166:23:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 49563,
                        "nodeType": "IfStatement",
                        "src": "1162:258:54",
                        "trueBody": {
                          "id": 49562,
                          "nodeType": "Block",
                          "src": "1191:229:54",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "hexValue": "596f7520646f6e277420686176652061206465706c6f796572206163636f756e742e204d616b65207375726520796f75206861766520736574204445504c4f5945525f505249564154455f4b455920696e202e656e76206f722075736520607961726e2067656e65726174656020746f2067656e65726174652061206e65772072616e646f6d206163636f756e74",
                                    "id": 49559,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1249:144:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_2016869337567cea9dbdd5c3e7389f812a72b7d8339efb4f14ead7b7cb06dc46",
                                      "typeString": "literal_string \"You don't have a deployer account. Make sure you have set DEPLOYER_PRIVATE_KEY in .env or use `yarn generate` to generate a new random account\""
                                    },
                                    "value": "You don't have a deployer account. Make sure you have set DEPLOYER_PRIVATE_KEY in .env or use `yarn generate` to generate a new random account"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_2016869337567cea9dbdd5c3e7389f812a72b7d8339efb4f14ead7b7cb06dc46",
                                      "typeString": "literal_string \"You don't have a deployer account. Make sure you have set DEPLOYER_PRIVATE_KEY in .env or use `yarn generate` to generate a new random account\""
                                    }
                                  ],
                                  "id": 49558,
                                  "name": "InvalidPrivateKey",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 49508,
                                  "src": "1213:17:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (string memory) pure"
                                  }
                                },
                                "id": 49560,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1213:195:54",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 49561,
                              "nodeType": "RevertStatement",
                              "src": "1206:202:54"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 49566,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 49564,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49542,
                            "src": "1434:5:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 49565,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1443:1:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1434:10:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 49571,
                        "nodeType": "IfStatement",
                        "src": "1430:71:54",
                        "trueBody": {
                          "id": 49570,
                          "nodeType": "Block",
                          "src": "1446:55:54",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 49567,
                                  "name": "InvalidOwnerAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 49510,
                                  "src": "1468:19:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                    "typeString": "function () pure"
                                  }
                                },
                                "id": 49568,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1468:21:54",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 49569,
                              "nodeType": "RevertStatement",
                              "src": "1461:28:54"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 49575,
                              "name": "deployerPrivateKey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 49535,
                              "src": "1529:18:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 49572,
                              "name": "vm",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7749,
                              "src": "1511:2:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Vm_$17104",
                                "typeString": "contract Vm"
                              }
                            },
                            "id": 49574,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1514:14:54",
                            "memberName": "startBroadcast",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 16017,
                            "src": "1511:17:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) external"
                            }
                          },
                          "id": 49576,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1511:37:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 49577,
                        "nodeType": "ExpressionStatement",
                        "src": "1511:37:54"
                      },
                      {
                        "assignments": [
                          49579
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 49579,
                            "mutability": "mutable",
                            "name": "setter",
                            "nameLocation": "1567:6:54",
                            "nodeType": "VariableDeclaration",
                            "scope": 49674,
                            "src": "1559:14:54",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 49578,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1559:7:54",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 49584,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 49582,
                              "name": "deployerPrivateKey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 49535,
                              "src": "1584:18:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 49580,
                              "name": "vm",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7749,
                              "src": "1576:2:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Vm_$17104",
                                "typeString": "contract Vm"
                              }
                            },
                            "id": 49581,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1579:4:54",
                            "memberName": "addr",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 15654,
                            "src": "1576:7:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_pure$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) pure external returns (address)"
                            }
                          },
                          "id": 49583,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1576:27:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1559:44:54"
                      },
                      {
                        "expression": {
                          "id": 49591,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 49585,
                            "name": "factory",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49525,
                            "src": "1650:7:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                              "typeString": "contract UniswapV2Factory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 49589,
                                "name": "setter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 49579,
                                "src": "1681:6:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 49588,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "1660:20:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_UniswapV2Factory_$2929_$",
                                "typeString": "function (address) returns (contract UniswapV2Factory)"
                              },
                              "typeName": {
                                "id": 49587,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 49586,
                                  "name": "UniswapV2Factory",
                                  "nameLocations": [
                                    "1664:16:54"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 2929,
                                  "src": "1664:16:54"
                                },
                                "referencedDeclaration": 2929,
                                "src": "1664:16:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                                  "typeString": "contract UniswapV2Factory"
                                }
                              }
                            },
                            "id": 49590,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1660:28:54",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                              "typeString": "contract UniswapV2Factory"
                            }
                          },
                          "src": "1650:38:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                            "typeString": "contract UniswapV2Factory"
                          }
                        },
                        "id": 49592,
                        "nodeType": "ExpressionStatement",
                        "src": "1650:38:54"
                      },
                      {
                        "expression": {
                          "id": 49598,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 49593,
                            "name": "wnrk",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49531,
                            "src": "1699:4:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_WNRK_$6109",
                              "typeString": "contract WNRK"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 49596,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "1706:8:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_WNRK_$6109_$",
                                "typeString": "function () returns (contract WNRK)"
                              },
                              "typeName": {
                                "id": 49595,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 49594,
                                  "name": "WNRK",
                                  "nameLocations": [
                                    "1710:4:54"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 6109,
                                  "src": "1710:4:54"
                                },
                                "referencedDeclaration": 6109,
                                "src": "1710:4:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_WNRK_$6109",
                                  "typeString": "contract WNRK"
                                }
                              }
                            },
                            "id": 49597,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1706:10:54",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_WNRK_$6109",
                              "typeString": "contract WNRK"
                            }
                          },
                          "src": "1699:17:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_WNRK_$6109",
                            "typeString": "contract WNRK"
                          }
                        },
                        "id": 49599,
                        "nodeType": "ExpressionStatement",
                        "src": "1699:17:54"
                      },
                      {
                        "expression": {
                          "id": 49613,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 49600,
                            "name": "router",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49528,
                            "src": "1727:6:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_UniswapV2Router02_$6037",
                              "typeString": "contract UniswapV2Router02"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 49606,
                                    "name": "factory",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 49525,
                                    "src": "1766:7:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                                      "typeString": "contract UniswapV2Factory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                                      "typeString": "contract UniswapV2Factory"
                                    }
                                  ],
                                  "id": 49605,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1758:7:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 49604,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1758:7:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49607,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1758:16:54",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 49610,
                                    "name": "wnrk",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 49531,
                                    "src": "1784:4:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_WNRK_$6109",
                                      "typeString": "contract WNRK"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_WNRK_$6109",
                                      "typeString": "contract WNRK"
                                    }
                                  ],
                                  "id": 49609,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1776:7:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 49608,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1776:7:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49611,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1776:13:54",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 49603,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "1736:21:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$_t_address_$_t_address_$returns$_t_contract$_UniswapV2Router02_$6037_$",
                                "typeString": "function (address,address) returns (contract UniswapV2Router02)"
                              },
                              "typeName": {
                                "id": 49602,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 49601,
                                  "name": "UniswapV2Router02",
                                  "nameLocations": [
                                    "1740:17:54"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 6037,
                                  "src": "1740:17:54"
                                },
                                "referencedDeclaration": 6037,
                                "src": "1740:17:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_UniswapV2Router02_$6037",
                                  "typeString": "contract UniswapV2Router02"
                                }
                              }
                            },
                            "id": 49612,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1736:54:54",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_UniswapV2Router02_$6037",
                              "typeString": "contract UniswapV2Router02"
                            }
                          },
                          "src": "1727:63:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_UniswapV2Router02_$6037",
                            "typeString": "contract UniswapV2Router02"
                          }
                        },
                        "id": 49614,
                        "nodeType": "ExpressionStatement",
                        "src": "1727:63:54"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "666163746f727920636f6e7472616374206465706c6f7965642061743a20",
                                  "id": 49621,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1867:32:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_47f4e387a3e3a1bf5441a11471d96bb40e79f7cd37d0651a9e52162fbbec1fcf",
                                    "typeString": "literal_string \"factory contract deployed at: \""
                                  },
                                  "value": "factory contract deployed at: "
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 49626,
                                          "name": "factory",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 49525,
                                          "src": "1938:7:54",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                                            "typeString": "contract UniswapV2Factory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_UniswapV2Factory_$2929",
                                            "typeString": "contract UniswapV2Factory"
                                          }
                                        ],
                                        "id": 49625,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "1930:7:54",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 49624,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "1930:7:54",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 49627,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1930:16:54",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 49622,
                                      "name": "vm",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 7749,
                                      "src": "1918:2:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Vm_$17104",
                                        "typeString": "contract Vm"
                                      }
                                    },
                                    "id": 49623,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "1921:8:54",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 16146,
                                    "src": "1918:11:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (address) pure external returns (string memory)"
                                    }
                                  },
                                  "id": 49628,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1918:29:54",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_47f4e387a3e3a1bf5441a11471d96bb40e79f7cd37d0651a9e52162fbbec1fcf",
                                    "typeString": "literal_string \"factory contract deployed at: \""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 49619,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1835:6:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 49618,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1835:6:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49620,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1842:6:54",
                                "memberName": "concat",
                                "nodeType": "MemberAccess",
                                "src": "1835:13:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () pure returns (string memory)"
                                }
                              },
                              "id": 49629,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1835:127:54",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 49615,
                              "name": "console",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25168,
                              "src": "1803:7:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_console_$25168_$",
                                "typeString": "type(library console)"
                              }
                            },
                            "id": 49617,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1811:9:54",
                            "memberName": "logString",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17181,
                            "src": "1803:17:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) view"
                            }
                          },
                          "id": 49630,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1803:170:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 49631,
                        "nodeType": "ExpressionStatement",
                        "src": "1803:170:54"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "776e726b20636f6e7472616374206465706c6f7965642061743a20",
                                  "id": 49638,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2048:29:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_06bc3ef3eee4fdcce3195cef9d74d258aba0896341bc2c935480fe386e382b3e",
                                    "typeString": "literal_string \"wnrk contract deployed at: \""
                                  },
                                  "value": "wnrk contract deployed at: "
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 49643,
                                          "name": "wnrk",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 49531,
                                          "src": "2116:4:54",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_WNRK_$6109",
                                            "typeString": "contract WNRK"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_WNRK_$6109",
                                            "typeString": "contract WNRK"
                                          }
                                        ],
                                        "id": 49642,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "2108:7:54",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 49641,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "2108:7:54",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 49644,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2108:13:54",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 49639,
                                      "name": "vm",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 7749,
                                      "src": "2096:2:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Vm_$17104",
                                        "typeString": "contract Vm"
                                      }
                                    },
                                    "id": 49640,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2099:8:54",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 16146,
                                    "src": "2096:11:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (address) pure external returns (string memory)"
                                    }
                                  },
                                  "id": 49645,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2096:26:54",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_06bc3ef3eee4fdcce3195cef9d74d258aba0896341bc2c935480fe386e382b3e",
                                    "typeString": "literal_string \"wnrk contract deployed at: \""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 49636,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2016:6:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 49635,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2016:6:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49637,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2023:6:54",
                                "memberName": "concat",
                                "nodeType": "MemberAccess",
                                "src": "2016:13:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () pure returns (string memory)"
                                }
                              },
                              "id": 49646,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2016:121:54",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 49632,
                              "name": "console",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25168,
                              "src": "1984:7:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_console_$25168_$",
                                "typeString": "type(library console)"
                              }
                            },
                            "id": 49634,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1992:9:54",
                            "memberName": "logString",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17181,
                            "src": "1984:17:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) view"
                            }
                          },
                          "id": 49647,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1984:164:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 49648,
                        "nodeType": "ExpressionStatement",
                        "src": "1984:164:54"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "726f7574657220636f6e7472616374206465706c6f7965642061743a20",
                                  "id": 49655,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2223:31:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_5d7c56fcc4e141be4faeb6cfd4880f29589549ce44f76d87ef22b113d79741ad",
                                    "typeString": "literal_string \"router contract deployed at: \""
                                  },
                                  "value": "router contract deployed at: "
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 49660,
                                          "name": "router",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 49528,
                                          "src": "2293:6:54",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_UniswapV2Router02_$6037",
                                            "typeString": "contract UniswapV2Router02"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_UniswapV2Router02_$6037",
                                            "typeString": "contract UniswapV2Router02"
                                          }
                                        ],
                                        "id": 49659,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "2285:7:54",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 49658,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "2285:7:54",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 49661,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "2285:15:54",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 49656,
                                      "name": "vm",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 7749,
                                      "src": "2273:2:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Vm_$17104",
                                        "typeString": "contract Vm"
                                      }
                                    },
                                    "id": 49657,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2276:8:54",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 16146,
                                    "src": "2273:11:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (address) pure external returns (string memory)"
                                    }
                                  },
                                  "id": 49662,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2273:28:54",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_5d7c56fcc4e141be4faeb6cfd4880f29589549ce44f76d87ef22b113d79741ad",
                                    "typeString": "literal_string \"router contract deployed at: \""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 49653,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2191:6:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 49652,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2191:6:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49654,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2198:6:54",
                                "memberName": "concat",
                                "nodeType": "MemberAccess",
                                "src": "2191:13:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () pure returns (string memory)"
                                }
                              },
                              "id": 49663,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2191:125:54",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 49649,
                              "name": "console",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25168,
                              "src": "2159:7:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_console_$25168_$",
                                "typeString": "type(library console)"
                              }
                            },
                            "id": 49651,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2167:9:54",
                            "memberName": "logString",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17181,
                            "src": "2159:17:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) view"
                            }
                          },
                          "id": 49664,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2159:168:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 49665,
                        "nodeType": "ExpressionStatement",
                        "src": "2159:168:54"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 49666,
                              "name": "vm",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 7749,
                              "src": "2338:2:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Vm_$17104",
                                "typeString": "contract Vm"
                              }
                            },
                            "id": 49668,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2341:13:54",
                            "memberName": "stopBroadcast",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 16020,
                            "src": "2338:16:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                              "typeString": "function () external"
                            }
                          },
                          "id": 49669,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2338:18:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 49670,
                        "nodeType": "ExpressionStatement",
                        "src": "2338:18:54"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 49671,
                            "name": "exportDeployments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 50011,
                            "src": "2367:17:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 49672,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2367:19:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 49673,
                        "nodeType": "ExpressionStatement",
                        "src": "2367:19:54"
                      }
                    ]
                  },
                  "functionSelector": "c0406226",
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "run",
                  "nameLocation": "955:3:54",
                  "parameters": {
                    "id": 49532,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "958:2:54"
                  },
                  "returnParameters": {
                    "id": 49533,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "970:0:54"
                  },
                  "scope": 49807,
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "id": 49679,
                  "nodeType": "FunctionDefinition",
                  "src": "2402:25:54",
                  "nodes": [],
                  "body": {
                    "id": 49678,
                    "nodeType": "Block",
                    "src": "2425:2:54",
                    "nodes": [],
                    "statements": []
                  },
                  "functionSelector": "f8a8fd6d",
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "test",
                  "nameLocation": "2411:4:54",
                  "parameters": {
                    "id": 49676,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2415:2:54"
                  },
                  "returnParameters": {
                    "id": 49677,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2425:0:54"
                  },
                  "scope": 49807,
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "id": 49806,
                  "nodeType": "FunctionDefinition",
                  "src": "2504:1645:54",
                  "nodes": [],
                  "body": {
                    "id": 49805,
                    "nodeType": "Block",
                    "src": "2561:1588:54",
                    "nodes": [],
                    "statements": [
                      {
                        "expression": {
                          "id": 49691,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 49686,
                            "name": "liquidityPool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49516,
                            "src": "2572:13:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LiquidityPool_$296",
                              "typeString": "contract LiquidityPool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 49689,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "2588:17:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_LiquidityPool_$296_$",
                                "typeString": "function () returns (contract LiquidityPool)"
                              },
                              "typeName": {
                                "id": 49688,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 49687,
                                  "name": "LiquidityPool",
                                  "nameLocations": [
                                    "2592:13:54"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 296,
                                  "src": "2592:13:54"
                                },
                                "referencedDeclaration": 296,
                                "src": "2592:13:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_LiquidityPool_$296",
                                  "typeString": "contract LiquidityPool"
                                }
                              }
                            },
                            "id": 49690,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2588:19:54",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LiquidityPool_$296",
                              "typeString": "contract LiquidityPool"
                            }
                          },
                          "src": "2572:35:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_LiquidityPool_$296",
                            "typeString": "contract LiquidityPool"
                          }
                        },
                        "id": 49692,
                        "nodeType": "ExpressionStatement",
                        "src": "2572:35:54"
                      },
                      {
                        "expression": {
                          "id": 49714,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 49693,
                            "name": "liquidityPoolProxy",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49519,
                            "src": "2620:18:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                              "typeString": "contract TransparentUpgradeableProxy"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 49699,
                                    "name": "liquidityPool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 49516,
                                    "src": "2695:13:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_LiquidityPool_$296",
                                      "typeString": "contract LiquidityPool"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_LiquidityPool_$296",
                                      "typeString": "contract LiquidityPool"
                                    }
                                  ],
                                  "id": 49698,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2687:7:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 49697,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2687:7:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49700,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2687:22:54",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 49701,
                                "name": "admin",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 49681,
                                "src": "2724:5:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "hexValue": "696e697469616c697a65286164647265737329",
                                    "id": 49704,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2786:21:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_c4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e5",
                                      "typeString": "literal_string \"initialize(address)\""
                                    },
                                    "value": "initialize(address)"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "id": 49709,
                                            "name": "owner",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 49683,
                                            "src": "2842:5:54",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "id": 49708,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "2834:7:54",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_uint160_$",
                                            "typeString": "type(uint160)"
                                          },
                                          "typeName": {
                                            "id": 49707,
                                            "name": "uint160",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "2834:7:54",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 49710,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "2834:14:54",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint160",
                                          "typeString": "uint160"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint160",
                                          "typeString": "uint160"
                                        }
                                      ],
                                      "id": 49706,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "2826:7:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 49705,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "2826:7:54",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 49711,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "2826:23:54",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_c4d66de8473e8f74cb05df264ee8262da16b56717ef1f05d73bfdcea3adc85e5",
                                      "typeString": "literal_string \"initialize(address)\""
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 49702,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "2744:3:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 49703,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberLocation": "2748:19:54",
                                  "memberName": "encodeWithSignature",
                                  "nodeType": "MemberAccess",
                                  "src": "2744:23:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function (string memory) pure returns (bytes memory)"
                                  }
                                },
                                "id": 49712,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2744:120:54",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 49696,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "2641:31:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_payable$_t_address_$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_TransparentUpgradeableProxy_$47961_$",
                                "typeString": "function (address,address,bytes memory) payable returns (contract TransparentUpgradeableProxy)"
                              },
                              "typeName": {
                                "id": 49695,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 49694,
                                  "name": "TransparentUpgradeableProxy",
                                  "nameLocations": [
                                    "2645:27:54"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 47961,
                                  "src": "2645:27:54"
                                },
                                "referencedDeclaration": 47961,
                                "src": "2645:27:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                  "typeString": "contract TransparentUpgradeableProxy"
                                }
                              }
                            },
                            "id": 49713,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2641:234:54",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                              "typeString": "contract TransparentUpgradeableProxy"
                            }
                          },
                          "src": "2620:255:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                            "typeString": "contract TransparentUpgradeableProxy"
                          }
                        },
                        "id": 49715,
                        "nodeType": "ExpressionStatement",
                        "src": "2620:255:54"
                      },
                      {
                        "expression": {
                          "id": 49721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 49716,
                            "name": "stakingContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49513,
                            "src": "2888:15:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_StakingContract_$2340",
                              "typeString": "contract StakingContract"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 49719,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "2906:19:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_StakingContract_$2340_$",
                                "typeString": "function () returns (contract StakingContract)"
                              },
                              "typeName": {
                                "id": 49718,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 49717,
                                  "name": "StakingContract",
                                  "nameLocations": [
                                    "2910:15:54"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 2340,
                                  "src": "2910:15:54"
                                },
                                "referencedDeclaration": 2340,
                                "src": "2910:15:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_StakingContract_$2340",
                                  "typeString": "contract StakingContract"
                                }
                              }
                            },
                            "id": 49720,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2906:21:54",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_StakingContract_$2340",
                              "typeString": "contract StakingContract"
                            }
                          },
                          "src": "2888:39:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_StakingContract_$2340",
                            "typeString": "contract StakingContract"
                          }
                        },
                        "id": 49722,
                        "nodeType": "ExpressionStatement",
                        "src": "2888:39:54"
                      },
                      {
                        "documentation": " _apy = 18%\n minimum stake amount =  1 NRK\n frequency = 31536000\n liquidity pool contract address = address(liquidityPoolProxy)",
                        "expression": {
                          "id": 49751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 49723,
                            "name": "stakingContractProxy",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49522,
                            "src": "3140:20:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                              "typeString": "contract TransparentUpgradeableProxy"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 49729,
                                    "name": "stakingContract",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 49513,
                                    "src": "3217:15:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_StakingContract_$2340",
                                      "typeString": "contract StakingContract"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_StakingContract_$2340",
                                      "typeString": "contract StakingContract"
                                    }
                                  ],
                                  "id": 49728,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3209:7:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 49727,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3209:7:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49730,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3209:24:54",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 49731,
                                "name": "admin",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 49681,
                                "src": "3248:5:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "hexValue": "696e697469616c697a652875696e7431362c75696e743235362c75696e743235362c616464726573732c6164647265737329",
                                    "id": 49734,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3310:52:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_bf23f103e529f533a1feb6920e40a087beb775dc06f0e9bccdaca817e786c8c6",
                                      "typeString": "literal_string \"initialize(uint16,uint256,uint256,address,address)\""
                                    },
                                    "value": "initialize(uint16,uint256,uint256,address,address)"
                                  },
                                  {
                                    "hexValue": "3138",
                                    "id": 49735,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3381:2:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_18_by_1",
                                      "typeString": "int_const 18"
                                    },
                                    "value": "18"
                                  },
                                  {
                                    "hexValue": "31303030303030303030303030303030303030",
                                    "id": 49736,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3402:19:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                      "typeString": "int_const 1000000000000000000"
                                    },
                                    "value": "1000000000000000000"
                                  },
                                  {
                                    "hexValue": "3331353336303030",
                                    "id": 49737,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3440:8:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_31536000_by_1",
                                      "typeString": "int_const 31536000"
                                    },
                                    "value": "31536000"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 49740,
                                        "name": "liquidityPoolProxy",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 49519,
                                        "src": "3475:18:54",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                          "typeString": "contract TransparentUpgradeableProxy"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                          "typeString": "contract TransparentUpgradeableProxy"
                                        }
                                      ],
                                      "id": 49739,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "3467:7:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 49738,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "3467:7:54",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 49741,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3467:27:54",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "id": 49746,
                                            "name": "owner",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 49683,
                                            "src": "3529:5:54",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "id": 49745,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "3521:7:54",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_uint160_$",
                                            "typeString": "type(uint160)"
                                          },
                                          "typeName": {
                                            "id": 49744,
                                            "name": "uint160",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "3521:7:54",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 49747,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "3521:14:54",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint160",
                                          "typeString": "uint160"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint160",
                                          "typeString": "uint160"
                                        }
                                      ],
                                      "id": 49743,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "3513:7:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 49742,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "3513:7:54",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 49748,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3513:23:54",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_bf23f103e529f533a1feb6920e40a087beb775dc06f0e9bccdaca817e786c8c6",
                                      "typeString": "literal_string \"initialize(uint16,uint256,uint256,address,address)\""
                                    },
                                    {
                                      "typeIdentifier": "t_rational_18_by_1",
                                      "typeString": "int_const 18"
                                    },
                                    {
                                      "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                      "typeString": "int_const 1000000000000000000"
                                    },
                                    {
                                      "typeIdentifier": "t_rational_31536000_by_1",
                                      "typeString": "int_const 31536000"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 49732,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "3268:3:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 49733,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberLocation": "3272:19:54",
                                  "memberName": "encodeWithSignature",
                                  "nodeType": "MemberAccess",
                                  "src": "3268:23:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function (string memory) pure returns (bytes memory)"
                                  }
                                },
                                "id": 49749,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3268:283:54",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 49726,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "3163:31:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_payable$_t_address_$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_TransparentUpgradeableProxy_$47961_$",
                                "typeString": "function (address,address,bytes memory) payable returns (contract TransparentUpgradeableProxy)"
                              },
                              "typeName": {
                                "id": 49725,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 49724,
                                  "name": "TransparentUpgradeableProxy",
                                  "nameLocations": [
                                    "3167:27:54"
                                  ],
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 47961,
                                  "src": "3167:27:54"
                                },
                                "referencedDeclaration": 47961,
                                "src": "3167:27:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                  "typeString": "contract TransparentUpgradeableProxy"
                                }
                              }
                            },
                            "id": 49750,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3163:399:54",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                              "typeString": "contract TransparentUpgradeableProxy"
                            }
                          },
                          "src": "3140:422:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                            "typeString": "contract TransparentUpgradeableProxy"
                          }
                        },
                        "id": 49752,
                        "nodeType": "ExpressionStatement",
                        "src": "3140:422:54"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "7374616b696e6720636f6e7472616374206465706c6f7965642061743a20",
                                  "id": 49759,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3639:32:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_eb9dddfd145a78926ab044b8e9d00dabff3f957046e047334d79d2576246af7a",
                                    "typeString": "literal_string \"staking contract deployed at: \""
                                  },
                                  "value": "staking contract deployed at: "
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 49764,
                                          "name": "stakingContractProxy",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 49522,
                                          "src": "3710:20:54",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                            "typeString": "contract TransparentUpgradeableProxy"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                            "typeString": "contract TransparentUpgradeableProxy"
                                          }
                                        ],
                                        "id": 49763,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "3702:7:54",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 49762,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "3702:7:54",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 49765,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "3702:29:54",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 49760,
                                      "name": "vm",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 7749,
                                      "src": "3690:2:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Vm_$17104",
                                        "typeString": "contract Vm"
                                      }
                                    },
                                    "id": 49761,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "3693:8:54",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 16146,
                                    "src": "3690:11:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (address) pure external returns (string memory)"
                                    }
                                  },
                                  "id": 49766,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3690:42:54",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_eb9dddfd145a78926ab044b8e9d00dabff3f957046e047334d79d2576246af7a",
                                    "typeString": "literal_string \"staking contract deployed at: \""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 49757,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3607:6:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 49756,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3607:6:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49758,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3614:6:54",
                                "memberName": "concat",
                                "nodeType": "MemberAccess",
                                "src": "3607:13:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () pure returns (string memory)"
                                }
                              },
                              "id": 49767,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3607:140:54",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 49753,
                              "name": "console",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25168,
                              "src": "3575:7:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_console_$25168_$",
                                "typeString": "type(library console)"
                              }
                            },
                            "id": 49755,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3583:9:54",
                            "memberName": "logString",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17181,
                            "src": "3575:17:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) view"
                            }
                          },
                          "id": 49768,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3575:183:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 49769,
                        "nodeType": "ExpressionStatement",
                        "src": "3575:183:54"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "62616c616e6365206f66206c6971756964697479203a20",
                                  "id": 49776,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3833:25:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_fe48e411c95c25f6b94d1ffb6f077eec5da05c5e1a295f9a2c6df38103adbb3a",
                                    "typeString": "literal_string \"balance of liquidity : \""
                                  },
                                  "value": "balance of liquidity : "
                                },
                                {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "id": 49781,
                                            "name": "liquidityPoolProxy",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 49519,
                                            "src": "3897:18:54",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                              "typeString": "contract TransparentUpgradeableProxy"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                              "typeString": "contract TransparentUpgradeableProxy"
                                            }
                                          ],
                                          "id": 49780,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "3889:7:54",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 49779,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "3889:7:54",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 49782,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "3889:27:54",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "id": 49783,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "3917:7:54",
                                      "memberName": "balance",
                                      "nodeType": "MemberAccess",
                                      "src": "3889:35:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 49777,
                                      "name": "vm",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 7749,
                                      "src": "3877:2:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Vm_$17104",
                                        "typeString": "contract Vm"
                                      }
                                    },
                                    "id": 49778,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "3880:8:54",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 16174,
                                    "src": "3877:11:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (uint256) pure external returns (string memory)"
                                    }
                                  },
                                  "id": 49784,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "3877:48:54",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_fe48e411c95c25f6b94d1ffb6f077eec5da05c5e1a295f9a2c6df38103adbb3a",
                                    "typeString": "literal_string \"balance of liquidity : \""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 49774,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3801:6:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 49773,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3801:6:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49775,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3808:6:54",
                                "memberName": "concat",
                                "nodeType": "MemberAccess",
                                "src": "3801:13:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () pure returns (string memory)"
                                }
                              },
                              "id": 49785,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3801:139:54",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 49770,
                              "name": "console",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25168,
                              "src": "3769:7:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_console_$25168_$",
                                "typeString": "type(library console)"
                              }
                            },
                            "id": 49772,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3777:9:54",
                            "memberName": "logString",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17181,
                            "src": "3769:17:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) view"
                            }
                          },
                          "id": 49786,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3769:182:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 49787,
                        "nodeType": "ExpressionStatement",
                        "src": "3769:182:54"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "6c697175696469747920706f6f6c20636f6e74726163742061743a20",
                                  "id": 49794,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4026:30:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_a46f2dc7dee192ff4bc6050731b8e9b78d6ffbb0a942e20e01148b8738a88442",
                                    "typeString": "literal_string \"liquidity pool contract at: \""
                                  },
                                  "value": "liquidity pool contract at: "
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 49799,
                                          "name": "liquidityPoolProxy",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 49519,
                                          "src": "4095:18:54",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                            "typeString": "contract TransparentUpgradeableProxy"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_TransparentUpgradeableProxy_$47961",
                                            "typeString": "contract TransparentUpgradeableProxy"
                                          }
                                        ],
                                        "id": 49798,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "4087:7:54",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 49797,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "4087:7:54",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 49800,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "4087:27:54",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 49795,
                                      "name": "vm",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 7749,
                                      "src": "4075:2:54",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Vm_$17104",
                                        "typeString": "contract Vm"
                                      }
                                    },
                                    "id": 49796,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "4078:8:54",
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 16146,
                                    "src": "4075:11:54",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_pure$_t_address_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (address) pure external returns (string memory)"
                                    }
                                  },
                                  "id": 49801,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4075:40:54",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_a46f2dc7dee192ff4bc6050731b8e9b78d6ffbb0a942e20e01148b8738a88442",
                                    "typeString": "literal_string \"liquidity pool contract at: \""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 49792,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3994:6:54",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 49791,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3994:6:54",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 49793,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4001:6:54",
                                "memberName": "concat",
                                "nodeType": "MemberAccess",
                                "src": "3994:13:54",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
                                  "typeString": "function () pure returns (string memory)"
                                }
                              },
                              "id": 49802,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3994:136:54",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 49788,
                              "name": "console",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25168,
                              "src": "3962:7:54",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_console_$25168_$",
                                "typeString": "type(library console)"
                              }
                            },
                            "id": 49790,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3970:9:54",
                            "memberName": "logString",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17181,
                            "src": "3962:17:54",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) view"
                            }
                          },
                          "id": 49803,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3962:179:54",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 49804,
                        "nodeType": "ExpressionStatement",
                        "src": "3962:179:54"
                      }
                    ]
                  },
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_staking",
                  "nameLocation": "2513:8:54",
                  "parameters": {
                    "id": 49684,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 49681,
                        "mutability": "mutable",
                        "name": "admin",
                        "nameLocation": "2530:5:54",
                        "nodeType": "VariableDeclaration",
                        "scope": 49806,
                        "src": "2522:13:54",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 49680,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2522:7:54",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 49683,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "2545:5:54",
                        "nodeType": "VariableDeclaration",
                        "scope": 49806,
                        "src": "2537:13:54",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 49682,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2537:7:54",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2521:30:54"
                  },
                  "returnParameters": {
                    "id": 49685,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2561:0:54"
                  },
                  "scope": 49807,
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 49503,
                    "name": "ScaffoldETHDeploy",
                    "nameLocations": [
                      "465:17:54"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 50088,
                    "src": "465:17:54"
                  },
                  "id": 49504,
                  "nodeType": "InheritanceSpecifier",
                  "src": "465:17:54"
                }
              ],
              "canonicalName": "DeployScript",
              "contractDependencies": [
                2929,
                6037,
                6109
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "linearizedBaseContracts": [
                49807,
                50088,
                7804,
                7765,
                7753,
                15577,
                10551,
                8497
              ],
              "name": "DeployScript",
              "nameLocation": "449:12:54",
              "scope": 49808,
              "usedErrors": [
                49508,
                49510,
                49815
              ],
              "usedEvents": []
            }
          ],
          "license": "MIT"
        }
      },
      "script/DeployHelpers.s.sol": {
        "id": 55,
        "ast": {}
      }
    },
    "contracts": {
      "script/Deploy.s.sol": {
        "DeployScript": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidChain",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidOwnerAddress",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "name": "InvalidPrivateKey",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "IS_SCRIPT",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "deployments",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "findChainName",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getChain",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "chainId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "chainAlias",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "rpcUrl",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct StdChains.Chain",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "run",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "test",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwnerAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"InvalidPrivateKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployments\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"findChainName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChain\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainAlias\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rpcUrl\",\"type\":\"string\"}],\"internalType\":\"struct StdChains.Chain\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"script/Deploy.s.sol\":\"DeployScript\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/ILiquidityPool.sol\":{\"keccak256\":\"0x53d8b4afe234f6dae154f6da1a0a950af9023bdebab67b395b67f990ba689fe3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce761749771b4de27c31082cc61c456d1a9bd7dc154aa9fd98e4d312ea6aa6f3\",\"dweb:/ipfs/QmSDAtGs3SNuPQavYCYSav5oEqcwgn5qGfD2NBRxoDjmtV\"]},\"contracts/LiquidityPool.sol\":{\"keccak256\":\"0x8f55a8813dff091a15fc5e8fff9371062f588bd80eefee45cd25eca3cf931159\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e3add28e2019a45e699921a1d1ae7f696f744a24b2eb8e9ad812c599598d0fc\",\"dweb:/ipfs/QmTpuaRHoLxjuk5aa1u5jgYkCB9XY2grZX7ZxJnqwiKqE9\"]},\"contracts/StakingContract.sol\":{\"keccak256\":\"0xb0a39256046677276a1fbd5a4f5214811baca28c762c3cc0a76bd4480242133e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2421552da2ed921a4b7e2f8cef38c0c4648b8e7c320396cc385e7e499dfd176d\",\"dweb:/ipfs/QmcapBp1Mwtesuk5xvTBLbysWbJtf7VMd6n6UGr8GkFNPZ\"]},\"contracts/UniswapV2ERC20.sol\":{\"keccak256\":\"0x987bc44250cc33a101bf8299d0c6287e5dd26cbba443b92f85d16e387a3a80e7\",\"urls\":[\"bzz-raw://b6486fc1a33bd6fc44ae66f61705bf7fa4d31154e40305bc442471a6ce3363c3\",\"dweb:/ipfs/QmRdewpdnRqEqUYDLHUM13ZfzAx9TUBTBxwuQHm59abdU3\"]},\"contracts/UniswapV2Factory.sol\":{\"keccak256\":\"0xec8a4e2c0b8fc5c704389bd0b06a6dcffcd17e19593bf0db3e69a6f466472bbf\",\"urls\":[\"bzz-raw://766bcd9a88e4d54cc8ed350cef7ee79af5cedff21749e85a954c821a966e1d05\",\"dweb:/ipfs/Qmdg38bkK4zzC9LmtYrmB1cnEjrnun77QmzexgGzfYCDet\"]},\"contracts/UniswapV2Pair.sol\":{\"keccak256\":\"0xa08d438527cd609c9ac231ece8c82796b7c90cbe2ce00b2687e226787962214e\",\"urls\":[\"bzz-raw://8c3ff65fcf151b671dc762d9c60354e17d78f647474dfab4f39a1731ebc09d3b\",\"dweb:/ipfs/QmX9LrsWkmg3vKS9q8SmNwqaJBbLDZBieoXLY3rRxuA2u6\"]},\"contracts/UniswapV2Router02.sol\":{\"keccak256\":\"0x8cf036c40a70c22321e6468c4e3a1abb9e149f8e2c905dd83f10a5ad268407db\",\"urls\":[\"bzz-raw://452d4246701d10da27d7b6ee3ccc946b89ea34455ac3fd674d33b81fcdf5e882\",\"dweb:/ipfs/QmZLo469TWcDTYWQH6tbH2ccThxFeERH3ctN4V2hUvnDjA\"]},\"contracts/WNRK.sol\":{\"keccak256\":\"0x3d03aa5ef287c80f12acaa567740b69a44ab56ac37eae640f3b7c477f2490c21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45b731379e1a90aa19efd2999c982d4a6a583dc968aca1d9bef63c78e5896812\",\"dweb:/ipfs/QmUQikYjPVsw7HMtuhueZRWo48bNQrg6tf1fAkh43fPQez\"]},\"contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x814bdd79b5e46cbebebe8b62e30389f87b8e39295fbcf3696ea2696d12739294\",\"urls\":[\"bzz-raw://ff1d9ddd905aa28839d3a545736ada3c37a0eec49088c7bcc261eb0366002e48\",\"dweb:/ipfs/QmZXdPdb8ea3b7SuUyNQUBoTzH5YUMWUiVf4NKwjP681Bw\"]},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"keccak256\":\"0x13cb9ba47e7927c9fe0e1854bc9bb5578efe0e626a45b2b766310bce7a9b910e\",\"urls\":[\"bzz-raw://b863004925435db12c8a2599a3fb68be922d11a59c9282f13c210e018db03c93\",\"dweb:/ipfs/QmNSk8LTrJBCByUQ8drRGk8JpaA64x9Wv9RJi3rsMNnVaq\"]},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"keccak256\":\"0xec9eab1abbb679a4e4abc42b18bf4f52533e6907fe136a90af885f4365ebc09e\",\"urls\":[\"bzz-raw://8608f338e68d7bfa4164053577611f52c25d594fab637bee451a1e0d8b7065a0\",\"dweb:/ipfs/QmS4jcfpvY2LhQvCMxkHe6NQPM4CbXGQw2N45fJ9oQ5Ffn\"]},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"keccak256\":\"0xe917a7fcd1af007eef37a58583b45756d020de482c96c435b5e849b22ff38227\",\"urls\":[\"bzz-raw://9975bd065830a229302b7378f670afce3ee4459083c8b93abcc42a2802105df1\",\"dweb:/ipfs/QmddEk97JRP6fMVqpoxwgQTCoWzZaxJspWFmZ7z7Z5kn3V\"]},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0x277d0883a912663b46ca975bd8f0436d05145d61626a1e390975620f57e315c8\",\"urls\":[\"bzz-raw://bc57fe587dcdd410b63d2e337228d02370e21af0f3404cb367a5ec2ecf5ac409\",\"dweb:/ipfs/QmQxXveznq83sJp8whHD2esWEMME3xhBKHrs9VgXcdcgb6\"]},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"keccak256\":\"0x0530d591c1378c26d778fe5f53989fb05936a5c09a633e2a819865e4908a24cd\",\"urls\":[\"bzz-raw://8837215779214d6f15d9111d0d75be39c656c787766bdb3b02abf3b05d4cd7c9\",\"dweb:/ipfs/QmVaVjP5XTeHXYyGmK5psxQKkmJXSomtjYa21r2ZgyZLUH\"]},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"keccak256\":\"0x88e7c414bc96e8961931589520157d23f164ee2205ef8863d89603ab4c791e67\",\"urls\":[\"bzz-raw://d108f644015331c452323cf2026008c845e0632acccbd4cb2846ba20f64d34ba\",\"dweb:/ipfs/QmNeLAR3AnYzmNXrKx6L1u3u8Q27j8pyNjFjBNbjDW7q72\"]},\"contracts/interfaces/IWETH.sol\":{\"keccak256\":\"0x24cf55d37e705f372f8230a8b2942f85269a153beb0f1012ebe13e79c3ad04d4\",\"urls\":[\"bzz-raw://3f407a2359861cb6ea07f0ccfbf24cc79e06df14235b371481144a9c9b1f334d\",\"dweb:/ipfs/QmQeaW8VZdamCp1pjGCL41XzSCXATDoxcNLzFbnoHgNX84\"]},\"contracts/libraries/Math.sol\":{\"keccak256\":\"0x512176f76d9bcbb01d3ad141d81dc8bfcbf781d2fc9b34e1adc82f8728617251\",\"urls\":[\"bzz-raw://8d7bcbf32007b40fd72fe022b4b3e3b7d2a7ce2931e7a6a295d604c24de4861b\",\"dweb:/ipfs/QmYvEMNRUfDnDyptWtpTDfBHJELaBDps17nQiFHccEZd8T\"]},\"contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0xc56f2ead2795cef089a56daa96061a0382a645031ca5f79048df819e295e027a\",\"urls\":[\"bzz-raw://3d774a89691182417328df7d6a45278bab6fb9568a9d84a99a7b38ceb72ef596\",\"dweb:/ipfs/QmVqV15js2qZtQpY2dK2nAjW66FidvYKttnUDC2QeZ7GUp\"]},\"contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0xfe82c011df9f31cfe0fd7dbae267d7d2b377ac2e21a28a6e805e91d625f7f34e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2df0262ddd2a55b1f51e874ab790ce69baa03d62ec63d6eb52e3b676a60ad84a\",\"dweb:/ipfs/QmezwZ9QemyKRW6UrcWNLiddJ8eSzHakPjA1SreHJThjc3\"]},\"contracts/libraries/UQ112x112.sol\":{\"keccak256\":\"0x91d066f26c06ada54d0e8fe23c76d877aff1ddfe23e1b05eda3473cb386f1978\",\"urls\":[\"bzz-raw://b08b9054f861c26aa56d328f339538464dc1bee8f0c9be29ff2e02c9924bd280\",\"dweb:/ipfs/QmWpgKFQ2GjrMWCbjR6gF6TRikgDBXjRTH9GfAPJ3xHiCP\"]},\"contracts/libraries/UniswapV2Library.sol\":{\"keccak256\":\"0xc301cbb604bdda2a9fdff47e1fd694cbfa1f87e1afbd672fd8ed04bfe8aae2da\",\"urls\":[\"bzz-raw://5d4bd9f7b62d0d6678ccdbb334ca526ff76ea4299ebd9d025b1da4ae0fb6701f\",\"dweb:/ipfs/QmZVgwZVZuqtDwQUQBktR124DADBsHZDtqDHjmUrY3HmSa\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x658ad7c2171d17c092c21f7834536c6da1309e9e0e64de2ff6b4afbad6ccd261\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ed5efd8b2c1567bdb73550566b9c5b833e000682bd71d59f80b844edab18379\",\"dweb:/ipfs/QmepP8nqGWqZ8338GbzFTGPJgFuZ2e6EeSoCBf85uaQ4fn\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x46f11bd2c34d945d9452ca982556dcb3315e871739e6a42bc26a2340e7904770\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e2ec3e013f18108df5ea628a7dbe48208d14bd5efd9731d18c339c7ce745ac9\",\"dweb:/ipfs/QmZiBMzKR8ZNAmTHZtGUtGdJyD1p3B16MBubf7VCgwMCEq\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x4be0c6bbe6bc0e629e6692c947ae0e2e245d2f0ac54a0a40399173294e1df8b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4b682ee7fd200c594f806be478c194b3d103207e092a4c9e80d7c916f74a4f40\",\"dweb:/ipfs/Qmaponoz626oaWVVPbsvRrpwKM1nzLi2bNzC7QKMcqu2gi\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xa9e93d0df6bfb1bb8d7933ed017f1edfb6b792c42f36024a645c199e4ca814d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://70d2f851a608d4a155ed55c32084ad1e3add09245c531965b1f424c7f28fbe02\",\"dweb:/ipfs/QmTErty2h5kkroXnJLsTcjK8HnCZMJgCC31akGVhRwX8DK\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x65fd0eeda28da592bf035912ab236b353a1f2b93c4372d2f48370e075bea6dc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db136c28bc3f1c73fc581028a18ef94d05aa5ec013396c4a0fde529ceb782139\",\"dweb:/ipfs/QmTAe7RzMAokM9WyifonX1rLgAfCP9r1Z1EC1JgyyAiybX\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0x2937c68a288dbb54c9bb4209119817ea197ffbed21167c493f14dcbbc327c399\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a222d841d2d7e9bb92cf1fb0018a2b8f56d7829a7cab0dba8aa1ca6e7ef693a8\",\"dweb:/ipfs/QmUvKzRrjPthS5m4rKrs7zGq38xgjWRrQpKMLQJrHkAgX6\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0xfa03724d9e5ce5a0c31175d2f91a55b5bf70bbbd8384cc79e7216c43d0a10f9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2cb1db56786845b0de1309d7034a072ef7aff57b63c731edefbb383b281340f5\",\"dweb:/ipfs/QmXsXekD3keURjKkpyWAoetpGx4fWXmCt41Y3szEWpxvYa\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0xe3e5d092bfcad345b1c25ea431473039295fbd9efde2b702881f1f4edc2c1417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://89b16a8e997a1bed9ffb113924222d521542b1bc13b475763d8a8b890a27cd8a\",\"dweb:/ipfs/QmXeeuDTgjBYWgun7EiQgUJZF9JVKdARNM8qobLHdG9r4Q\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x41cafaff048da9639ce9ec82f0d0f0dc7d1430c2e029cad49010bd8d77e81357\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a4193803ee128be194786ff806e4a39b6498331969df756bc41985dd3d26c254\",\"dweb:/ipfs/QmcdNtApALPVkoZG5V24ttXJsDKnyQ53LKTfYsCyiuv8m9\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x8437dbfaad83b1a8b301de2cb672d8824dfc1a4d8b13dd803bf1cc04a54b6ac1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c647d77cd2a8d8601ddf609bcab3e24c5be842742363637e7b36497e7ddedf69\",\"dweb:/ipfs/QmUU79Me43ZBPL62TeM4bPAxVZUiPG1GzEMRGJ6RXrpSWx\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xbbdc11ec3a00e6b8c6c76e7f0ea46581239faee116324de4184dd0af011dd837\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://10581f46c044a7561d25d8ea203f4e89e13a807b40bf9d87520f69407447de42\",\"dweb:/ipfs/QmSFVUzcDB9QtNyjJ5fLzi3kqKhtEbDD7TZMgbzJ9wiC63\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x194c2bb6bb02214ca445209140821fdad6f82fc1672ec900a31e4f7547ee34fb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2bde7d0db7b21399717c6969027759ec7dfa3563c543a577dfd6b140803325e4\",\"dweb:/ipfs/QmV5CKK1yECaPAeA7edxuftEwUXGLxVR4vSeBZRcWQkbkE\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x1313e079d13b9f3a47177eff1d226c41b0b51c0802c248d47d038eb65a084307\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b51e2203055cda450dc04ce55644f209f67e208fc143a1f118cff66de010f20\",\"dweb:/ipfs/QmVtQjmG6YnHaDt81TvJM74TvzEh3SULR3HyzxVQFM59xZ\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0x60cc2f1eb24e38fc92e067c622d6eeebfea4173c9e6517f16d440fbc8f0257fb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7b73fff39ec51e2f181962e5ea1306d8a2e953c0a9116849d086b5432227ca1\",\"dweb:/ipfs/QmRrScdwdioNyyG7pPwsiQE1k5iJvuhYgt4MLY6xGu8uKh\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xb3f26ebbb8e70900fe809b9abd2206827e6b5e77df5cdd8838ed31c027131e2c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c0bdc8fd0274dddd108b3b84968dda34e9edf27d14b91ca0235220c914a5f1dd\",\"dweb:/ipfs/QmRsESkXuxDiKu4KhCEbEr4TEuLCuLMFvBwjbWm3Ewa4Dt\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x1f207d34275acd299237f0e51f9ff32040063d05a6d34588b99974c8d9b5d427\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b57c5563e435661426f7e026340dcab47315b739e0a382a50f48687f5db8092\",\"dweb:/ipfs/QmY7aAEDH7mAEg1WY6EZD9rAT2rLi1NiH87ZMBT9R6Hfp5\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xc30f35014c118b6b494d297c4ab876cf4dc5abe91ce6c4b0d53cf8da2ecbd161\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://de467f6b95e7c0b1497863565a9a59ddf9391194445ef8e912ac19b97c95233f\",\"dweb:/ipfs/QmRRJpb1ndBGWfVMJWGcyqNa9SQPNeqzCp4nDKVBgkvHe4\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1baa3e4dd802cf1e2ed3634f79f3b1f86397f1bcb819f55811da1a9bf6a6189c\",\"dweb:/ipfs/QmPmiK9Tj3P7fhnroK2REuendr4sjx4vjev7PRQJyxMob5\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0x82ff8ec61a18937d9fce0d2323e3df9becb6e902ed9a569dd88dbb0e9d0b139d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf4275cab5565b8edbbe58bb67af31d859e484a896350474c2988f0ffa604c17\",\"dweb:/ipfs/QmVVCAFt3pMfYDJSYKWtDt8GGqgzFaLM4yPDtWwZ11kRPy\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0xe768c5863db91751a70d25c9dac899ec5078c6bacfbc02878652e454aa416b9e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3f27eb11dc6c2673a2de564ab994bbe71c96c184a4ab77529ba0c3a25059a31a\",\"dweb:/ipfs/QmP5XhZTawPqVHz9L5qfAQbrKvTBYHPudyynAyVoBm2vmd\"]},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"keccak256\":\"0xca719d0df6d77207f38b638f8e5e85df03434b47a1045b5b686a36df9bea601f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f73ec8e5e4af80516b0c3e6e48da731f8fb676a9e2cb4fc68485ba690be1e288\",\"dweb:/ipfs/QmZjBWPuXuyQ5keowMu8X4AsATCjFdibHiCocDpsrqGGjy\"]},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"keccak256\":\"0x7ad0b955ed534d2d248125ec376b5159da3039fd5d502cf19565bd07f6b2a4a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e297f6a8bad38c4d43c62dbd8cc6ff3527b10df1d5d9f9210e1f35ed547fc80e\",\"dweb:/ipfs/QmRAazJw6rbaAa6frASjvg4JeW9y7bmnSvsvtchw8NDcdi\"]},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0x62c6b919abeeb4c9146ffbb325fc03b5f2d55a29b8e719b8ff62daab48123565\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://296143200e46ef2d62d089f9e7be424ebd49c37ab44c7ac24da3c2c89a0226d5\",\"dweb:/ipfs/Qmd3g6y6MU3Udk2z7onjyVdifjTANp7CvFYkJNGGQBDBvB\"]},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd3effc3ce6d1c85e1aae2ba5c6f28434c2eef52e1fc48b15096a176dcfee5853\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8203f1a5eebff83ed1c75be70af0d00acb5b1b1e54e0b8805097f8fb052e7780\",\"dweb:/ipfs/QmNzyWV5FxBGX1Djh2LJ89bpZMPfsQ2nck8DL8VaFf6UkJ\"]},\"lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"keccak256\":\"0xbad02b66cb435c1e583f15ba5f005ac79596aac552ca4ffecfe8c0674e5e39a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://191a5cfcb4ce6d5b6dd1949ccc47ab0ce3e98e34127ae2efe154c510b8bca0f3\",\"dweb:/ipfs/QmYv75GWYsWxbz8quFKvitzeMyNJmJF1YNGyng94nkzhiF\"]},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xbec94e472f5fde800401cdc48fe89c0260ab92b22965ddce17a715f9825b4f12\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d28923f397006622c72dccec7a22c9d5c4c8407c1285dace5e69f4a7d54545e5\",\"dweb:/ipfs/QmPh1BnF3mrcUx1UZnE5uKjavTomomrJ5wdPwh22NvJSuz\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa3ce7a0af2f67fd8de6bdf4fb32434fd84396596c5fb55a8b9213cd08b71b2d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa06b0c234b5597955f9a5b867a9bd9c498d4d1c89925a0c1dea2facd5a4ae1b\",\"dweb:/ipfs/QmP3y9CMRRY1ipQRcF1HSRos56jtLA1rnVakks5MTi9WLe\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x0270cb4e50d6bcdd780df229606076d39df796860d266b5426f374c36f34fe89\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://511db944b3f0a57b56fda90d1e466cca6a0dea2297d816251966c8f025313973\",\"dweb:/ipfs/QmRgu5uCaKkoRr3amWGfhy6bVwhpH5tr1vynaNQyEYiE4p\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xe5bd3cc9d310d651b3c599a5b5bc94bdebb079ee085c8ad3bba4bffa255338b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf7adbcb88df4ca17a262387468a436c21ac601e0be84a64c69aa5b87c061670\",\"dweb:/ipfs/QmQSrVN1DnpqD3TrdN4aDZ6nhqCXD3Vg6rNiG87tZng2Qy\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9755b505799e622d964a843a8ed1fd60fedffca230178e5cb95ae9280df4dcd2\",\"dweb:/ipfs/QmRkhUYUUgRZ2QYJjmtQct2ubyYwS3bdUMhbuFYM12VfYn\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xc0ed4a90861f5d2872ce5fb72a615d76f918b862f3c26c3a93984ede9b7bf2f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd97d510de6b61ac633cd2dc296d4e55bcb9ca925facd2d0f31b1063d42248e7\",\"dweb:/ipfs/QmWCCjACsvJTHSDBd6UGT3ShjKYLYgQM23KPf4uqb23txT\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x097df0c755590d58a1ad7a6d8d291aa12c39db9abda1ec0ed768e7ac7a98267a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e3786352a2c3a7139a70d5d0fe95dfa2a7b835a6a1cc9c5523546dd26ff841b\",\"dweb:/ipfs/Qmco7KbpTnRVwgWpXKW7s1C7mbgG7mMH2ZsHGbCsSyFVy7\"]},\"script/Deploy.s.sol\":{\"keccak256\":\"0xdd5ea46875fe271b74452dd44d32576cdf788a062df58b770bf582b08adf797e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e469ddfa9fd99b96434b12962856024df890a819526c350906bf71907544f34\",\"dweb:/ipfs/QmZpfePAzW9kGkZSTsoLFat5tuuF9892kUjSvqboK3woyN\"]},\"script/DeployHelpers.s.sol\":{\"keccak256\":\"0xb2e3f59c43fc66aeec922a0fabce29b53dbbe433fffdc11955d528f771a4fd0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0009b250dfeca309a090ecbe2cb4d16134c82f03300be0a29c00e7e908014006\",\"dweb:/ipfs/QmWsbkL3Trb2Cb6ev5qaKonoEobRQZxByNPehpXY88qRGT\"]}},\"version\":1}",
          "userdoc": {},
          "devdoc": {},
          "evm": {
            "bytecode": {
              "object": "608060405260048054600160ff199182168117909255600c8054909116909117905534801561002d57600080fd5b5061ae3f806200003e6000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806306609bbe146200006f57806332e21ae7146200009f578063c040622614620000b8578063d200726514620000c4578063f8a8fd6d14620000c2578063f8ccbf4714620000dd575b600080fd5b6200008662000080366004620025ca565b620000fc565b6040516200009692919062002638565b60405180910390f35b620000a9620001ca565b60405162000096919062002664565b620000c262000206565b005b620000ce620008e7565b604051620000969190620026d5565b600c54620000eb9060ff1681565b604051901515815260200162000096565b600f81815481106200010d57600080fd5b90600052602060002090600202016000915090508060000180546200013290620026ea565b80601f01602080910402602001604051908101604052809291908181526020018280546200016090620026ea565b8015620001b15780601f106200018557610100808354040283529160200191620001b1565b820191906000526020600020905b8154815290600101906020018083116200019357829003601f168201915b505050600190930154919250506001600160a01b031682565b620001f66040518060800160405280606081526020016000815260200160608152602001606081525090565b620002014662000aad565b905090565b60405163c1978d1f60e01b815260206004820152601160248201527041444d494e5f505249564154455f4b455960781b60448201526000906000805160206200acb18339815191529063c1978d1f90606401602060405180830381865afa15801562000276573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029c919062002726565b60405163c1978d1f60e01b815260206004820152600d60248201526c4f574e45525f4144445245535360981b60448201529091506000906000805160206200acb18339815191529063c1978d1f90606401602060405180830381865afa1580156200030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000331919062002726565b6040516001625e79b760e01b03198152600481018490529091506000906000805160206200acb18339815191529063ffa1864990602401602060405180830381865afa15801562000386573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ac919062002740565b9050826000036200048e5760405163fd535ce160e01b815260206004820152608e60248201527f596f7520646f6e277420686176652061206465706c6f796572206163636f756e60448201527f742e204d616b65207375726520796f75206861766520736574204445504c4f5960648201527f45525f505249564154455f4b455920696e202e656e76206f722075736520607960848201527f61726e2067656e65726174656020746f2067656e65726174652061206e65772060a48201526d1c985b991bdb481858d8dbdd5b9d60921b60c482015260e4015b60405180910390fd5b81600003620004b057604051633649397d60e21b815260040160405180910390fd5b60405163ce817d4760e01b8152600481018490526000805160206200acb18339815191529063ce817d4790602401600060405180830381600087803b158015620004f957600080fd5b505af11580156200050e573d6000803e3d6000fd5b50506040516001625e79b760e01b0319815260048101869052600092506000805160206200acb1833981519152915063ffa1864990602401602060405180830381865afa15801562000564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200058a919062002740565b9050806040516200059b906200254c565b6001600160a01b039091168152602001604051809103906000f080158015620005c8573d6000803e3d6000fd5b50601480546001600160a01b0319166001600160a01b0392909216919091179055604051620005f7906200255a565b604051809103906000f08015801562000614573d6000803e3d6000fd5b50601680546001600160a01b0319166001600160a01b03928316908117909155601454604051921691620006489062002568565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156200067c573d6000803e3d6000fd5b50601580546001600160a01b0319166001600160a01b03928316179055601454604051632b65311f60e11b8152911660048201526200073e906000805160206200acb1833981519152906356ca623e90602401600060405180830381865afa158015620006ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200071791908101906200287c565b604051602001620007299190620028b5565b60405160208183030381529060405262000ecc565b601654604051632b65311f60e11b81526001600160a01b039091166004820152620007d7906000805160206200acb1833981519152906356ca623e90602401600060405180830381865afa1580156200079b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620007c591908101906200287c565b604051602001620007299190620028fc565b601554604051632b65311f60e11b81526001600160a01b03909116600482015262000870906000805160206200acb1833981519152906356ca623e90602401600060405180830381865afa15801562000834573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200085e91908101906200287c565b60405160200162000729919062002943565b6000805160206200ad3e83398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620008be57600080fd5b505af1158015620008d3573d6000803e3d6000fd5b50505050620008e162000f16565b50505050565b6060600046905060006000805160206200ad3e83398151915260001c6001600160a01b031663a85a84186040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000941573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200096b91908101906200298a565b905060005b815181101562000a91576000805160206200ad3e83398151915260001c6001600160a01b03166398680034838381518110620009b057620009b062002ab9565b6020026020010151600160028110620009cd57620009cd62002ab9565b60200201516040518263ffffffff1660e01b8152600401620009f09190620026d5565b6020604051808303816000875af192505050801562000a2e575060408051601f3d908101601f1916820190925262000a2b9181019062002726565b60015b1562000a7c575082460362000a7c5781818151811062000a525762000a5262002ab9565b602002602001015160006002811062000a6f5762000a6f62002ab9565b6020020151935050505090565b8062000a888162002ae5565b91505062000970565b5060405163057f3fa760e51b815260040160405180910390fd5b565b62000ad96040518060800160405280606081526020016000815260200160608152602001606081525090565b8160000362000b465760405162461bcd60e51b815260206004820152603260248201527f537464436861696e7320676574436861696e2875696e74323536293a2043686160448201527134b71024a21031b0b73737ba10313290181760711b606482015260840162000485565b62000b506200138f565b6000828152600360205260408120805462000b6b90620026ea565b80601f016020809104026020016040519081016040528092919081815260200182805462000b9990620026ea565b801562000bea5780601f1062000bbe5761010080835404028352916020019162000bea565b820191906000526020600020905b81548152906001019060200180831162000bcc57829003601f168201915b5050505050905060018160405162000c03919062002b01565b908152602001604051809103902060405180608001604052908160008201805462000c2e90620026ea565b80601f016020809104026020016040519081016040528092919081815260200182805462000c5c90620026ea565b801562000cad5780601f1062000c815761010080835404028352916020019162000cad565b820191906000526020600020905b81548152906001019060200180831162000c8f57829003601f168201915b505050505081526020016001820154815260200160028201805462000cd290620026ea565b80601f016020809104026020016040519081016040528092919081815260200182805462000d0090620026ea565b801562000d515780601f1062000d255761010080835404028352916020019162000d51565b820191906000526020600020905b81548152906001019060200180831162000d3357829003601f168201915b5050505050815260200160038201805462000d6c90620026ea565b80601f016020809104026020016040519081016040528092919081815260200182805462000d9a90620026ea565b801562000deb5780601f1062000dbf5761010080835404028352916020019162000deb565b820191906000526020600020905b81548152906001019060200180831162000dcd57829003601f168201915b50505091909252505050602081015160405163348051d760e11b8152600481018690529193501515906000805160206200acb183398151915290636900a3ae90602401600060405180830381865afa15801562000e4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000e7691908101906200287c565b60405160200162000e88919062002b1f565b6040516020818303038152906040529062000eb85760405162461bcd60e51b8152600401620004859190620026d5565b5062000ec5818362001cde565b9392505050565b62000f138160405160240162000ee39190620026d5565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905262001fe3565b50565b6000805160206200ad3e83398151915260001c6001600160a01b031663d930a0e66040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000f67573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000f9191908101906200287c565b600d9062000fa0908262002be2565b50600d60405160200162000fb5919062002d2a565b604051602081830303815290604052600e908162000fd4919062002be2565b5060405163348051d760e11b81524660048201526000906000805160206200acb183398151915290636900a3ae90602401600060405180830381865afa15801562001023573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200104d91908101906200287c565b9050600e8160405160200162001064919062002d55565b60408051601f198184030181529082905262001084929160200162002d80565b604051602081830303815290604052600e9081620010a3919062002be2565b50600f5460609060005b818110156200121957600f80546000805160206200acb1833981519152916388da6d3591869184916356ca623e919087908110620010ef57620010ef62002ab9565b600091825260209091206002909102016001015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401600060405180830381865afa15801562001148573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200117291908101906200287c565b600f858154811062001188576200118862002ab9565b90600052602060002090600202016000016040518463ffffffff1660e01b8152600401620011b99392919062002e2e565b6000604051808303816000875af1158015620011d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200120391908101906200287c565b5080620012108162002ae5565b915050620010ad565b506060306001600160a01b03166332e21ae76040518163ffffffff1660e01b81526004016000604051808303816000875af19250505080156200128057506040513d6000823e601f3d908101601f191682016040526200127d919081019062002e77565b60015b62001297576200128f620008e7565b90506200129b565b5190505b6040516388da6d3560e01b81526000805160206200acb1833981519152906388da6d3590620012d1908690859060040162002f44565b6000604051808303816000875af1158015620012f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200131b91908101906200287c565b60405163e23cd19f60e01b81529093506000805160206200acb18339815191529063e23cd19f9062001355908690600e9060040162002f93565b600060405180830381600087803b1580156200137057600080fd5b505af115801562001385573d6000803e3d6000fd5b5050505050505050565b60005460ff16156200139d57565b6000805460ff19166001179055604080518082018252600580825264185b9d9a5b60da1b602080840191909152835160a0810185526060810192835264105b9d9a5b60da1b6080820152918252617a6982820152835180850185526015815274687474703a2f2f3132372e302e302e313a3835343560581b91810191909152928101929092526200142e9162002004565b620014ab604051806040016040528060078152602001661b585a5b9b995d60ca1b81525060405180606001604052806040518060400160405280600781526020016613585a5b9b995d60ca1b8152508152602001600181526020016040518060600160405280603d81526020016200ac37603d9139905262002004565b6200152660405180604001604052806006815260200165676f65726c6960d01b815250604051806060016040528060405180604001604052806006815260200165476f65726c6960d01b8152508152602001600581526020016040518060600160405280603c81526020016200adce603c9139905262002004565b620015a5604051806040016040528060078152602001667365706f6c696160c81b8152506040518060600160405280604051806040016040528060078152602001665365706f6c696160c81b815250815260200162aa36a781526020016040518060600160405280603d81526020016200ac74603d9139905262002004565b62001641604051806040016040528060088152602001676f7074696d69736d60c01b8152506040518060600160405280604051806040016040528060088152602001674f7074696d69736d60c01b8152508152602001600a81526020016040518060400160405280601b81526020017f68747470733a2f2f6d61696e6e65742e6f7074696d69736d2e696f000000000081525081525062002004565b620016ec6040518060400160405280600f81526020016e6f7074696d69736d5f676f65726c6960881b81525060405180606001604052806040518060400160405280600f81526020016e4f7074696d69736d20476f65726c6960881b81525081526020016101a481526020016040518060400160405280601a81526020017f68747470733a2f2f676f65726c692e6f7074696d69736d2e696f00000000000081525081525062002004565b620017916040518060400160405280600c81526020016b617262697472756d5f6f6e6560a01b81525060405180606001604052806040518060400160405280600c81526020016b417262697472756d204f6e6560a01b815250815260200161a4b181526020016040518060400160405280601c81526020017f68747470733a2f2f617262312e617262697472756d2e696f2f7270630000000081525081525062002004565b6200182860405180604001604052806013815260200172617262697472756d5f6f6e655f676f65726c6960681b815250604051806060016040528060405180604001604052806013815260200172417262697472756d204f6e6520476f65726c6960681b815250815260200162066eed81526020016040518060600160405280602581526020016200ad5e60259139905262002004565b620018cf6040518060400160405280600d81526020016c617262697472756d5f6e6f766160981b81525060405180606001604052806040518060400160405280600d81526020016c417262697472756d204e6f766160981b815250815260200161a4ba81526020016040518060400160405280601c81526020017f68747470733a2f2f6e6f76612e617262697472756d2e696f2f7270630000000081525081525062002004565b62001969604051806040016040528060078152602001663837b63cb3b7b760c91b8152506040518060600160405280604051806040016040528060078152602001662837b63cb3b7b760c91b8152508152602001608981526020016040518060400160405280601781526020017f68747470733a2f2f706f6c79676f6e2d7270632e636f6d00000000000000000081525081525062002004565b620019f66040518060400160405280600e81526020016d706f6c79676f6e5f6d756d62616960901b81525060405180606001604052806040518060400160405280600e81526020016d506f6c79676f6e204d756d62616960901b81525081526020016201388181526020016040518060600160405280602181526020016200ad1d60219139905262002004565b62001a78604051806040016040528060098152602001686176616c616e63686560b81b8152506040518060600160405280604051806040016040528060098152602001684176616c616e63686560b81b815250815260200161a86a81526020016040518060600160405280602581526020016200acd160259139905262002004565b62001b046040518060400160405280600e81526020016d6176616c616e6368655f66756a6960901b81525060405180606001604052806040518060400160405280600e81526020016d4176616c616e6368652046756a6960901b815250815260200161a86981526020016040518060600160405280602a81526020016200ad83602a9139905262002004565b62001b916040518060400160405280600f81526020016e3137312fb9b6b0b93a2fb1b430b4b760891b81525060405180606001604052806040518060400160405280600f81526020016e2127211029b6b0b93a1021b430b4b760891b8152508152602001603881526020016040518060600160405280602181526020016200adad60219139905262002004565b62001c3a6040518060400160405280601781526020017f626e625f736d6172745f636861696e5f746573746e657400000000000000000081525060405180606001604052806040518060400160405280601781526020017f424e4220536d61727420436861696e20546573746e65740000000000000000008152508152602001606181526020016040518060600160405280602781526020016200acf660279139905262002004565b62000aab6040518060400160405280600c81526020016b33b737b9b4b9afb1b430b4b760a11b81525060405180606001604052806040518060400160405280600c81526020016b23b737b9b4b99021b430b4b760a11b8152508152602001606481526020016040518060400160405280601b81526020017f68747470733a2f2f7270632e676e6f736973636861696e2e636f6d000000000081525081525062002004565b62001d0a6040518060800160405280606081526020016000815260200160608152602001606081525090565b81606001515160000362001fda5760405163975a6ce960e01b81526000805160206200acb18339815191529063975a6ce99062001d4c908690600401620026d5565b600060405180830381865afa92505050801562001d8d57506040513d6000823e601f3d908101601f1916820160405262001d8a91908101906200287c565b60015b62001fd4573d80801562001dbe576040519150601f19603f3d011682016040523d82523d6000602084013e62001dc3565b606091505b50600062001dd18562002064565b60405160200162001de3919062002fbc565b60408051601f1981840301815291905260045490915060ff161562001eba576000805160206200ad3e83398151915260001c6001600160a01b031663d145736c8260028860405162001e36919062002b01565b9081526040519081900360200181206001600160e01b031960e085901b16825262001e65929160040162002f93565b6000604051808303816000875af115801562001e85573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001eaf91908101906200287c565b606085015262001f3c565b60405163f877cb1960e01b81526000805160206200acb18339815191529063f877cb199062001eee908490600401620026d5565b600060405180830381865afa15801562001f0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001f3691908101906200287c565b60608501525b60008560405160200162001f51919062002fea565b60408051601f198184030181529082905262001f7091602401620026d5565b60408051601f19818403018152919052602080820180516001600160e01b0316630bc4450360e01b178152855191860191909120825190912091925014158062001fbd5750606085015151155b1562001fcb57825183602001fd5b50505062001fda565b60608301525b50805b92915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000816040015190508060028460405162002020919062002b01565b908152602001604051809103902090816200203c919062002be2565b506040805160208101825260008152908301526200205b8383620021a8565b60409091015250565b606060008290506000815167ffffffffffffffff8111156200208a576200208a6200276b565b6040519080825280601f01601f191660200182016040528015620020b5576020820181803683370190505b50905060005b8251811015620021a0576000838281518110620020dc57620020dc62002ab9565b01602001516001600160f81b0319169050606160f81b8110801590620021105750603d60f91b6001600160f81b0319821611155b156200215c5762002127602060f883901c62003024565b60f81b8383815181106200213f576200213f62002ab9565b60200101906001600160f81b031916908160001a9053506200218a565b8083838151811062002172576200217262002ab9565b60200101906001600160f81b031916908160001a9053505b5080620021978162002ae5565b915050620020bb565b509392505050565b8151600003620022375760405162461bcd60e51b815260206004820152604d60248201527f537464436861696e7320736574436861696e28737472696e672c436861696e4460448201527f617461293a20436861696e20616c6961732063616e6e6f74206265207468652060648201526c32b6b83a3c9039ba3934b7339760991b608482015260a40162000485565b8060200151600003620022b35760405162461bcd60e51b815260206004820152603b60248201527f537464436861696e7320736574436861696e28737472696e672c436861696e4460448201527f617461293a20436861696e2049442063616e6e6f7420626520302e0000000000606482015260840162000485565b620022bd6200138f565b60208082015160009081526003909152604081208054620022de90620026ea565b80601f01602080910402602001604051908101604052809291908181526020018280546200230c90620026ea565b80156200235d5780601f1062002331576101008083540402835291602001916200235d565b820191906000526020600020905b8154815290600101906020018083116200233f57829003601f168201915b5050505050905080516000148062002382575082805190602001208180519060200120145b602083015160405163348051d760e11b815260048101919091526000805160206200acb183398151915290636900a3ae90602401600060405180830381865afa158015620023d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620023fe91908101906200287c565b826040516020016200241292919062003040565b60405160208183030381529060405290620024425760405162461bcd60e51b8152600401620004859190620026d5565b50600060018460405162002457919062002b01565b90815260200160405180910390206001015490506003600082815260200190815260200160002060006200248c919062002576565b604051806080016040528084600001518152602001846020015181526020018581526020018460400151815250600185604051620024cb919062002b01565b90815260405190819003602001902081518190620024ea908262002be2565b5060208201516001820155604082015160028201906200250b908262002be2565b506060820151600382019062002522908262002be2565b505050602080840151600090815260039091526040902062002545858262002be2565b5050505050565b612a0180620030e283390190565b610deb8062005ae383390190565b61436980620068ce83390190565b5080546200258490620026ea565b6000825580601f1062002595575050565b601f01602090049060005260206000209081019062000f1391905b80821115620025c65760008155600101620025b0565b5090565b600060208284031215620025dd57600080fd5b5035919050565b60005b8381101562002601578181015183820152602001620025e7565b50506000910152565b6000815180845262002624816020860160208601620025e4565b601f01601f19169290920160200192915050565b6040815260006200264d60408301856200260a565b905060018060a01b03831660208301529392505050565b6020815260008251608060208401526200268260a08401826200260a565b9050602084015160408401526040840151601f1980858403016060860152620026ac83836200260a565b9250606086015191508085840301608086015250620026cc82826200260a565b95945050505050565b60208152600062000ec560208301846200260a565b600181811c90821680620026ff57607f821691505b6020821081036200272057634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156200273957600080fd5b5051919050565b6000602082840312156200275357600080fd5b81516001600160a01b038116811462000ec557600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715620027a757620027a76200276b565b60405290565b6040516080810167ffffffffffffffff81118282101715620027a757620027a76200276b565b604051601f8201601f1916810167ffffffffffffffff81118282101715620027ff57620027ff6200276b565b604052919050565b600082601f8301126200281957600080fd5b815167ffffffffffffffff8111156200283657620028366200276b565b6200284b601f8201601f1916602001620027d3565b8181528460208386010111156200286157600080fd5b62002874826020830160208701620025e4565b949350505050565b6000602082840312156200288f57600080fd5b815167ffffffffffffffff811115620028a757600080fd5b620028748482850162002807565b7f666163746f727920636f6e7472616374206465706c6f7965642061743a200000815260008251620028ef81601e850160208701620025e4565b91909101601e0192915050565b7f776e726b20636f6e7472616374206465706c6f7965642061743a2000000000008152600082516200293681601b850160208701620025e4565b91909101601b0192915050565b7f726f7574657220636f6e7472616374206465706c6f7965642061743a200000008152600082516200297d81601d850160208701620025e4565b91909101601d0192915050565b600060208083850312156200299e57600080fd5b825167ffffffffffffffff80821115620029b757600080fd5b818501915085601f830112620029cc57600080fd5b815181811115620029e157620029e16200276b565b620029f1848260051b01620027d3565b81815260059190911b8301840190848101908883111562002a1157600080fd5b8585015b8381101562002aac5780518581111562002a2e57600080fd5b8601603f81018b1362002a4057600080fd5b62002a4a62002781565b808c60608401111562002a5c57600080fd5b8983015b6060840181101562002a9b5780518981111562002a7c57600080fd5b62002a8c8f8d8388010162002807565b845250918a01918a0162002a60565b508552505091860191860162002a15565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162002afa5762002afa62002acf565b5060010190565b6000825162002b15818460208701620025e4565b9190910192915050565b7f537464436861696e7320676574436861696e2875696e74323536293a2043686181526a034b7103bb4ba341024a2160ad1b60208201526000825162002b6d81602b850160208701620025e4565b6a103737ba103337bab7321760a91b602b939091019283015250603601919050565b601f82111562002bdd57600081815260208120601f850160051c8101602086101562002bb85750805b601f850160051c820191505b8181101562002bd95782815560010162002bc4565b5050505b505050565b815167ffffffffffffffff81111562002bff5762002bff6200276b565b62002c178162002c108454620026ea565b8462002b8f565b602080601f83116001811462002c4f576000841562002c365750858301515b600019600386901b1c1916600185901b17855562002bd9565b600085815260208120601f198616915b8281101562002c805788860151825594840194600190910190840162002c5f565b508582101562002c9f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000815462002cbe81620026ea565b6001828116801562002cd9576001811462002cef5762002d20565b60ff198416875282151583028701945062002d20565b8560005260208060002060005b8581101562002d175781548a82015290840190820162002cfc565b50505082870194505b5050505092915050565b600062002d38828462002caf565b6c2f6465706c6f796d656e74732f60981b8152600d019392505050565b6000825162002d69818460208701620025e4565b64173539b7b760d91b920191825250600501919050565b600062002d8e828562002caf565b835162002da0818360208801620025e4565b01949350505050565b6000815462002db881620026ea565b80855260206001838116801562002dd8576001811462002df35762002e23565b60ff1985168884015283151560051b88018301955062002e23565b866000528260002060005b8581101562002e1b5781548a820186015290830190840162002dfe565b890184019650505b505050505092915050565b60608152600062002e4360608301866200260a565b828103602084015262002e5781866200260a565b9050828103604084015262002e6d818562002da9565b9695505050505050565b60006020828403121562002e8a57600080fd5b815167ffffffffffffffff8082111562002ea357600080fd5b908301906080828603121562002eb857600080fd5b62002ec2620027ad565b82518281111562002ed257600080fd5b62002ee08782860162002807565b8252506020830151602082015260408301518281111562002f0057600080fd5b62002f0e8782860162002807565b60408301525060608301518281111562002f2757600080fd5b62002f358782860162002807565b60608301525095945050505050565b60608152600062002f5960608301856200260a565b828103806020850152600b82526a6e6574776f726b4e616d6560a81b602083015260408101604085015250620026cc60408201856200260a565b60408152600062002fa860408301856200260a565b8281036020840152620026cc818562002da9565b6000825162002fd0818460208701620025e4565b6717d49410d7d5549360c21b920191825250600801919050565b6f034b73b30b634b210393831903ab936160851b81526000825162003017816010850160208701620025e4565b9190910160100192915050565b60ff828116828216039081111562001fdd5762001fdd62002acf565b7f537464436861696e7320736574436861696e28737472696e672c436861696e4481526e030ba30949d1021b430b4b71024a21608d1b6020820152600083516200309281602f850160208801620025e4565b711030b63932b0b23c903ab9b2b210313c901160711b602f918401918201528351620030c6816041840160208801620025e4565b61111760f11b6041929091019182015260430194935050505056fe608060405234801561001057600080fd5b50604051612a01380380612a0183398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61296e806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af6146100f4578063c9c6539614610109578063e6a439051461011c578063f46901ed1461015057600080fd5b8063017e7e581461008d578063094b7415146100bd5780631e3dd18b146100d0578063574f2ba3146100e3575b600080fd5b6000546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100a0906001600160a01b031681565b6100a06100de366004610583565b610163565b6003546040519081526020016100b4565b6101076101023660046105b8565b61018d565b005b6100a06101173660046105da565b610205565b6100a061012a3660046105da565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b61010761015e3660046105b8565b610503565b6003818154811061017357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146101e35760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b60448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316036102685760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f414444524553534553000060448201526064016101da565b600080836001600160a01b0316856001600160a01b03161061028b57838561028e565b84845b90925090506001600160a01b0382166102e95760405162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f4144445245535300000000000000000060448201526064016101da565b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156103575760405162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b60448201526064016101da565b60006040518060200161036990610576565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b15801561041b57600080fd5b505af115801561042f573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6001546001600160a01b031633146105545760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b60448201526064016101da565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61232b8061060e83390190565b60006020828403121561059557600080fd5b5035919050565b80356001600160a01b03811681146105b357600080fd5b919050565b6000602082840312156105ca57600080fd5b6105d38261059c565b9392505050565b600080604083850312156105ed57600080fd5b6105f68361059c565b91506106046020840161059c565b9050925092905056fe60806040526001600c5534801561001557600080fd5b5060408051808201825260098152682737b93232b5902b1960b91b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fde430dc832330fbaacead3e6c47b78169d8abe3f0fff0a13b56a3f3b9c0a1768818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b03191633179055612224806101076000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610407578063d505accf1461041a578063dd62ed3e1461042d578063fff6cae91461045857600080fd5b8063ba9a7a56146103d8578063bc25cf77146103e1578063c45a0155146103f457600080fd5b80637ecebe00116100d35780637ecebe001461035857806389afcb441461037857806395d89b41146103a0578063a9059cbb146103c557600080fd5b80636a6278421461031c57806370a082311461032f5780637464fc3d1461034f57600080fd5b806323b872dd116101665780633644e515116101405780633644e515146102ee578063485cc955146102f75780635909c0d51461030a5780635a3d54931461031357600080fd5b806323b872dd1461029a57806330adf81f146102ad578063313ce567146102d457600080fd5b8063022c0d9f146101ae57806306fdde03146101c35780630902f1ac14610201578063095ea7b3146102355780630dfe16811461025857806318160ddd14610283575b600080fd5b6101c16101bc366004611db6565b610460565b005b6101eb604051806040016040528060098152602001682737b93232b5902b1960b91b81525081565b6040516101f89190611e70565b60405180910390f35b610209610966565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101f8565b610248610243366004611ea3565b610990565b60405190151581526020016101f8565b60065461026b906001600160a01b031681565b6040516001600160a01b0390911681526020016101f8565b61028c60005481565b6040519081526020016101f8565b6102486102a8366004611ecf565b6109a7565b61028c7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102dc601281565b60405160ff90911681526020016101f8565b61028c60035481565b6101c1610305366004611f10565b610a3b565b61028c60095481565b61028c600a5481565b61028c61032a366004611f49565b610aba565b61028c61033d366004611f49565b60016020526000908152604090205481565b61028c600b5481565b61028c610366366004611f49565b60046020526000908152604090205481565b61038b610386366004611f49565b610d82565b604080519283526020830191909152016101f8565b6101eb6040518060400160405280600681526020016504e524b2d4c560d41b81525081565b6102486103d3366004611ea3565b6110e8565b61028c6103e881565b6101c16103ef366004611f49565b6110f5565b60055461026b906001600160a01b031681565b60075461026b906001600160a01b031681565b6101c1610428366004611f66565b611209565b61028c61043b366004611f10565b600260209081526000928352604080842090915290825290205481565b6101c161141d565b600c5460011461048b5760405162461bcd60e51b815260040161048290611fdd565b60405180910390fd5b6000600c558415158061049e5750600084115b6104f85760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608401610482565b600080610503610966565b5091509150816001600160701b0316871080156105285750806001600160701b031686105b61057e5760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b6064820152608401610482565b60065460075460009182916001600160a01b039182169190811690891682148015906105bc5750806001600160a01b0316896001600160a01b031614155b6106005760405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606401610482565b8a1561061157610611828a8d611541565b891561062257610622818a8c611541565b861561068f576040516304347a1760e21b81526001600160a01b038a16906310d1e85c9061065c9033908f908f908e908e90600401612008565b600060405180830381600087803b15801561067657600080fd5b505af115801561068a573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156106d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f79190612054565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190612054565b92505050600089856001600160701b031661077d9190612083565b831161078a5760006107a7565b61079d8a6001600160701b038716612083565b6107a79084612083565b905060006107be8a6001600160701b038716612083565b83116107cb5760006107e8565b6107de8a6001600160701b038716612083565b6107e89084612083565b905060008211806107f95750600081115b6108515760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608401610482565b600061087361086184600361168c565b61086d876103e861168c565b906116f3565b9050600061088561086184600361168c565b90506108aa620f42406108a46001600160701b038b8116908b1661168c565b9061168c565b6108b4838361168c565b10156108f15760405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606401610482565b50506108ff84848888611749565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600061099d338484611935565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610a26576001600160a01b0384166000908152600260209081526040808320338452909152902054610a0190836116f3565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610a31848484611997565b5060019392505050565b6005546001600160a01b03163314610a8c5760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606401610482565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6000600c54600114610ade5760405162461bcd60e51b815260040161048290611fdd565b6000600c81905580610aee610966565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190612054565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd69190612054565b90506000610bed836001600160701b0387166116f3565b90506000610c04836001600160701b0387166116f3565b90506000610c128787611a3d565b60008054919250819003610c4c57610c386103e861086d610c33878761168c565b611b7a565b9850610c4760006103e8611bea565b610c93565b610c906001600160701b038916610c63868461168c565b610c6d91906120ac565b6001600160701b038916610c81868561168c565b610c8b91906120ac565b611c79565b98505b60008911610cf45760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d3525395115160c21b6064820152608401610482565b610cfe8a8a611bea565b610d0a86868a8a611749565b8115610d3457600854610d30906001600160701b0380821691600160701b90041661168c565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c54600114610da75760405162461bcd60e51b815260040161048290611fdd565b6000600c81905580610db7610966565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a0823190602401602060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e359190612054565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190612054565b30600090815260016020526040812054919250610ec08888611a3d565b60005490915080610ed1848761168c565b610edb91906120ac565b9a5080610ee8848661168c565b610ef291906120ac565b995060008b118015610f04575060008a115b610f615760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d0955493915160c21b6064820152608401610482565b610f6b3084611c91565b610f76878d8d611541565b610f81868d8c611541565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa158015610fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe99190612054565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190612054565b935061106285858b8b611749565b811561108c57600854611088906001600160701b0380821691600160701b90041661168c565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b600061099d338484611997565b600c546001146111175760405162461bcd60e51b815260040161048290611fdd565b6000600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916111b291849186916111ad916001600160701b039091169084906370a08231906024015b602060405180830381865afa158015611189573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190612054565b611541565b6008546040516370a0823160e01b81523060048201526111ff91839186916111ad91600160701b9091046001600160701b0316906001600160a01b038516906370a082319060240161116c565b50506001600c5550565b4284101561124e5760405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606401610482565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876112a1836120c0565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161131a92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611385573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906113bb5750886001600160a01b0316816001600160a01b0316145b6114075760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e4154555245000000006044820152606401610482565b611412898989611935565b505050505050505050565b600c5460011461143f5760405162461bcd60e51b815260040161048290611fdd565b6000600c556006546040516370a0823160e01b815230600482015261153a916001600160a01b0316906370a0823190602401602060405180830381865afa15801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b29190612054565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156114fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151e9190612054565b6008546001600160701b0380821691600160701b900416611749565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916115cd91906120d9565b6000604051808303816000865af19150503d806000811461160a576040519150601f19603f3d011682016040523d82523d6000602084013e61160f565b606091505b509150915081801561163957508051158061163957508080602001905181019061163991906120f5565b6116855760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c45440000000000006044820152606401610482565b5050505050565b60008115806116b0575082826116a28183612117565b92506116ae90836120ac565b145b6109a15760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610482565b6000826117008382612083565b91508111156109a15760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610482565b6001600160701b03841180159061176757506001600160701b038311155b6117a95760405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606401610482565b60006117ba6401000000004261212e565b6008549091506000906117da90600160e01b900463ffffffff1683612142565b905060008163ffffffff161180156117fa57506001600160701b03841615155b801561180e57506001600160701b03831615155b1561189d578063ffffffff166118368561182786611d1b565b6001600160e01b031690611d34565b6001600160e01b03166118499190612117565b6009600082825461185a9190612166565b909155505063ffffffff81166118738461182787611d1b565b6001600160e01b03166118869190612117565b600a60008282546118979190612166565b90915550505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166000908152600160205260409020546119ba90826116f3565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546119e99082611d49565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061198a9085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab79190612179565b600b546001600160a01b038216158015945091925090611b66578015611b61576000611af2610c336001600160701b0388811690881661168c565b90506000611aff83611b7a565b905080821115611b5e576000611b21611b1884846116f3565b6000549061168c565b90506000611b3a83611b3486600561168c565b90611d49565b90506000611b4882846120ac565b90508015611b5a57611b5a8782611bea565b5050505b50505b611b72565b8015611b72576000600b555b505092915050565b60006003821115611bdb5750806000611b946002836120ac565b611b9f906001612166565b90505b81811015611bd557905080600281611bba81866120ac565b611bc49190612166565b611bce91906120ac565b9050611ba2565b50919050565b8115611be5575060015b919050565b600054611bf79082611d49565b60009081556001600160a01b038316815260016020526040902054611c1c9082611d49565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611c6d9085815260200190565b60405180910390a35050565b6000818310611c885781611c8a565b825b9392505050565b6001600160a01b038216600090815260016020526040902054611cb490826116f3565b6001600160a01b03831660009081526001602052604081209190915554611cdb90826116f3565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611c6d565b60006109a1600160701b6001600160701b038416612196565b6000611c8a6001600160701b038316846121c8565b600082611d568382612166565b91508110156109a15760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610482565b6001600160a01b0381168114611db357600080fd5b50565b600080600080600060808688031215611dce57600080fd5b85359450602086013593506040860135611de781611d9e565b9250606086013567ffffffffffffffff80821115611e0457600080fd5b818801915088601f830112611e1857600080fd5b813581811115611e2757600080fd5b896020828501011115611e3957600080fd5b9699959850939650602001949392505050565b60005b83811015611e67578181015183820152602001611e4f565b50506000910152565b6020815260008251806020840152611e8f816040850160208701611e4c565b601f01601f19169190910160400192915050565b60008060408385031215611eb657600080fd5b8235611ec181611d9e565b946020939093013593505050565b600080600060608486031215611ee457600080fd5b8335611eef81611d9e565b92506020840135611eff81611d9e565b929592945050506040919091013590565b60008060408385031215611f2357600080fd5b8235611f2e81611d9e565b91506020830135611f3e81611d9e565b809150509250929050565b600060208284031215611f5b57600080fd5b8135611c8a81611d9e565b600080600080600080600060e0888a031215611f8157600080fd5b8735611f8c81611d9e565b96506020880135611f9c81611d9e565b95506040880135945060608801359350608088013560ff81168114611fc057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825260119082015270155b9a5cddd85c158c8e881313d0d2d151607a1b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561206657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109a1576109a161206d565b634e487b7160e01b600052601260045260246000fd5b6000826120bb576120bb612096565b500490565b6000600182016120d2576120d261206d565b5060010190565b600082516120eb818460208701611e4c565b9190910192915050565b60006020828403121561210757600080fd5b81518015158114611c8a57600080fd5b80820281158282048414176109a1576109a161206d565b60008261213d5761213d612096565b500690565b63ffffffff82811682821603908082111561215f5761215f61206d565b5092915050565b808201808211156109a1576109a161206d565b60006020828403121561218b57600080fd5b8151611c8a81611d9e565b6001600160e01b038281168282168181028316929181158285048214176121bf576121bf61206d565b50505092915050565b60006001600160e01b03838116806121e2576121e2612096565b9216919091049291505056fea2646970667358221220bbc60172fc2521c31caec32f38fac9445acb0753cd7e608c826d98a8ef3ff7cc64736f6c63430008150033a2646970667358221220bfdf406d35e3e01442d949eec294c392a8eb8fe2087b3d0ee39240872706b87d64736f6c6343000815003360806040523480156200001157600080fd5b506040518060400160405280600b81526020016a57726170706564204e524b60a81b81525060405180604001604052806004815260200163574e524b60e01b815250816003908162000064919062000121565b50600462000073828262000121565b505050620001ed565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a757607f821691505b602082108103620000c857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011c57600081815260208120601f850160051c81016020861015620000f75750805b601f850160051c820191505b81811015620001185782815560010162000103565b5050505b505050565b81516001600160401b038111156200013d576200013d6200007c565b62000155816200014e845462000092565b84620000ce565b602080601f8311600181146200018d5760008415620001745750858301515b600019600386901b1c1916600185901b17855562000118565b600085815260208120601f198616915b82811015620001be578886015182559484019460019091019084016200019d565b5085821015620001dd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610bee80620001fd6000396000f3fe6080604052600436106100c65760003560e01c8063395093511161007f578063a457c2d711610059578063a457c2d71461021e578063a9059cbb1461023e578063d0e30db0146100d5578063dd62ed3e1461025e576100d5565b806339509351146101b357806370a08231146101d357806395d89b4114610209576100d5565b806306fdde03146100dd578063095ea7b31461010857806318160ddd1461013857806323b872dd146101575780632e1a7d4d14610177578063313ce56714610197576100d5565b366100d5576100d361027e565b005b6100d361027e565b3480156100e957600080fd5b506100f261028a565b6040516100ff9190610a1f565b60405180910390f35b34801561011457600080fd5b50610128610123366004610a89565b61031c565b60405190151581526020016100ff565b34801561014457600080fd5b506002545b6040519081526020016100ff565b34801561016357600080fd5b50610128610172366004610ab3565b610336565b34801561018357600080fd5b506100d3610192366004610aef565b61035a565b3480156101a357600080fd5b50604051601281526020016100ff565b3480156101bf57600080fd5b506101286101ce366004610a89565b610407565b3480156101df57600080fd5b506101496101ee366004610b08565b6001600160a01b031660009081526020819052604090205490565b34801561021557600080fd5b506100f2610429565b34801561022a57600080fd5b50610128610239366004610a89565b610438565b34801561024a57600080fd5b50610128610259366004610a89565b6104b3565b34801561026a57600080fd5b50610149610279366004610b2a565b6104c1565b61028833346104ec565b565b60606003805461029990610b5d565b80601f01602080910402602001604051908101604052809291908181526020018280546102c590610b5d565b80156103125780601f106102e757610100808354040283529160200191610312565b820191906000526020600020905b8154815290600101906020018083116102f557829003601f168201915b5050505050905090565b60003361032a8185856105ab565b60019150505b92915050565b6000336103448582856106cf565b61034f858585610749565b506001949350505050565b3361036581836108ed565b6000816001600160a01b03168360405160006040518083038185875af1925050503d80600081146103b2576040519150601f19603f3d011682016040523d82523d6000602084013e6103b7565b606091505b50509050806104025760405162461bcd60e51b81526020600482015260126024820152716661696c656420746f2073656e64204e524b60701b60448201526064015b60405180910390fd5b505050565b60003361032a81858561041a83836104c1565b6104249190610b97565b6105ab565b60606004805461029990610b5d565b6000338161044682866104c1565b9050838110156104a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103f9565b61034f82868684036105ab565b60003361032a818585610749565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0382166105425760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103f9565b80600260008282546105549190610b97565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b03831661060d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103f9565b6001600160a01b03821661066e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103f9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006106db84846104c1565b9050600019811461074357818110156107365760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103f9565b61074384848484036105ab565b50505050565b6001600160a01b0383166107ad5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103f9565b6001600160a01b03821661080f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103f9565b6001600160a01b038316600090815260208190526040902054818110156108875760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103f9565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610743565b6001600160a01b03821661094d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103f9565b6001600160a01b038216600090815260208190526040902054818110156109c15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103f9565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600060208083528351808285015260005b81811015610a4c57858101830151858201604001528201610a30565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a8457600080fd5b919050565b60008060408385031215610a9c57600080fd5b610aa583610a6d565b946020939093013593505050565b600080600060608486031215610ac857600080fd5b610ad184610a6d565b9250610adf60208501610a6d565b9150604084013590509250925092565b600060208284031215610b0157600080fd5b5035919050565b600060208284031215610b1a57600080fd5b610b2382610a6d565b9392505050565b60008060408385031215610b3d57600080fd5b610b4683610a6d565b9150610b5460208401610a6d565b90509250929050565b600181811c90821680610b7157607f821691505b602082108103610b9157634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561033057634e487b7160e01b600052601160045260246000fdfea264697066735822122046b2bc867c4d2a78e90d9f25b7f3959cd6fb5eee533407c011afbe035110cf1b64736f6c6343000815003360c06040523480156200001157600080fd5b506040516200436938038062004369833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a051614136620002336000396000818161015f0152818161036d01528181610522015281816105710152818161062d0152818161085001528181610b8901528181610cc401528181611014015281816110f7015281816111a20152818161123501528181611353015281816113e101528181611629015281816116e101528181611772015281816117ef0152818161186301528181611caa01528181611e9b01528181611ef101528181611f2501528181611fba015281816120f301528181612205015261229301526000818161042c015281816106a90152818161077b015281816109360152818161096f01528181610a6601528181610c0501528181610ca201528181610dd9015281816112b0015281816114130152818161155e0152818161189501528181611ab401528181611c5801528181611c8801528181611db101528181611ecf0152818161216e015281816122c501528181612b9001528181612be001528181612eab01528181613013015281816133c30152818161346501526134dc01526141366000f3fe60806040526004361061014f5760003560e01c80638803dbee116100b6578063c45a01551161006f578063c45a01551461041a578063d06ca61f1461044e578063ded9382a1461046e578063e8e337001461048e578063f305d719146104c9578063fb3bdb41146104dc57600080fd5b80638803dbee1461033b578063ad5c46481461035b578063ad615dec146103a7578063af2979eb146103c7578063b6f9de95146103e7578063baa2abde146103fa57600080fd5b80634a25d94a116101085780634a25d94a146102885780635b0d5984146102a85780635c11d795146102c8578063791ac947146102e85780637ff36ab51461030857806385f8c2591461031b57600080fd5b806302751cec14610193578063054d50d4146101cd57806318cbafe5146101fb5780631f00ca74146102285780632195995c1461024857806338ed17391461026857600080fd5b3661018e57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461018c5761018c61373f565b005b600080fd5b34801561019f57600080fd5b506101b36101ae36600461377d565b6104ef565b604080519283526020830191909152015b60405180910390f35b3480156101d957600080fd5b506101ed6101e83660046137db565b6105eb565b6040519081526020016101c4565b34801561020757600080fd5b5061021b61021636600461384c565b610600565b6040516101c491906138bf565b34801561023457600080fd5b5061021b610243366004613919565b61092f565b34801561025457600080fd5b506101b3610263366004613a09565b610965565b34801561027457600080fd5b5061021b61028336600461384c565b610a3e565b34801561029457600080fd5b5061021b6102a336600461384c565b610b5c565b3480156102b457600080fd5b506101ed6102c3366004613ab3565b610c9a565b3480156102d457600080fd5b5061018c6102e336600461384c565b610d87565b3480156102f457600080fd5b5061018c61030336600461384c565b610fe9565b61021b610316366004613b49565b611210565b34801561032757600080fd5b506101ed6103363660046137db565b611529565b34801561034757600080fd5b5061021b61035636600461384c565b611536565b34801561036757600080fd5b5061038f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101c4565b3480156103b357600080fd5b506101ed6103c23660046137db565b6115f3565b3480156103d357600080fd5b506101ed6103e236600461377d565b611600565b61018c6103f5366004613b49565b61174f565b34801561040657600080fd5b506101b3610415366004613bb0565b611a89565b34801561042657600080fd5b5061038f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045a57600080fd5b5061021b610469366004613919565b611c51565b34801561047a57600080fd5b506101b3610489366004613ab3565b611c7e565b34801561049a57600080fd5b506104ae6104a9366004613c22565b611d71565b604080519384526020840192909252908201526060016101c4565b6104ae6104d736600461377d565b611e6f565b61021b6104ea366004613b49565b6120ce565b600080824281101561051c5760405162461bcd60e51b815260040161051390613c9e565b60405180910390fd5b61054b897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611a89565b909350915061055b89868561241d565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156105bd57600080fd5b505af11580156105d1573d6000803e3d6000fd5b505050506105df858361254e565b50965096945050505050565b60006105f884848461262d565b949350505050565b606081428110156106235760405162461bcd60e51b815260040161051390613c9e565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868661065a600182613ceb565b81811061066957610669613cfe565b905060200201602081019061067e9190613d14565b6001600160a01b0316146106a45760405162461bcd60e51b815260040161051390613d38565b6107027f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061270b92505050565b91508682600184516107149190613ceb565b8151811061072457610724613cfe565b6020026020010151101561074a5760405162461bcd60e51b815260040161051390613d6f565b61080f8686600081811061076057610760613cfe565b90506020020160208101906107759190613d14565b336107ef7f00000000000000000000000000000000000000000000000000000000000000008a8a60008181106107ad576107ad613cfe565b90506020020160208101906107c29190613d14565b8b8b60018181106107d5576107d5613cfe565b90506020020160208101906107ea9190613d14565b612896565b8560008151811061080257610802613cfe565b602002602001015161296f565b61084e82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250612aad915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161088c9190613ceb565b8151811061089c5761089c613cfe565b60200260200101516040518263ffffffff1660e01b81526004016108c291815260200190565b600060405180830381600087803b1580156108dc57600080fd5b505af11580156108f0573d6000803e3d6000fd5b505050506109248483600185516109079190613ceb565b8151811061091757610917613cfe565b602002602001015161254e565b509695505050505050565b606061095c7f00000000000000000000000000000000000000000000000000000000000000008484612cb5565b90505b92915050565b60008060006109957f00000000000000000000000000000000000000000000000000000000000000008f8f612896565b90506000876109a4578c6109a8565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf906109e3903390309086908f908e908e908e90600401613dba565b600060405180830381600087803b1580156109fd57600080fd5b505af1158015610a11573d6000803e3d6000fd5b50505050610a248f8f8f8f8f8f8f611a89565b809450819550505050509b509b9950505050505050505050565b60608142811015610a615760405162461bcd60e51b815260040161051390613c9e565b610abf7f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061270b92505050565b9150868260018451610ad19190613ceb565b81518110610ae157610ae1613cfe565b60200260200101511015610b075760405162461bcd60e51b815260040161051390613d6f565b610b1d8686600081811061076057610760613cfe565b61092482878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612aad915050565b60608142811015610b7f5760405162461bcd60e51b815260040161051390613c9e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610bb6600182613ceb565b818110610bc557610bc5613cfe565b9050602002016020810190610bda9190613d14565b6001600160a01b031614610c005760405162461bcd60e51b815260040161051390613d38565b610c5e7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612cb592505050565b91508682600081518110610c7457610c74613cfe565b6020026020010151111561074a5760405162461bcd60e51b815260040161051390613dfb565b600080610ce87f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000612896565b9050600086610cf7578b610cfb565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90610d36903390309086908e908d908d908d90600401613dba565b600060405180830381600087803b158015610d5057600080fd5b505af1158015610d64573d6000803e3d6000fd5b50505050610d768d8d8d8d8d8d611600565b9d9c50505050505050505050505050565b8042811015610da85760405162461bcd60e51b815260040161051390613c9e565b610e3985856000818110610dbe57610dbe613cfe565b9050602002016020810190610dd39190613d14565b33610e337f000000000000000000000000000000000000000000000000000000000000000089896000818110610e0b57610e0b613cfe565b9050602002016020810190610e209190613d14565b8a8a60018181106107d5576107d5613cfe565b8a61296f565b60008585610e48600182613ceb565b818110610e5757610e57613cfe565b9050602002016020810190610e6c9190613d14565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed89190613e42565b9050610f18868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250612e36915050565b86610fc1828888610f2a600182613ceb565b818110610f3957610f39613cfe565b9050602002016020810190610f4e9190613d14565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a08231906024015b602060405180830381865afa158015610f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbb9190613e42565b906130cf565b1015610fdf5760405162461bcd60e51b815260040161051390613d6f565b5050505050505050565b804281101561100a5760405162461bcd60e51b815260040161051390613c9e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585611041600182613ceb565b81811061105057611050613cfe565b90506020020160208101906110659190613d14565b6001600160a01b03161461108b5760405162461bcd60e51b815260040161051390613d38565b6110a185856000818110610dbe57610dbe613cfe565b6110df858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250612e36915050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116a9190613e42565b90508681101561118c5760405162461bcd60e51b815260040161051390613d6f565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156111ee57600080fd5b505af1158015611202573d6000803e3d6000fd5b50505050610fdf848261254e565b606081428110156112335760405162461bcd60e51b815260040161051390613c9e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061127057611270613cfe565b90506020020160208101906112859190613d14565b6001600160a01b0316146112ab5760405162461bcd60e51b815260040161051390613d38565b6113097f00000000000000000000000000000000000000000000000000000000000000003488888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061270b92505050565b915086826001845161131b9190613ceb565b8151811061132b5761132b613cfe565b602002602001015110156113515760405162461bcd60e51b815260040161051390613d6f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061139357611393613cfe565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6114457f000000000000000000000000000000000000000000000000000000000000000089896000818110610e0b57610e0b613cfe565b8460008151811061145857611458613cfe565b60200260200101516040518363ffffffff1660e01b81526004016114919291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156114b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d49190613e5b565b6114e0576114e061373f565b61151f82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612aad915050565b5095945050505050565b60006105f8848484613125565b606081428110156115595760405162461bcd60e51b815260040161051390613c9e565b6115b77f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612cb592505050565b915086826000815181106115cd576115cd613cfe565b60200260200101511115610b075760405162461bcd60e51b815260040161051390613dfb565b60006105f88484846131fe565b600081428110156116235760405162461bcd60e51b815260040161051390613c9e565b611652887f00000000000000000000000000000000000000000000000000000000000000008989893089611a89565b6040516370a0823160e01b81523060048201529093506116cb9150899086906001600160a01b038316906370a0823190602401602060405180830381865afa1580156116a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c69190613e42565b61241d565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561172d57600080fd5b505af1158015611741573d6000803e3d6000fd5b50505050610924848361254e565b80428110156117705760405162461bcd60e51b815260040161051390613c9e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858560008181106117ad576117ad613cfe565b90506020020160208101906117c29190613d14565b6001600160a01b0316146117e85760405162461bcd60e51b815260040161051390613d38565b60003490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561184857600080fd5b505af115801561185c573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6118c77f000000000000000000000000000000000000000000000000000000000000000089896000818110610e0b57610e0b613cfe565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119389190613e5b565b6119445761194461373f565b60008686611953600182613ceb565b81811061196257611962613cfe565b90506020020160208101906119779190613d14565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa1580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190613e42565b9050611a23878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612e36915050565b87610fc1828989611a35600182613ceb565b818110611a4457611a44613cfe565b9050602002016020810190611a599190613d14565b6040516370a0823160e01b81526001600160a01b038a8116600483015291909116906370a0823190602401610f7a565b6000808242811015611aad5760405162461bcd60e51b815260040161051390613c9e565b6000611ada7f00000000000000000000000000000000000000000000000000000000000000008c8c612896565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190613e5b565b5060405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc59190613e78565b915091506000611bd58e8e61329e565b509050806001600160a01b03168e6001600160a01b031614611bf8578183611bfb565b82825b90975095508a871015611c205760405162461bcd60e51b815260040161051390613e9c565b89861015611c405760405162461bcd60e51b815260040161051390613ee2565b505050505097509795505050505050565b606061095c7f0000000000000000000000000000000000000000000000000000000000000000848461270b565b6000806000611cce7f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000612896565b9050600087611cdd578c611ce1565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611d1c903390309086908f908e908e908e90600401613dba565b600060405180830381600087803b158015611d3657600080fd5b505af1158015611d4a573d6000803e3d6000fd5b50505050611d5c8e8e8e8e8e8e6104ef565b909f909e509c50505050505050505050505050565b60008060008342811015611d975760405162461bcd60e51b815260040161051390613c9e565b611da58c8c8c8c8c8c613395565b90945092506000611dd77f00000000000000000000000000000000000000000000000000000000000000008e8e612896565b9050611de58d33838861296f565b611df18c33838761296f565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190613e42565b92505050985098509895505050505050565b60008060008342811015611e955760405162461bcd60e51b815260040161051390613c9e565b611ec38a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c613395565b90945092506000611f157f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000612896565b9050611f238b33838861296f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f7e57600080fd5b505af1158015611f92573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015612007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202b9190613e5b565b6120375761203761373f565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af115801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a39190613e42565b9250833411156120c0576120c0336120bb8634613ceb565b61254e565b505096509650969350505050565b606081428110156120f15760405162461bcd60e51b815260040161051390613c9e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061212e5761212e613cfe565b90506020020160208101906121439190613d14565b6001600160a01b0316146121695760405162461bcd60e51b815260040161051390613d38565b6121c77f000000000000000000000000000000000000000000000000000000000000000088888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612cb592505050565b915034826000815181106121dd576121dd613cfe565b602002602001015111156122035760405162461bcd60e51b815260040161051390613dfb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061224557612245613cfe565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561227857600080fd5b505af115801561228c573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6122f77f000000000000000000000000000000000000000000000000000000000000000089896000818110610e0b57610e0b613cfe565b8460008151811061230a5761230a613cfe565b60200260200101516040518363ffffffff1660e01b81526004016123439291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015612362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123869190613e5b565b6123925761239261373f565b6123d182878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612aad915050565b816000815181106123e4576123e4613cfe565b602002602001015134111561151f5761151f338360008151811061240a5761240a613cfe565b6020026020010151346120bb9190613ceb565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916124799190613f4c565b6000604051808303816000865af19150503d80600081146124b6576040519150601f19603f3d011682016040523d82523d6000602084013e6124bb565b606091505b50915091508180156124e55750805115806124e55750808060200190518101906124e59190613e5b565b6125475760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610513565b5050505050565b604080516000808252602082019092526001600160a01b0384169083906040516125789190613f4c565b60006040518083038185875af1925050503d80600081146125b5576040519150601f19603f3d011682016040523d82523d6000602084013e6125ba565b606091505b50509050806126285760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610513565b505050565b60008084116126925760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b6064820152608401610513565b6000831180156126a25750600082115b6126be5760405162461bcd60e51b815260040161051390613f68565b60006126cc856103e56135b9565b905060006126da82856135b9565b905060006126f4836126ee886103e86135b9565b90613620565b90506127008183613fb0565b979650505050505050565b606060028251101561275f5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152606401610513565b815167ffffffffffffffff81111561277957612779613903565b6040519080825280602002602001820160405280156127a2578160200160208202803683370190505b50905082816000815181106127b9576127b9613cfe565b60200260200101818152505060005b600183516127d69190613ceb565b81101561288e57600080612829878685815181106127f6576127f6613cfe565b60200260200101518786600161280c9190613fd2565b8151811061281c5761281c613cfe565b6020026020010151613675565b9150915061285184848151811061284257612842613cfe565b6020026020010151838361262d565b8461285d856001613fd2565b8151811061286d5761286d613cfe565b6020026020010181815250505050808061288690613fe5565b9150506127c8565b509392505050565b60008060006128a5858561329e565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152919350915086906048016040516020818303038152906040528051906020012060405160200161294d9291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916129d39190613f4c565b6000604051808303816000865af19150503d8060008114612a10576040519150601f19603f3d011682016040523d82523d6000602084013e612a15565b606091505b5091509150818015612a3f575080511580612a3f575080806020019051810190612a3f9190613e5b565b612aa55760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610513565b505050505050565b60005b60018351612abe9190613ceb565b811015612caf57600080848381518110612ada57612ada613cfe565b602002602001015185846001612af09190613fd2565b81518110612b0057612b00613cfe565b6020026020010151915091506000612b18838361329e565b509050600087612b29866001613fd2565b81518110612b3957612b39613cfe565b60200260200101519050600080836001600160a01b0316866001600160a01b031614612b6757826000612b6b565b6000835b91509150600060028a51612b7f9190613ceb565b8810612b8b5788612bd9565b612bd97f0000000000000000000000000000000000000000000000000000000000000000878c612bbc8c6002613fd2565b81518110612bcc57612bcc613cfe565b6020026020010151612896565b9050612c067f00000000000000000000000000000000000000000000000000000000000000008888612896565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612c43576020820181803683370190505b506040518563ffffffff1660e01b8152600401612c639493929190613ffe565b600060405180830381600087803b158015612c7d57600080fd5b505af1158015612c91573d6000803e3d6000fd5b50505050505050505050508080612ca790613fe5565b915050612ab0565b50505050565b6060600282511015612d095760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152606401610513565b815167ffffffffffffffff811115612d2357612d23613903565b604051908082528060200260200182016040528015612d4c578160200160208202803683370190505b509050828160018351612d5f9190613ceb565b81518110612d6f57612d6f613cfe565b602002602001018181525050600060018351612d8b9190613ceb565b90505b801561288e57600080612dd18786612da7600187613ceb565b81518110612db757612db7613cfe565b602002602001015187868151811061281c5761281c613cfe565b91509150612df9848481518110612dea57612dea613cfe565b60200260200101518383613125565b84612e05600186613ceb565b81518110612e1557612e15613cfe565b60200260200101818152505050508080612e2e9061404e565b915050612d8e565b60005b60018351612e479190613ceb565b81101561262857600080848381518110612e6357612e63613cfe565b602002602001015185846001612e799190613fd2565b81518110612e8957612e89613cfe565b6020026020010151915091506000612ea1838361329e565b5090506000612ed17f00000000000000000000000000000000000000000000000000000000000000008585612896565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3b919061407c565b506001600160701b031691506001600160701b03169150600080876001600160a01b03168a6001600160a01b031614612f75578284612f78565b83835b6040516370a0823160e01b81526001600160a01b038a81166004830152929450909250612fb3918491908d16906370a0823190602401610f7a565b9550612fc086838361262d565b945050505050600080856001600160a01b0316886001600160a01b031614612fea57826000612fee565b6000835b91509150600060028c516130029190613ceb565b8a1061300e578a61303f565b61303f7f0000000000000000000000000000000000000000000000000000000000000000898e612bbc8e6002613fd2565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f906130819086908690869060248101613ffe565b600060405180830381600087803b15801561309b57600080fd5b505af11580156130af573d6000803e3d6000fd5b5050505050505050505050505080806130c790613fe5565b915050612e39565b6000826130dc8382613ceb565b915081111561095f5760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610513565b600080841161318b5760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b6064820152608401610513565b60008311801561319b5750600082115b6131b75760405162461bcd60e51b815260040161051390613f68565b60006131cf6103e86131c986886135b9565b906135b9565b905060006131e36103e56131c986896130cf565b90506131f460016126ee8385613fb0565b9695505050505050565b600080841161325d5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416044820152641353d5539560da1b6064820152608401610513565b60008311801561326d5750600082115b6132895760405162461bcd60e51b815260040161051390613f68565b8261329485846135b9565b6105f89190613fb0565b600080826001600160a01b0316846001600160a01b0316036133105760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608401610513565b826001600160a01b0316846001600160a01b031610613330578284613333565b83835b90925090506001600160a01b03821661338e5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401610513565b9250929050565b60405163e6a4390560e01b81526001600160a01b0387811660048301528681166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa15801561340c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343091906140cc565b6001600160a01b0316036134d4576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303816000875af11580156134ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d291906140cc565b505b6000806135027f00000000000000000000000000000000000000000000000000000000000000008b8b613675565b91509150816000148015613514575080155b15613524578793508692506135ac565b60006135318984846131fe565b9050878111613565578581101561355a5760405162461bcd60e51b815260040161051390613ee2565b8894509250826135aa565b60006135728984866131fe565b9050898111156135845761358461373f565b878110156135a45760405162461bcd60e51b815260040161051390613e9c565b94508793505b505b5050965096945050505050565b60008115806135dd575082826135cf81836140e9565b92506135db9083613fb0565b145b61095f5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610513565b60008261362d8382613fd2565b915081101561095f5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610513565b6000806000613684858561329e565b509050600080613695888888612896565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156136d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f6919061407c565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461372d578082613730565b81815b90999098509650505050505050565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b038116811461376a57600080fd5b50565b803561377881613755565b919050565b60008060008060008060c0878903121561379657600080fd5b86356137a181613755565b955060208701359450604087013593506060870135925060808701356137c681613755565b8092505060a087013590509295509295509295565b6000806000606084860312156137f057600080fd5b505081359360208301359350604090920135919050565b60008083601f84011261381957600080fd5b50813567ffffffffffffffff81111561383157600080fd5b6020830191508360208260051b850101111561338e57600080fd5b60008060008060008060a0878903121561386557600080fd5b8635955060208701359450604087013567ffffffffffffffff81111561388a57600080fd5b61389689828a01613807565b90955093505060608701356138aa81613755565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156138f7578351835292840192918401916001016138db565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561392c57600080fd5b8235915060208084013567ffffffffffffffff8082111561394c57600080fd5b818601915086601f83011261396057600080fd5b81358181111561397257613972613903565b8060051b604051601f19603f8301168101818110858211171561399757613997613903565b6040529182528482019250838101850191898311156139b557600080fd5b938501935b828510156139da576139cb8561376d565b845293850193928501926139ba565b8096505050505050509250929050565b801515811461376a57600080fd5b803560ff8116811461377857600080fd5b60008060008060008060008060008060006101608c8e031215613a2b57600080fd5b8b35613a3681613755565b9a5060208c0135613a4681613755565b995060408c0135985060608c0135975060808c0135965060a08c0135613a6b81613755565b955060c08c0135945060e08c0135613a82816139ea565b9350613a916101008d016139f8565b92506101208c013591506101408c013590509295989b509295989b9093969950565b6000806000806000806000806000806101408b8d031215613ad357600080fd5b8a35613ade81613755565b995060208b0135985060408b0135975060608b0135965060808b0135613b0381613755565b955060a08b0135945060c08b0135613b1a816139ea565b9350613b2860e08c016139f8565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060808688031215613b6157600080fd5b85359450602086013567ffffffffffffffff811115613b7f57600080fd5b613b8b88828901613807565b9095509350506040860135613b9f81613755565b949793965091946060013592915050565b600080600080600080600060e0888a031215613bcb57600080fd5b8735613bd681613755565b96506020880135613be681613755565b955060408801359450606088013593506080880135925060a0880135613c0b81613755565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215613c3f57600080fd5b8835613c4a81613755565b97506020890135613c5a81613755565b965060408901359550606089013594506080890135935060a0890135925060c0890135613c8681613755565b8092505060e089013590509295985092959890939650565b60208082526018908201527f556e69737761705632526f757465723a20455850495245440000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561095f5761095f613cd5565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613d2657600080fd5b8135613d3181613755565b9392505050565b6020808252601d908201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604082015260600190565b6020808252602b908201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560408201526a1514155517d05353d5539560aa1b606082015260800190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60208082526027908201527f556e69737761705632526f757465723a204558434553534956455f494e50555460408201526617d05353d5539560ca1b606082015260800190565b600060208284031215613e5457600080fd5b5051919050565b600060208284031215613e6d57600080fd5b8151613d31816139ea565b60008060408385031215613e8b57600080fd5b505080516020909101519092909150565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604082015265105353d5539560d21b606082015260800190565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604082015265105353d5539560d21b606082015260800190565b60005b83811015613f43578181015183820152602001613f2b565b50506000910152565b60008251613f5e818460208701613f28565b9190910192915050565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b600082613fcd57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561095f5761095f613cd5565b600060018201613ff757613ff7613cd5565b5060010190565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526140378160a0850160208701613f28565b601f01601f19169190910160a00195945050505050565b60008161405d5761405d613cd5565b506000190190565b80516001600160701b038116811461377857600080fd5b60008060006060848603121561409157600080fd5b61409a84614065565b92506140a860208501614065565b9150604084015163ffffffff811681146140c157600080fd5b809150509250925092565b6000602082840312156140de57600080fd5b8151613d3181613755565b808202811582820484141761095f5761095f613cd556fea26469706673582212202af6b73353912f85611f637e48263c06b9a1387af8c39092e3320f81a192c51464736f6c6343000815003368747470733a2f2f6d61696e6e65742e696e667572612e696f2f76332f623937393461643164646638346466623863333464366262356463613230303168747470733a2f2f7365706f6c69612e696e667572612e696f2f76332f62393739346164316464663834646662386333346436626235646361323030310000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d68747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f7270632e616e6b722e636f6d2f6273635f746573746e65745f63686170656c68747470733a2f2f7270632d6d756d6261692e6d61746963766967696c2e636f6d885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d68747470733a2f2f676f65726c692d726f6c6c75702e617262697472756d2e696f2f72706368747470733a2f2f6170692e617661782d746573742e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6273632d6461746173656564312e62696e616e63652e6f726768747470733a2f2f676f65726c692e696e667572612e696f2f76332f6239373934616431646466383464666238633334643662623564636132303031a26469706673582212205706dc62ae51c1fed81fffa7253742b8b711fc0a63370baa2d36a7e91634a13f64736f6c63430008150033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0xC DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAE3F DUP1 PUSH3 0x3E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x6A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6609BBE EQ PUSH3 0x6F JUMPI DUP1 PUSH4 0x32E21AE7 EQ PUSH3 0x9F JUMPI DUP1 PUSH4 0xC0406226 EQ PUSH3 0xB8 JUMPI DUP1 PUSH4 0xD2007265 EQ PUSH3 0xC4 JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH3 0xC2 JUMPI DUP1 PUSH4 0xF8CCBF47 EQ PUSH3 0xDD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x86 PUSH3 0x80 CALLDATASIZE PUSH1 0x4 PUSH3 0x25CA JUMP JUMPDEST PUSH3 0xFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x96 SWAP3 SWAP2 SWAP1 PUSH3 0x2638 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xA9 PUSH3 0x1CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x96 SWAP2 SWAP1 PUSH3 0x2664 JUMP JUMPDEST PUSH3 0xC2 PUSH3 0x206 JUMP JUMPDEST STOP JUMPDEST PUSH3 0xCE PUSH3 0x8E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x96 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH3 0xEB SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x96 JUMP JUMPDEST PUSH1 0xF DUP2 DUP2 SLOAD DUP2 LT PUSH3 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH3 0x132 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x160 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0x1B1 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x185 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x1B1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x193 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 JUMP JUMPDEST PUSH3 0x1F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH3 0x201 CHAINID PUSH3 0xAAD JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC1978D1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x41444D494E5F505249564154455F4B4559 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xC1978D1F SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x276 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x29C SWAP2 SWAP1 PUSH3 0x2726 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC1978D1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x4F574E45525F41444452455353 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xC1978D1F SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x30B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x331 SWAP2 SWAP1 PUSH3 0x2726 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5E79B7 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xFFA18649 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x386 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x3AC SWAP2 SWAP1 PUSH3 0x2740 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x0 SUB PUSH3 0x48E JUMPI PUSH1 0x40 MLOAD PUSH4 0xFD535CE1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E277420686176652061206465706C6F796572206163636F756E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x742E204D616B65207375726520796F75206861766520736574204445504C4F59 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x45525F505249564154455F4B455920696E202E656E76206F7220757365206079 PUSH1 0x84 DUP3 ADD MSTORE PUSH32 0x61726E2067656E65726174656020746F2067656E65726174652061206E657720 PUSH1 0xA4 DUP3 ADD MSTORE PUSH14 0x1C985B991BDB481858D8DBDD5B9D PUSH1 0x92 SHL PUSH1 0xC4 DUP3 ADD MSTORE PUSH1 0xE4 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH3 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3649397D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCE817D47 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xCE817D47 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x50E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5E79B7 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x0 SWAP3 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 POP PUSH4 0xFFA18649 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x564 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x58A SWAP2 SWAP1 PUSH3 0x2740 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x40 MLOAD PUSH3 0x59B SWAP1 PUSH3 0x254C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x5C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x14 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0x5F7 SWAP1 PUSH3 0x255A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x614 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x16 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD SWAP3 AND SWAP2 PUSH3 0x648 SWAP1 PUSH3 0x2568 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x67C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2B65311F PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH3 0x73E SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x56CA623E SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x6ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x717 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x729 SWAP2 SWAP1 PUSH3 0x28B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH3 0xECC JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2B65311F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH3 0x7D7 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x56CA623E SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x79B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x7C5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x729 SWAP2 SWAP1 PUSH3 0x28FC JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2B65311F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH3 0x870 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x56CA623E SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x834 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x85E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x729 SWAP2 SWAP1 PUSH3 0x2943 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x76EADD36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x8BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x8D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH3 0x8E1 PUSH3 0xF16 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 CHAINID SWAP1 POP PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA85A8418 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x941 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x96B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x298A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH3 0xA91 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x98680034 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x9B0 JUMPI PUSH3 0x9B0 PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH3 0x9CD JUMPI PUSH3 0x9CD PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x9F0 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0xA2E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0xA2B SWAP2 DUP2 ADD SWAP1 PUSH3 0x2726 JUMP JUMPDEST PUSH1 0x1 JUMPDEST ISZERO PUSH3 0xA7C JUMPI POP DUP3 CHAINID SUB PUSH3 0xA7C JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH3 0xA52 JUMPI PUSH3 0xA52 PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH3 0xA6F JUMPI PUSH3 0xA6F PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST DUP1 PUSH3 0xA88 DUP2 PUSH3 0x2AE5 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x970 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x57F3FA7 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH3 0xAD9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH3 0xB46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537464436861696E7320676574436861696E2875696E74323536293A20436861 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x34B71024A21031B0B73737BA103132901817 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x485 JUMP JUMPDEST PUSH3 0xB50 PUSH3 0x138F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH3 0xB6B SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xB99 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0xBEA JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xBBE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xBEA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xBCC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x40 MLOAD PUSH3 0xC03 SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH3 0xC2E SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xC5C SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0xCAD JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xC81 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xCAD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xC8F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH3 0xCD2 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xD00 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0xD51 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xD25 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xD51 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xD33 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH3 0xD6C SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xD9A SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0xDEB JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xDBF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xDEB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xDCD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP POP PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x348051D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP4 POP ISZERO ISZERO SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x6900A3AE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xE4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0xE76 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0xE88 SWAP2 SWAP1 PUSH3 0x2B1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH3 0xEB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x485 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST POP PUSH3 0xEC5 DUP2 DUP4 PUSH3 0x1CDE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH3 0xF13 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0xEE3 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x104C13EB PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH3 0x1FE3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD930A0E6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xF67 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0xF91 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0xD SWAP1 PUSH3 0xFA0 SWAP1 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0xD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0xFB5 SWAP2 SWAP1 PUSH3 0x2D2A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0xE SWAP1 DUP2 PUSH3 0xFD4 SWAP2 SWAP1 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x348051D7 PUSH1 0xE1 SHL DUP2 MSTORE CHAINID PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x6900A3AE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1023 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x104D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST SWAP1 POP PUSH1 0xE DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1064 SWAP2 SWAP1 PUSH3 0x2D55 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x1084 SWAP3 SWAP2 PUSH1 0x20 ADD PUSH3 0x2D80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0xE SWAP1 DUP2 PUSH3 0x10A3 SWAP2 SWAP1 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0xF SLOAD PUSH1 0x60 SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1219 JUMPI PUSH1 0xF DUP1 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH4 0x88DA6D35 SWAP2 DUP7 SWAP2 DUP5 SWAP2 PUSH4 0x56CA623E SWAP2 SWAP1 DUP8 SWAP1 DUP2 LT PUSH3 0x10EF JUMPI PUSH3 0x10EF PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1148 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1172 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0xF DUP6 DUP2 SLOAD DUP2 LT PUSH3 0x1188 JUMPI PUSH3 0x1188 PUSH3 0x2AB9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x11B9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x2E2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0x11D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1203 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST POP DUP1 PUSH3 0x1210 DUP2 PUSH3 0x2AE5 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x10AD JUMP JUMPDEST POP PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x32E21AE7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x1280 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x127D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x2E77 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x1297 JUMPI PUSH3 0x128F PUSH3 0x8E7 JUMP JUMPDEST SWAP1 POP PUSH3 0x129B JUMP JUMPDEST MLOAD SWAP1 POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x88DA6D35 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x88DA6D35 SWAP1 PUSH3 0x12D1 SWAP1 DUP7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH3 0x2F44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0x12F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x131B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE23CD19F PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xE23CD19F SWAP1 PUSH3 0x1355 SWAP1 DUP7 SWAP1 PUSH1 0xE SWAP1 PUSH1 0x4 ADD PUSH3 0x2F93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1385 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x139D JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x5 DUP1 DUP3 MSTORE PUSH5 0x185B9D9A5B PUSH1 0xDA SHL PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD PUSH1 0xA0 DUP2 ADD DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 DUP4 MSTORE PUSH5 0x105B9D9A5B PUSH1 0xDA SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP2 DUP3 MSTORE PUSH2 0x7A69 DUP3 DUP3 ADD MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH21 0x687474703A2F2F3132372E302E302E313A38353435 PUSH1 0x58 SHL SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH3 0x142E SWAP2 PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x14AB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x1B585A5B9B995D PUSH1 0xCA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x13585A5B9B995D PUSH1 0xCA SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3D DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAC37 PUSH1 0x3D SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1526 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x676F65726C69 PUSH1 0xD0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x476F65726C69 PUSH1 0xD0 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3C DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xADCE PUSH1 0x3C SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x15A5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x7365706F6C6961 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x5365706F6C6961 PUSH1 0xC8 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAA36A7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3D DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAC74 PUSH1 0x3D SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1641 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x6F7074696D69736D PUSH1 0xC0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x4F7074696D69736D PUSH1 0xC0 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F6D61696E6E65742E6F7074696D69736D2E696F0000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x16EC PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x6F7074696D69736D5F676F65726C69 PUSH1 0x88 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x4F7074696D69736D20476F65726C69 PUSH1 0x88 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F676F65726C692E6F7074696D69736D2E696F000000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1791 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x617262697472756D5F6F6E65 PUSH1 0xA0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x417262697472756D204F6E65 PUSH1 0xA0 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4B1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F617262312E617262697472756D2E696F2F72706300000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1828 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH19 0x617262697472756D5F6F6E655F676F65726C69 PUSH1 0x68 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH19 0x417262697472756D204F6E6520476F65726C69 PUSH1 0x68 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x66EED DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAD5E PUSH1 0x25 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x18CF PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x617262697472756D5F6E6F7661 PUSH1 0x98 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x417262697472756D204E6F7661 PUSH1 0x98 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4BA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F6E6F76612E617262697472756D2E696F2F72706300000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1969 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x3837B63CB3B7B7 PUSH1 0xC9 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x2837B63CB3B7B7 PUSH1 0xC9 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x89 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F706F6C79676F6E2D7270632E636F6D000000000000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x19F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x706F6C79676F6E5F6D756D626169 PUSH1 0x90 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x506F6C79676F6E204D756D626169 PUSH1 0x90 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x13881 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAD1D PUSH1 0x21 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1A78 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x6176616C616E636865 PUSH1 0xB8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x4176616C616E636865 PUSH1 0xB8 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA86A DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xACD1 PUSH1 0x25 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1B04 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x6176616C616E6368655F66756A69 PUSH1 0x90 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x4176616C616E6368652046756A69 PUSH1 0x90 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA869 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAD83 PUSH1 0x2A SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1B91 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x3137312FB9B6B0B93A2FB1B430B4B7 PUSH1 0x89 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x2127211029B6B0B93A1021B430B4B7 PUSH1 0x89 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x38 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xADAD PUSH1 0x21 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1C3A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626E625F736D6172745F636861696E5F746573746E6574000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x424E4220536D61727420436861696E20546573746E6574000000000000000000 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x61 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xACF6 PUSH1 0x27 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0xAAB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x33B737B9B4B9AFB1B430B4B7 PUSH1 0xA1 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x23B737B9B4B99021B430B4B7 PUSH1 0xA1 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x64 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F7270632E676E6F736973636861696E2E636F6D0000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1D0A PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD MLOAD MLOAD PUSH1 0x0 SUB PUSH3 0x1FDA JUMPI PUSH1 0x40 MLOAD PUSH4 0x975A6CE9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x975A6CE9 SWAP1 PUSH3 0x1D4C SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x1D8D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1D8A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x1FD4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH3 0x1DBE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1DC3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH3 0x1DD1 DUP6 PUSH3 0x2064 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1DE3 SWAP2 SWAP1 PUSH3 0x2FBC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x4 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH3 0x1EBA JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD145736C DUP3 PUSH1 0x2 DUP9 PUSH1 0x40 MLOAD PUSH3 0x1E36 SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP3 MSTORE PUSH3 0x1E65 SWAP3 SWAP2 PUSH1 0x4 ADD PUSH3 0x2F93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1E85 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1EAF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH3 0x1F3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF877CB19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xF877CB19 SWAP1 PUSH3 0x1EEE SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1F0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1F36 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1F51 SWAP2 SWAP1 PUSH3 0x2FEA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x1F70 SWAP2 PUSH1 0x24 ADD PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xBC44503 PUSH1 0xE0 SHL OR DUP2 MSTORE DUP6 MLOAD SWAP2 DUP7 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD SWAP1 SWAP2 KECCAK256 SWAP2 SWAP3 POP EQ ISZERO DUP1 PUSH3 0x1FBD JUMPI POP PUSH1 0x60 DUP6 ADD MLOAD MLOAD ISZERO JUMPDEST ISZERO PUSH3 0x1FCB JUMPI DUP3 MLOAD DUP4 PUSH1 0x20 ADD REVERT JUMPDEST POP POP POP PUSH3 0x1FDA JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP DUP1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH11 0x636F6E736F6C652E6C6F67 PUSH1 0x20 DUP4 ADD PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 GAS STATICCALL POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD SWAP1 POP DUP1 PUSH1 0x2 DUP5 PUSH1 0x40 MLOAD PUSH3 0x2020 SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 DUP2 PUSH3 0x203C SWAP2 SWAP1 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 DUP4 ADD MSTORE PUSH3 0x205B DUP4 DUP4 PUSH3 0x21A8 JUMP JUMPDEST PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x208A JUMPI PUSH3 0x208A PUSH3 0x276B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x20B5 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0x21A0 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x20DC JUMPI PUSH3 0x20DC PUSH3 0x2AB9 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 POP PUSH1 0x61 PUSH1 0xF8 SHL DUP2 LT DUP1 ISZERO SWAP1 PUSH3 0x2110 JUMPI POP PUSH1 0x3D PUSH1 0xF9 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND GT ISZERO JUMPDEST ISZERO PUSH3 0x215C JUMPI PUSH3 0x2127 PUSH1 0x20 PUSH1 0xF8 DUP4 SWAP1 SHR PUSH3 0x3024 JUMP JUMPDEST PUSH1 0xF8 SHL DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x213F JUMPI PUSH3 0x213F PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH3 0x218A JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x2172 JUMPI PUSH3 0x2172 PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP JUMPDEST POP DUP1 PUSH3 0x2197 DUP2 PUSH3 0x2AE5 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x20BB JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH3 0x2237 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537464436861696E7320736574436861696E28737472696E672C436861696E44 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x617461293A20436861696E20616C6961732063616E6E6F742062652074686520 PUSH1 0x64 DUP3 ADD MSTORE PUSH13 0x32B6B83A3C9039BA3934B73397 PUSH1 0x99 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH3 0x485 JUMP JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x0 SUB PUSH3 0x22B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537464436861696E7320736574436861696E28737472696E672C436861696E44 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x617461293A20436861696E2049442063616E6E6F7420626520302E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x485 JUMP JUMPDEST PUSH3 0x22BD PUSH3 0x138F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH3 0x22DE SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x230C SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0x235D JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x2331 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x235D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x233F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH3 0x2382 JUMPI POP DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x348051D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x6900A3AE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x23D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x23FE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x2412 SWAP3 SWAP2 SWAP1 PUSH3 0x3040 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH3 0x2442 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x485 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x40 MLOAD PUSH3 0x2457 SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH1 0x3 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH3 0x248C SWAP2 SWAP1 PUSH3 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x40 ADD MLOAD DUP2 MSTORE POP PUSH1 0x1 DUP6 PUSH1 0x40 MLOAD PUSH3 0x24CB SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 DUP2 MLOAD DUP2 SWAP1 PUSH3 0x24EA SWAP1 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SWAP1 PUSH3 0x250B SWAP1 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SWAP1 PUSH3 0x2522 SWAP1 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP POP POP PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH3 0x2545 DUP6 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2A01 DUP1 PUSH3 0x30E2 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0xDEB DUP1 PUSH3 0x5AE3 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x4369 DUP1 PUSH3 0x68CE DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH3 0x2584 SWAP1 PUSH3 0x26EA JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH3 0x2595 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH3 0xF13 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x25C6 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x25B0 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x25DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x2601 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x25E7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x2624 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH3 0x264D PUSH1 0x40 DUP4 ADD DUP6 PUSH3 0x260A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH1 0x80 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x2682 PUSH1 0xA0 DUP5 ADD DUP3 PUSH3 0x260A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP1 DUP6 DUP5 SUB ADD PUSH1 0x60 DUP7 ADD MSTORE PUSH3 0x26AC DUP4 DUP4 PUSH3 0x260A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP6 DUP5 SUB ADD PUSH1 0x80 DUP7 ADD MSTORE POP PUSH3 0x26CC DUP3 DUP3 PUSH3 0x260A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0xEC5 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x260A JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x26FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2720 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xEC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x27A7 JUMPI PUSH3 0x27A7 PUSH3 0x276B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x27A7 JUMPI PUSH3 0x27A7 PUSH3 0x276B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x27FF JUMPI PUSH3 0x27FF PUSH3 0x276B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2836 JUMPI PUSH3 0x2836 PUSH3 0x276B JUMP JUMPDEST PUSH3 0x284B PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH3 0x27D3 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH3 0x2861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2874 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x288F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x28A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2874 DUP5 DUP3 DUP6 ADD PUSH3 0x2807 JUMP JUMPDEST PUSH32 0x666163746F727920636F6E7472616374206465706C6F7965642061743A200000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x28EF DUP2 PUSH1 0x1E DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1E ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x776E726B20636F6E7472616374206465706C6F7965642061743A200000000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x2936 DUP2 PUSH1 0x1B DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1B ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x726F7574657220636F6E7472616374206465706C6F7965642061743A20000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x297D DUP2 PUSH1 0x1D DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1D ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x299E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x29B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x29CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x29E1 JUMPI PUSH3 0x29E1 PUSH3 0x276B JUMP JUMPDEST PUSH3 0x29F1 DUP5 DUP3 PUSH1 0x5 SHL ADD PUSH3 0x27D3 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP9 DUP4 GT ISZERO PUSH3 0x2A11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x2AAC JUMPI DUP1 MLOAD DUP6 DUP2 GT ISZERO PUSH3 0x2A2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x3F DUP2 ADD DUP12 SGT PUSH3 0x2A40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2A4A PUSH3 0x2781 JUMP JUMPDEST DUP1 DUP13 PUSH1 0x60 DUP5 ADD GT ISZERO PUSH3 0x2A5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 DUP4 ADD JUMPDEST PUSH1 0x60 DUP5 ADD DUP2 LT ISZERO PUSH3 0x2A9B JUMPI DUP1 MLOAD DUP10 DUP2 GT ISZERO PUSH3 0x2A7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2A8C DUP16 DUP14 DUP4 DUP9 ADD ADD PUSH3 0x2807 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP11 ADD SWAP2 DUP11 ADD PUSH3 0x2A60 JUMP JUMPDEST POP DUP6 MSTORE POP POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH3 0x2A15 JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x2AFA JUMPI PUSH3 0x2AFA PUSH3 0x2ACF JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x2B15 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x537464436861696E7320676574436861696E2875696E74323536293A20436861 DUP2 MSTORE PUSH11 0x34B7103BB4BA341024A21 PUSH1 0xAD SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x2B6D DUP2 PUSH1 0x2B DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH11 0x103737BA103337BAB73217 PUSH1 0xA9 SHL PUSH1 0x2B SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x36 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2BDD JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2BB8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2BD9 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2BC4 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2BFF JUMPI PUSH3 0x2BFF PUSH3 0x276B JUMP JUMPDEST PUSH3 0x2C17 DUP2 PUSH3 0x2C10 DUP5 SLOAD PUSH3 0x26EA JUMP JUMPDEST DUP5 PUSH3 0x2B8F JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x2C4F JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x2C36 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x2BD9 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2C80 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x2C5F JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2C9F JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH3 0x2CBE DUP2 PUSH3 0x26EA JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH3 0x2CD9 JUMPI PUSH1 0x1 DUP2 EQ PUSH3 0x2CEF JUMPI PUSH3 0x2D20 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH3 0x2D20 JUMP JUMPDEST DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x2D17 JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH3 0x2CFC JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2D38 DUP3 DUP5 PUSH3 0x2CAF JUMP JUMPDEST PUSH13 0x2F6465706C6F796D656E74732F PUSH1 0x98 SHL DUP2 MSTORE PUSH1 0xD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x2D69 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x5 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2D8E DUP3 DUP6 PUSH3 0x2CAF JUMP JUMPDEST DUP4 MLOAD PUSH3 0x2DA0 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH3 0x25E4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH3 0x2DB8 DUP2 PUSH3 0x26EA JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x20 PUSH1 0x1 DUP4 DUP2 AND DUP1 ISZERO PUSH3 0x2DD8 JUMPI PUSH1 0x1 DUP2 EQ PUSH3 0x2DF3 JUMPI PUSH3 0x2E23 JUMP JUMPDEST PUSH1 0xFF NOT DUP6 AND DUP9 DUP5 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x5 SHL DUP9 ADD DUP4 ADD SWAP6 POP PUSH3 0x2E23 JUMP JUMPDEST DUP7 PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x2E1B JUMPI DUP2 SLOAD DUP11 DUP3 ADD DUP7 ADD MSTORE SWAP1 DUP4 ADD SWAP1 DUP5 ADD PUSH3 0x2DFE JUMP JUMPDEST DUP10 ADD DUP5 ADD SWAP7 POP POP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH3 0x2E43 PUSH1 0x60 DUP4 ADD DUP7 PUSH3 0x260A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x2E57 DUP2 DUP7 PUSH3 0x260A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x2E6D DUP2 DUP6 PUSH3 0x2DA9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x2EA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x80 DUP3 DUP7 SUB SLT ISZERO PUSH3 0x2EB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2EC2 PUSH3 0x27AD JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x2ED2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2EE0 DUP8 DUP3 DUP7 ADD PUSH3 0x2807 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x2F00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2F0E DUP8 DUP3 DUP7 ADD PUSH3 0x2807 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x2F27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2F35 DUP8 DUP3 DUP7 ADD PUSH3 0x2807 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH3 0x2F59 PUSH1 0x60 DUP4 ADD DUP6 PUSH3 0x260A JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0xB DUP3 MSTORE PUSH11 0x6E6574776F726B4E616D65 PUSH1 0xA8 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH3 0x26CC PUSH1 0x40 DUP3 ADD DUP6 PUSH3 0x260A JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH3 0x2FA8 PUSH1 0x40 DUP4 ADD DUP6 PUSH3 0x260A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x26CC DUP2 DUP6 PUSH3 0x2DA9 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x2FD0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH8 0x17D49410D7D55493 PUSH1 0xC2 SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x8 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH16 0x34B73B30B634B210393831903AB9361 PUSH1 0x85 SHL DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x3017 DUP2 PUSH1 0x10 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x10 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH3 0x1FDD JUMPI PUSH3 0x1FDD PUSH3 0x2ACF JUMP JUMPDEST PUSH32 0x537464436861696E7320736574436861696E28737472696E672C436861696E44 DUP2 MSTORE PUSH15 0x30BA30949D1021B430B4B71024A21 PUSH1 0x8D SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP4 MLOAD PUSH3 0x3092 DUP2 PUSH1 0x2F DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH18 0x1030B63932B0B23C903AB9B2B210313C9011 PUSH1 0x71 SHL PUSH1 0x2F SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH3 0x30C6 DUP2 PUSH1 0x41 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH2 0x1117 PUSH1 0xF1 SHL PUSH1 0x41 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x43 ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2A01 CODESIZE SUB DUP1 PUSH2 0x2A01 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x54 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x296E DUP1 PUSH2 0x93 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA2E74AF6 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA2E74AF6 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0xC9C65396 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xE6A43905 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0xF46901ED EQ PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x17E7E58 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x94B7415 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x1E3DD18B EQ PUSH2 0xD0 JUMPI DUP1 PUSH4 0x574F2BA3 EQ PUSH2 0xE3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xA0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xA0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xDE CALLDATASIZE PUSH1 0x4 PUSH2 0x583 JUMP JUMPDEST PUSH2 0x163 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH2 0x107 PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x18D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0x117 CALLDATASIZE PUSH1 0x4 PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x205 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x107 PUSH2 0x15E CALLDATASIZE PUSH1 0x4 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2AB734B9BBB0B82B191D102327A92124A22222A7 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x268 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A204944454E544943414C5F4144445245535345530000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x28B JUMPI DUP4 DUP6 PUSH2 0x28E JUMP JUMPDEST DUP5 DUP5 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A205A45524F5F41444452455353000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x357 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x556E697377617056323A20504149525F455849535453 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH2 0x369 SWAP1 PUSH2 0x576 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP7 DUP2 SHL DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP6 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x48 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH1 0x0 CREATE2 PUSH1 0x40 MLOAD PUSH4 0x485CC955 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP7 POP SWAP1 DUP7 AND SWAP1 PUSH4 0x485CC955 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP10 DUP8 AND DUP1 DUP7 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP6 KECCAK256 DUP1 SLOAD SWAP8 DUP14 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP9 DUP10 AND DUP2 OR SWAP1 SWAP2 SSTORE SWAP4 DUP4 MSTORE DUP2 DUP6 KECCAK256 DUP7 DUP7 MSTORE DUP4 MSTORE DUP2 DUP6 KECCAK256 DUP1 SLOAD DUP9 AND DUP6 OR SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP6 DUP2 SWAP1 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 SWAP6 ADD DUP1 SLOAD SWAP1 SWAP8 AND DUP5 OR SWAP1 SWAP7 SSTORE SWAP3 SLOAD DUP4 MLOAD SWAP3 DUP4 MSTORE SWAP1 DUP3 ADD MSTORE PUSH32 0xD3648BD0F6BA80134A33BA9275AC585D9D315F0AD8355CDDEFDE31AFA28D0E9 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x554 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2AB734B9BBB0B82B191D102327A92124A22222A7 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x232B DUP1 PUSH2 0x60E DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x595 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5D3 DUP3 PUSH2 0x59C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F6 DUP4 PUSH2 0x59C JUMP JUMPDEST SWAP2 POP PUSH2 0x604 PUSH1 0x20 DUP5 ADD PUSH2 0x59C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0xC SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x2737B93232B5902B19 PUSH1 0xB9 SHL PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL SWAP1 DUP3 ADD MSTORE DUP2 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP2 DUP4 ADD MSTORE PUSH32 0xDE430DC832330FBAACEAD3E6C47B78169D8ABE3F0FFF0A13B56A3F3B9C0A1768 DUP2 DUP5 ADD MSTORE PUSH32 0xC89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x3 SSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x2224 DUP1 PUSH2 0x107 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6A627842 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xBA9A7A56 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD21220A7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x407 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x42D JUMPI DUP1 PUSH4 0xFFF6CAE9 EQ PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBA9A7A56 EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0xBC25CF77 EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x89AFCB44 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6A627842 EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x7464FC3D EQ PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x3644E515 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x5909C0D5 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x5A3D5493 EQ PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x30ADF81F EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x22C0D9F EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x902F1AC EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0xDFE1681 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x283 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C1 PUSH2 0x1BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1DB6 JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x2737B93232B5902B19 PUSH1 0xB9 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F8 SWAP2 SWAP1 PUSH2 0x1E70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x209 PUSH2 0x966 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH4 0xFFFFFFFF AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA3 JUMP JUMPDEST PUSH2 0x990 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x26B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x28C PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1ECF JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST PUSH2 0x28C PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP2 JUMP JUMPDEST PUSH2 0x2DC PUSH1 0x12 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x28C PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F10 JUMP JUMPDEST PUSH2 0xA3B JUMP JUMPDEST PUSH2 0x28C PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0xABA JUMP JUMPDEST PUSH2 0x28C PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x38B PUSH2 0x386 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0xD82 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x4E524B2D4C5 PUSH1 0xD4 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x3D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA3 JUMP JUMPDEST PUSH2 0x10E8 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0x10F5 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x26B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x26B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x428 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F66 JUMP JUMPDEST PUSH2 0x1209 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x141D JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0x48B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xC SSTORE DUP5 ISZERO ISZERO DUP1 PUSH2 0x49E JUMPI POP PUSH1 0x0 DUP5 GT JUMPDEST PUSH2 0x4F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F4F55545055545F41 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1353D55395 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x503 PUSH2 0x966 JUMP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP8 LT DUP1 ISZERO PUSH2 0x528 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP7 LT JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F4C49515549444954 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x59 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 SWAP1 DUP2 AND SWAP1 DUP10 AND DUP3 EQ DUP1 ISZERO SWAP1 PUSH2 0x5BC JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST PUSH2 0x600 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x556E697377617056323A20494E56414C49445F544F PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST DUP11 ISZERO PUSH2 0x611 JUMPI PUSH2 0x611 DUP3 DUP11 DUP14 PUSH2 0x1541 JUMP JUMPDEST DUP10 ISZERO PUSH2 0x622 JUMPI PUSH2 0x622 DUP2 DUP11 DUP13 PUSH2 0x1541 JUMP JUMPDEST DUP7 ISZERO PUSH2 0x68F JUMPI PUSH1 0x40 MLOAD PUSH4 0x4347A17 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x10D1E85C SWAP1 PUSH2 0x65C SWAP1 CALLER SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x2008 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x68A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6F7 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x762 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 DUP10 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x2083 JUMP JUMPDEST DUP4 GT PUSH2 0x78A JUMPI PUSH1 0x0 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x79D DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x2083 JUMP JUMPDEST PUSH2 0x7A7 SWAP1 DUP5 PUSH2 0x2083 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7BE DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x2083 JUMP JUMPDEST DUP4 GT PUSH2 0x7CB JUMPI PUSH1 0x0 PUSH2 0x7E8 JUMP JUMPDEST PUSH2 0x7DE DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x2083 JUMP JUMPDEST PUSH2 0x7E8 SWAP1 DUP5 PUSH2 0x2083 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 GT DUP1 PUSH2 0x7F9 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F494E5055545F414D PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x13D55395 PUSH1 0xE2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x873 PUSH2 0x861 DUP5 PUSH1 0x3 PUSH2 0x168C JUMP JUMPDEST PUSH2 0x86D DUP8 PUSH2 0x3E8 PUSH2 0x168C JUMP JUMPDEST SWAP1 PUSH2 0x16F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x885 PUSH2 0x861 DUP5 PUSH1 0x3 PUSH2 0x168C JUMP JUMPDEST SWAP1 POP PUSH2 0x8AA PUSH3 0xF4240 PUSH2 0x8A4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP12 DUP2 AND SWAP1 DUP12 AND PUSH2 0x168C JUMP JUMPDEST SWAP1 PUSH2 0x168C JUMP JUMPDEST PUSH2 0x8B4 DUP4 DUP4 PUSH2 0x168C JUMP JUMPDEST LT ISZERO PUSH2 0x8F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x556E697377617056323A204B PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST POP POP PUSH2 0x8FF DUP5 DUP5 DUP9 DUP9 PUSH2 0x1749 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 CALLER SWAP1 PUSH32 0xD78AD95FA46C994B6551D0DA85FC275FE613CE37657FB8D5E3D130840159D822 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0xC SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP1 DUP3 AND SWAP3 PUSH1 0x1 PUSH1 0x70 SHL DUP4 DIV SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x99D CALLER DUP5 DUP5 PUSH2 0x1935 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0x0 NOT EQ PUSH2 0xA26 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0xA01 SWAP1 DUP4 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST PUSH2 0xA31 DUP5 DUP5 DUP5 PUSH2 0x1997 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2AB734B9BBB0B82B191D102327A92124A22222A7 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x7 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0xADE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC DUP2 SWAP1 SSTORE DUP1 PUSH2 0xAEE PUSH2 0x966 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB40 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB64 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBB2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBD6 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBED DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x16F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC04 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x16F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC12 DUP8 DUP8 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP3 POP DUP2 SWAP1 SUB PUSH2 0xC4C JUMPI PUSH2 0xC38 PUSH2 0x3E8 PUSH2 0x86D PUSH2 0xC33 DUP8 DUP8 PUSH2 0x168C JUMP JUMPDEST PUSH2 0x1B7A JUMP JUMPDEST SWAP9 POP PUSH2 0xC47 PUSH1 0x0 PUSH2 0x3E8 PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0xC93 JUMP JUMPDEST PUSH2 0xC90 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP10 AND PUSH2 0xC63 DUP7 DUP5 PUSH2 0x168C JUMP JUMPDEST PUSH2 0xC6D SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP10 AND PUSH2 0xC81 DUP7 DUP6 PUSH2 0x168C JUMP JUMPDEST PUSH2 0xC8B SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST PUSH2 0x1C79 JUMP JUMPDEST SWAP9 POP JUMPDEST PUSH1 0x0 DUP10 GT PUSH2 0xCF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F4C49515549444954 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x1657D35253951151 PUSH1 0xC2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH2 0xCFE DUP11 DUP11 PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0xD0A DUP7 DUP7 DUP11 DUP11 PUSH2 0x1749 JUMP JUMPDEST DUP2 ISZERO PUSH2 0xD34 JUMPI PUSH1 0x8 SLOAD PUSH2 0xD30 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV AND PUSH2 0x168C JUMP JUMPDEST PUSH1 0xB SSTORE JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x4C209B5FC8AD50758F13E2E1088BA56A560DFF690A1C6FEF26394F4C03821C4F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0xC SSTORE POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC DUP2 SWAP1 SSTORE DUP1 PUSH2 0xDB7 PUSH2 0x966 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 SWAP2 AND SWAP1 PUSH1 0x0 SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE35 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEA3 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST ADDRESS PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0xEC0 DUP9 DUP9 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 SWAP2 POP DUP1 PUSH2 0xED1 DUP5 DUP8 PUSH2 0x168C JUMP JUMPDEST PUSH2 0xEDB SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST SWAP11 POP DUP1 PUSH2 0xEE8 DUP5 DUP7 PUSH2 0x168C JUMP JUMPDEST PUSH2 0xEF2 SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST SWAP10 POP PUSH1 0x0 DUP12 GT DUP1 ISZERO PUSH2 0xF04 JUMPI POP PUSH1 0x0 DUP11 GT JUMPDEST PUSH2 0xF61 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F4C49515549444954 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x1657D09554939151 PUSH1 0xC2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH2 0xF6B ADDRESS DUP5 PUSH2 0x1C91 JUMP JUMPDEST PUSH2 0xF76 DUP8 DUP14 DUP14 PUSH2 0x1541 JUMP JUMPDEST PUSH2 0xF81 DUP7 DUP14 DUP13 PUSH2 0x1541 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFC5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFE9 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP6 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1030 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1054 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST SWAP4 POP PUSH2 0x1062 DUP6 DUP6 DUP12 DUP12 PUSH2 0x1749 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x108C JUMPI PUSH1 0x8 SLOAD PUSH2 0x1088 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV AND PUSH2 0x168C JUMP JUMPDEST PUSH1 0xB SSTORE JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP13 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND SWAP2 CALLER SWAP2 PUSH32 0xDCCD412F0B1252819CB1FD330B93224CA42612892BB3F4F789976E6D81936496 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP PUSH1 0x1 PUSH1 0xC DUP2 SWAP1 SSTORE POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x99D CALLER DUP5 DUP5 PUSH2 0x1997 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0x1117 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SSTORE PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP2 PUSH2 0x11B2 SWAP2 DUP5 SWAP2 DUP7 SWAP2 PUSH2 0x11AD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1189 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86D SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH2 0x1541 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0x11FF SWAP2 DUP4 SWAP2 DUP7 SWAP2 PUSH2 0x11AD SWAP2 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH2 0x116C JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0xC SSTORE POP JUMP JUMPDEST TIMESTAMP DUP5 LT ISZERO PUSH2 0x124E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x155B9A5CDDD85C158C8E8811561412549151 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 SWAP1 DUP8 PUSH2 0x12A1 DUP4 PUSH2 0x20C0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x131A SWAP3 SWAP2 SWAP1 PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP1 DUP6 MSTORE SWAP2 DUP5 ADD DUP1 DUP5 MSTORE DUP2 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP3 POP SWAP1 PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1385 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x13BB JUMPI POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1407 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E56414C49445F5349474E415455524500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH2 0x1412 DUP10 DUP10 DUP10 PUSH2 0x1935 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0x143F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0x153A SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x148E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14B2 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x151E SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV AND PUSH2 0x1749 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH32 0x7472616E7366657228616464726573732C75696E743235362900000000000000 PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP5 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP5 MSTORE SWAP2 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP8 AND SWAP2 PUSH2 0x15CD SWAP2 SWAP1 PUSH2 0x20D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x160A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x160F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1639 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1639 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1639 SWAP2 SWAP1 PUSH2 0x20F5 JUMP JUMPDEST PUSH2 0x1685 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A205452414E534645525F4641494C4544000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x16B0 JUMPI POP DUP3 DUP3 PUSH2 0x16A2 DUP2 DUP4 PUSH2 0x2117 JUMP JUMPDEST SWAP3 POP PUSH2 0x16AE SWAP1 DUP4 PUSH2 0x20AC JUMP JUMPDEST EQ JUMPDEST PUSH2 0x9A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6D756C2D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1700 DUP4 DUP3 PUSH2 0x2083 JUMP JUMPDEST SWAP2 POP DUP2 GT ISZERO PUSH2 0x9A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x64732D6D6174682D7375622D756E646572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP5 GT DUP1 ISZERO SWAP1 PUSH2 0x1767 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP4 GT ISZERO JUMPDEST PUSH2 0x17A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x556E697377617056323A204F564552464C4F57 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17BA PUSH5 0x100000000 TIMESTAMP PUSH2 0x212E JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x17DA SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP4 PUSH2 0x2142 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x17FA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP5 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x180E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP4 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x189D JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x1836 DUP6 PUSH2 0x1827 DUP7 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 PUSH2 0x1D34 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x1849 SWAP2 SWAP1 PUSH2 0x2117 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x185A SWAP2 SWAP1 PUSH2 0x2166 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x1873 DUP5 PUSH2 0x1827 DUP8 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x1886 SWAP2 SWAP1 PUSH2 0x2117 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1897 SWAP2 SWAP1 PUSH2 0x2166 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP10 DUP2 AND PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DUP2 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP6 AND DUP13 DUP4 AND OR SWAP5 SWAP1 SWAP5 OR SWAP2 DUP3 AND DUP4 OR SWAP5 DUP6 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP3 AND SWAP3 DUP3 AND SWAP3 SWAP1 SWAP3 OR DUP4 MSTORE SWAP3 SWAP1 SWAP4 DIV SWAP1 SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x1C411E9A96E071241C2F21F7726B17AE89E3CAB4C78BE50E062B03A9FFFBBAD1 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x19BA SWAP1 DUP3 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x19E9 SWAP1 DUP3 PUSH2 0x1D49 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x198A SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x17E7E58 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AB7 SWAP2 SWAP1 PUSH2 0x2179 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP5 POP SWAP2 SWAP3 POP SWAP1 PUSH2 0x1B66 JUMPI DUP1 ISZERO PUSH2 0x1B61 JUMPI PUSH1 0x0 PUSH2 0x1AF2 PUSH2 0xC33 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP9 DUP2 AND SWAP1 DUP9 AND PUSH2 0x168C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1AFF DUP4 PUSH2 0x1B7A JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B5E JUMPI PUSH1 0x0 PUSH2 0x1B21 PUSH2 0x1B18 DUP5 DUP5 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 PUSH2 0x168C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B3A DUP4 PUSH2 0x1B34 DUP7 PUSH1 0x5 PUSH2 0x168C JUMP JUMPDEST SWAP1 PUSH2 0x1D49 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B48 DUP3 DUP5 PUSH2 0x20AC JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1B5A JUMPI PUSH2 0x1B5A DUP8 DUP3 PUSH2 0x1BEA JUMP JUMPDEST POP POP POP JUMPDEST POP POP JUMPDEST PUSH2 0x1B72 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1B72 JUMPI PUSH1 0x0 PUSH1 0xB SSTORE JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 GT ISZERO PUSH2 0x1BDB JUMPI POP DUP1 PUSH1 0x0 PUSH2 0x1B94 PUSH1 0x2 DUP4 PUSH2 0x20AC JUMP JUMPDEST PUSH2 0x1B9F SWAP1 PUSH1 0x1 PUSH2 0x2166 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1BD5 JUMPI SWAP1 POP DUP1 PUSH1 0x2 DUP2 PUSH2 0x1BBA DUP2 DUP7 PUSH2 0x20AC JUMP JUMPDEST PUSH2 0x1BC4 SWAP2 SWAP1 PUSH2 0x2166 JUMP JUMPDEST PUSH2 0x1BCE SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST SWAP1 POP PUSH2 0x1BA2 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1BE5 JUMPI POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x1BF7 SWAP1 DUP3 PUSH2 0x1D49 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1C1C SWAP1 DUP3 PUSH2 0x1D49 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x1C6D SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1C88 JUMPI DUP2 PUSH2 0x1C8A JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1CB4 SWAP1 DUP3 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 0x1CDB SWAP1 DUP3 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH2 0x1C6D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A1 PUSH1 0x1 PUSH1 0x70 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP5 AND PUSH2 0x2196 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C8A PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP4 AND DUP5 PUSH2 0x21C8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1D56 DUP4 DUP3 PUSH2 0x2166 JUMP JUMPDEST SWAP2 POP DUP2 LT ISZERO PUSH2 0x9A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6164642D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1DB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1DE7 DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1E04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1E27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E67 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E4F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1E8F DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1E4C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1EC1 DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1EE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1EEF DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1EFF DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1F2E DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F3E DUP2 PUSH2 0x1D9E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C8A DUP2 PUSH2 0x1D9E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1F81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x1F8C DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x1F9C DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1FC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x155B9A5CDDD85C158C8E881313D0D2D151 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE DUP2 PUSH1 0x80 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0xA0 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0xA0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2066 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x9A1 JUMPI PUSH2 0x9A1 PUSH2 0x206D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x20BB JUMPI PUSH2 0x20BB PUSH2 0x2096 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x20D2 JUMPI PUSH2 0x20D2 PUSH2 0x206D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x20EB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1E4C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x9A1 JUMPI PUSH2 0x9A1 PUSH2 0x206D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x213D JUMPI PUSH2 0x213D PUSH2 0x2096 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x215F JUMPI PUSH2 0x215F PUSH2 0x206D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x9A1 JUMPI PUSH2 0x9A1 PUSH2 0x206D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x218B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C8A DUP2 PUSH2 0x1D9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND DUP2 DUP2 MUL DUP4 AND SWAP3 SWAP2 DUP2 ISZERO DUP3 DUP6 DIV DUP3 EQ OR PUSH2 0x21BF JUMPI PUSH2 0x21BF PUSH2 0x206D JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 AND DUP1 PUSH2 0x21E2 JUMPI PUSH2 0x21E2 PUSH2 0x2096 JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 DIV SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xC6 ADD PUSH19 0xFC2521C31CAEC32F38FAC9445ACB0753CD7E60 DUP13 DUP3 PUSH14 0x98A8EF3FF7CC64736F6C63430008 ISZERO STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF 0xDF BLOCKHASH PUSH14 0x35E3E01442D949EEC294C392A8EB DUP16 0xE2 ADDMOD PUSH28 0x3D0EE39240872706B87D64736F6C6343000815003360806040523480 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH11 0x57726170706564204E524B PUSH1 0xA8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x574E524B PUSH1 0xE0 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x64 SWAP2 SWAP1 PUSH3 0x121 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x73 DUP3 DUP3 PUSH3 0x121 JUMP JUMPDEST POP POP POP PUSH3 0x1ED JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0xA7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0xC8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x11C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0xF7 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x118 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x13D JUMPI PUSH3 0x13D PUSH3 0x7C JUMP JUMPDEST PUSH3 0x155 DUP2 PUSH3 0x14E DUP5 SLOAD PUSH3 0x92 JUMP JUMPDEST DUP5 PUSH3 0xCE JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x18D JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x174 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x118 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x1BE JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x19D JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x1DD JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xBEE DUP1 PUSH3 0x1FD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xD0E30DB0 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x25E JUMPI PUSH2 0xD5 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x209 JUMPI PUSH2 0xD5 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x197 JUMPI PUSH2 0xD5 JUMP JUMPDEST CALLDATASIZE PUSH2 0xD5 JUMPI PUSH2 0xD3 PUSH2 0x27E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD3 PUSH2 0x27E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x28A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFF SWAP2 SWAP1 PUSH2 0xA1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x123 CALLDATASIZE PUSH1 0x4 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0x31C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xAB3 JUMP JUMPDEST PUSH2 0x336 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0xAEF JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0x407 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x149 PUSH2 0x1EE CALLDATASIZE PUSH1 0x4 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x429 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0x438 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x259 CALLDATASIZE PUSH1 0x4 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0x4B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x149 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0xB2A JUMP JUMPDEST PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0x288 CALLER CALLVALUE PUSH2 0x4EC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x299 SWAP1 PUSH2 0xB5D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2C5 SWAP1 PUSH2 0xB5D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x312 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x312 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x32A DUP2 DUP6 DUP6 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x344 DUP6 DUP3 DUP6 PUSH2 0x6CF JUMP JUMPDEST PUSH2 0x34F DUP6 DUP6 DUP6 PUSH2 0x749 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x365 DUP2 DUP4 PUSH2 0x8ED JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x402 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x6661696C656420746F2073656E64204E524B PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x32A DUP2 DUP6 DUP6 PUSH2 0x41A DUP4 DUP4 PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0x424 SWAP2 SWAP1 PUSH2 0xB97 JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x299 SWAP1 PUSH2 0xB5D JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x446 DUP3 DUP7 PUSH2 0x4C1 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0x34F DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x32A DUP2 DUP6 DUP6 PUSH2 0x749 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x542 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F9 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x554 SWAP2 SWAP1 PUSH2 0xB97 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x60D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x66E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DB DUP5 DUP5 PUSH2 0x4C1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x743 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x736 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0x743 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5AB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x80F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x887 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x743 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x94D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x9C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA4C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xA30 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA5 DUP4 PUSH2 0xA6D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAD1 DUP5 PUSH2 0xA6D JUMP JUMPDEST SWAP3 POP PUSH2 0xADF PUSH1 0x20 DUP6 ADD PUSH2 0xA6D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB23 DUP3 PUSH2 0xA6D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB46 DUP4 PUSH2 0xA6D JUMP JUMPDEST SWAP2 POP PUSH2 0xB54 PUSH1 0x20 DUP5 ADD PUSH2 0xA6D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xB71 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xB91 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x330 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0xB2 0xBC DUP7 PUSH29 0x4D2A78E90D9F25B7F3959CD6FB5EEE533407C011AFBE035110CF1B6473 PUSH16 0x6C6343000815003360C0604052348015 PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4369 CODESIZE SUB DUP1 PUSH3 0x4369 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x69 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x80 MSTORE AND PUSH1 0xA0 MSTORE PUSH3 0xA1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x88 DUP4 PUSH3 0x4C JUMP JUMPDEST SWAP2 POP PUSH3 0x98 PUSH1 0x20 DUP5 ADD PUSH3 0x4C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x4136 PUSH3 0x233 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x15F ADD MSTORE DUP2 DUP2 PUSH2 0x36D ADD MSTORE DUP2 DUP2 PUSH2 0x522 ADD MSTORE DUP2 DUP2 PUSH2 0x571 ADD MSTORE DUP2 DUP2 PUSH2 0x62D ADD MSTORE DUP2 DUP2 PUSH2 0x850 ADD MSTORE DUP2 DUP2 PUSH2 0xB89 ADD MSTORE DUP2 DUP2 PUSH2 0xCC4 ADD MSTORE DUP2 DUP2 PUSH2 0x1014 ADD MSTORE DUP2 DUP2 PUSH2 0x10F7 ADD MSTORE DUP2 DUP2 PUSH2 0x11A2 ADD MSTORE DUP2 DUP2 PUSH2 0x1235 ADD MSTORE DUP2 DUP2 PUSH2 0x1353 ADD MSTORE DUP2 DUP2 PUSH2 0x13E1 ADD MSTORE DUP2 DUP2 PUSH2 0x1629 ADD MSTORE DUP2 DUP2 PUSH2 0x16E1 ADD MSTORE DUP2 DUP2 PUSH2 0x1772 ADD MSTORE DUP2 DUP2 PUSH2 0x17EF ADD MSTORE DUP2 DUP2 PUSH2 0x1863 ADD MSTORE DUP2 DUP2 PUSH2 0x1CAA ADD MSTORE DUP2 DUP2 PUSH2 0x1E9B ADD MSTORE DUP2 DUP2 PUSH2 0x1EF1 ADD MSTORE DUP2 DUP2 PUSH2 0x1F25 ADD MSTORE DUP2 DUP2 PUSH2 0x1FBA ADD MSTORE DUP2 DUP2 PUSH2 0x20F3 ADD MSTORE DUP2 DUP2 PUSH2 0x2205 ADD MSTORE PUSH2 0x2293 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x42C ADD MSTORE DUP2 DUP2 PUSH2 0x6A9 ADD MSTORE DUP2 DUP2 PUSH2 0x77B ADD MSTORE DUP2 DUP2 PUSH2 0x936 ADD MSTORE DUP2 DUP2 PUSH2 0x96F ADD MSTORE DUP2 DUP2 PUSH2 0xA66 ADD MSTORE DUP2 DUP2 PUSH2 0xC05 ADD MSTORE DUP2 DUP2 PUSH2 0xCA2 ADD MSTORE DUP2 DUP2 PUSH2 0xDD9 ADD MSTORE DUP2 DUP2 PUSH2 0x12B0 ADD MSTORE DUP2 DUP2 PUSH2 0x1413 ADD MSTORE DUP2 DUP2 PUSH2 0x155E ADD MSTORE DUP2 DUP2 PUSH2 0x1895 ADD MSTORE DUP2 DUP2 PUSH2 0x1AB4 ADD MSTORE DUP2 DUP2 PUSH2 0x1C58 ADD MSTORE DUP2 DUP2 PUSH2 0x1C88 ADD MSTORE DUP2 DUP2 PUSH2 0x1DB1 ADD MSTORE DUP2 DUP2 PUSH2 0x1ECF ADD MSTORE DUP2 DUP2 PUSH2 0x216E ADD MSTORE DUP2 DUP2 PUSH2 0x22C5 ADD MSTORE DUP2 DUP2 PUSH2 0x2B90 ADD MSTORE DUP2 DUP2 PUSH2 0x2BE0 ADD MSTORE DUP2 DUP2 PUSH2 0x2EAB ADD MSTORE DUP2 DUP2 PUSH2 0x3013 ADD MSTORE DUP2 DUP2 PUSH2 0x33C3 ADD MSTORE DUP2 DUP2 PUSH2 0x3465 ADD MSTORE PUSH2 0x34DC ADD MSTORE PUSH2 0x4136 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8803DBEE GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xC45A0155 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0xD06CA61F EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0xDED9382A EQ PUSH2 0x46E JUMPI DUP1 PUSH4 0xE8E33700 EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0xF305D719 EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0xFB3BDB41 EQ PUSH2 0x4DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8803DBEE EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0xAD615DEC EQ PUSH2 0x3A7 JUMPI DUP1 PUSH4 0xAF2979EB EQ PUSH2 0x3C7 JUMPI DUP1 PUSH4 0xB6F9DE95 EQ PUSH2 0x3E7 JUMPI DUP1 PUSH4 0xBAA2ABDE EQ PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A25D94A GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x4A25D94A EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x5B0D5984 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x5C11D795 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x791AC947 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x7FF36AB5 EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x85F8C259 EQ PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2751CEC EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x54D50D4 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x18CBAFE5 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x1F00CA74 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x2195995C EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x38ED1739 EQ PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x18E JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x18C JUMPI PUSH2 0x18C PUSH2 0x373F JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x1AE CALLDATASIZE PUSH1 0x4 PUSH2 0x377D JUMP JUMPDEST PUSH2 0x4EF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x1E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x37DB JUMP JUMPDEST PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0x600 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C4 SWAP2 SWAP1 PUSH2 0x38BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x3919 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A09 JUMP JUMPDEST PUSH2 0x965 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x283 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0xA3E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0xB5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AB3 JUMP JUMPDEST PUSH2 0xC9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0xD87 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH2 0x303 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x316 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B49 JUMP JUMPDEST PUSH2 0x1210 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x336 CALLDATASIZE PUSH1 0x4 PUSH2 0x37DB JUMP JUMPDEST PUSH2 0x1529 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x356 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0x1536 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x37DB JUMP JUMPDEST PUSH2 0x15F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x3E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x377D JUMP JUMPDEST PUSH2 0x1600 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B49 JUMP JUMPDEST PUSH2 0x174F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x415 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BB0 JUMP JUMPDEST PUSH2 0x1A89 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38F PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x469 CALLDATASIZE PUSH1 0x4 PUSH2 0x3919 JUMP JUMPDEST PUSH2 0x1C51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AB3 JUMP JUMPDEST PUSH2 0x1C7E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C22 JUMP JUMPDEST PUSH2 0x1D71 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1C4 JUMP JUMPDEST PUSH2 0x4AE PUSH2 0x4D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x377D JUMP JUMPDEST PUSH2 0x1E6F JUMP JUMPDEST PUSH2 0x21B PUSH2 0x4EA CALLDATASIZE PUSH1 0x4 PUSH2 0x3B49 JUMP JUMPDEST PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 TIMESTAMP DUP2 LT ISZERO PUSH2 0x51C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x54B DUP10 PUSH32 0x0 DUP11 DUP11 DUP11 ADDRESS DUP11 PUSH2 0x1A89 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH2 0x55B DUP10 DUP7 DUP6 PUSH2 0x241D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x5DF DUP6 DUP4 PUSH2 0x254E JUMP JUMPDEST POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F8 DUP5 DUP5 DUP5 PUSH2 0x262D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x623 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP7 DUP7 PUSH2 0x65A PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x669 JUMPI PUSH2 0x669 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x67E SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0x702 PUSH32 0x0 DUP10 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x270B SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x1 DUP5 MLOAD PUSH2 0x714 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x724 JUMPI PUSH2 0x724 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0x74A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x80F DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x760 JUMPI PUSH2 0x760 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x775 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST CALLER PUSH2 0x7EF PUSH32 0x0 DUP11 DUP11 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x7AD JUMPI PUSH2 0x7AD PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7C2 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST DUP12 DUP12 PUSH1 0x1 DUP2 DUP2 LT PUSH2 0x7D5 JUMPI PUSH2 0x7D5 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7EA SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH2 0x2896 JUMP JUMPDEST DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x802 JUMPI PUSH2 0x802 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x296F JUMP JUMPDEST PUSH2 0x84E DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP ADDRESS SWAP3 POP PUSH2 0x2AAD SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2E1A7D4D DUP4 PUSH1 0x1 DUP6 MLOAD PUSH2 0x88C SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x89C JUMPI PUSH2 0x89C PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x924 DUP5 DUP4 PUSH1 0x1 DUP6 MLOAD PUSH2 0x907 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x917 JUMPI PUSH2 0x917 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x254E JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x95C PUSH32 0x0 DUP5 DUP5 PUSH2 0x2CB5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x995 PUSH32 0x0 DUP16 DUP16 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH2 0x9A4 JUMPI DUP13 PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x9E3 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 DUP16 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x3DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xA24 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 PUSH2 0x1A89 JUMP JUMPDEST DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP POP POP SWAP12 POP SWAP12 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0xA61 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0xABF PUSH32 0x0 DUP10 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x270B SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x1 DUP5 MLOAD PUSH2 0xAD1 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xAE1 JUMPI PUSH2 0xAE1 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0xB07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0xB1D DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x760 JUMPI PUSH2 0x760 PUSH2 0x3CFE JUMP JUMPDEST PUSH2 0x924 DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2AAD SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0xB7F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP7 DUP7 PUSH2 0xBB6 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0xBC5 JUMPI PUSH2 0xBC5 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBDA SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC00 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0xC5E PUSH32 0x0 DUP10 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2CB5 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC74 JUMPI PUSH2 0xC74 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x74A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3DFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCE8 PUSH32 0x0 DUP14 PUSH32 0x0 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH2 0xCF7 JUMPI DUP12 PUSH2 0xCFB JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0xD36 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 DUP15 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x3DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD76 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH2 0x1600 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 TIMESTAMP DUP2 LT ISZERO PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0xE39 DUP6 DUP6 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xDBE JUMPI PUSH2 0xDBE PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xDD3 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST CALLER PUSH2 0xE33 PUSH32 0x0 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE20 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST DUP11 DUP11 PUSH1 0x1 DUP2 DUP2 LT PUSH2 0x7D5 JUMPI PUSH2 0x7D5 PUSH2 0x3CFE JUMP JUMPDEST DUP11 PUSH2 0x296F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 PUSH2 0xE48 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0xE57 JUMPI PUSH2 0xE57 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE6C SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xED8 SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP1 POP PUSH2 0xF18 DUP7 DUP7 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP9 SWAP3 POP PUSH2 0x2E36 SWAP2 POP POP JUMP JUMPDEST DUP7 PUSH2 0xFC1 DUP3 DUP9 DUP9 PUSH2 0xF2A PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0xF39 JUMPI PUSH2 0xF39 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xF4E SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF97 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFBB SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP1 PUSH2 0x30CF JUMP JUMPDEST LT ISZERO PUSH2 0xFDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 TIMESTAMP DUP2 LT ISZERO PUSH2 0x100A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 DUP6 PUSH2 0x1041 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1050 JUMPI PUSH2 0x1050 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1065 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x108B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0x10A1 DUP6 DUP6 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xDBE JUMPI PUSH2 0xDBE PUSH2 0x3CFE JUMP JUMPDEST PUSH2 0x10DF DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP ADDRESS SWAP3 POP PUSH2 0x2E36 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1146 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x116A SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x118C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1202 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xFDF DUP5 DUP3 PUSH2 0x254E JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1233 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x1270 JUMPI PUSH2 0x1270 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1285 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x12AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0x1309 PUSH32 0x0 CALLVALUE DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x270B SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x1 DUP5 MLOAD PUSH2 0x131B SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x132B JUMPI PUSH2 0x132B PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0x1351 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1393 JUMPI PUSH2 0x1393 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x1445 PUSH32 0x0 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x3CFE JUMP JUMPDEST DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1458 JUMPI PUSH2 0x1458 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1491 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14D4 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x14E0 JUMPI PUSH2 0x14E0 PUSH2 0x373F JUMP JUMPDEST PUSH2 0x151F DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2AAD SWAP2 POP POP JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F8 DUP5 DUP5 DUP5 PUSH2 0x3125 JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1559 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x15B7 PUSH32 0x0 DUP10 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2CB5 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x15CD JUMPI PUSH2 0x15CD PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0xB07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3DFB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F8 DUP5 DUP5 DUP5 PUSH2 0x31FE JUMP JUMPDEST PUSH1 0x0 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1623 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x1652 DUP9 PUSH32 0x0 DUP10 DUP10 DUP10 ADDRESS DUP10 PUSH2 0x1A89 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP4 POP PUSH2 0x16CB SWAP2 POP DUP10 SWAP1 DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16C6 SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST PUSH2 0x241D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x172D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1741 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x924 DUP5 DUP4 PUSH2 0x254E JUMP JUMPDEST DUP1 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1770 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x17AD JUMPI PUSH2 0x17AD PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x17C2 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x17E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1848 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x185C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x18C7 PUSH32 0x0 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1914 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1938 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x1944 JUMPI PUSH2 0x1944 PUSH2 0x373F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP7 PUSH2 0x1953 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1962 JUMPI PUSH2 0x1962 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1977 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19E3 SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A23 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2E36 SWAP2 POP POP JUMP JUMPDEST DUP8 PUSH2 0xFC1 DUP3 DUP10 DUP10 PUSH2 0x1A35 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1A44 JUMPI PUSH2 0x1A44 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1A59 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH2 0xF7A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1AAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ADA PUSH32 0x0 DUP13 DUP13 PUSH2 0x2896 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP13 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B30 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B54 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x226BF2D1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP5 AND SWAP1 PUSH4 0x89AFCB44 SWAP1 PUSH1 0x24 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BC5 SWAP2 SWAP1 PUSH2 0x3E78 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1BD5 DUP15 DUP15 PUSH2 0x329E JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1BF8 JUMPI DUP2 DUP4 PUSH2 0x1BFB JUMP JUMPDEST DUP3 DUP3 JUMPDEST SWAP1 SWAP8 POP SWAP6 POP DUP11 DUP8 LT ISZERO PUSH2 0x1C20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3E9C JUMP JUMPDEST DUP10 DUP7 LT ISZERO PUSH2 0x1C40 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3EE2 JUMP JUMPDEST POP POP POP POP POP SWAP8 POP SWAP8 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x95C PUSH32 0x0 DUP5 DUP5 PUSH2 0x270B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1CCE PUSH32 0x0 DUP15 PUSH32 0x0 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH2 0x1CDD JUMPI DUP13 PUSH2 0x1CE1 JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x1D1C SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 DUP16 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x3DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1D5C DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 PUSH2 0x4EF JUMP JUMPDEST SWAP1 SWAP16 SWAP1 SWAP15 POP SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1D97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x1DA5 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x3395 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH1 0x0 PUSH2 0x1DD7 PUSH32 0x0 DUP15 DUP15 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH2 0x1DE5 DUP14 CALLER DUP4 DUP9 PUSH2 0x296F JUMP JUMPDEST PUSH2 0x1DF1 DUP13 CALLER DUP4 DUP8 PUSH2 0x296F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35313C21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x6A627842 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E5D SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP3 POP POP POP SWAP9 POP SWAP9 POP SWAP9 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1E95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x1EC3 DUP11 PUSH32 0x0 DUP12 CALLVALUE DUP13 DUP13 PUSH2 0x3395 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH1 0x0 PUSH2 0x1F15 PUSH32 0x0 DUP13 PUSH32 0x0 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH2 0x1F23 DUP12 CALLER DUP4 DUP9 PUSH2 0x296F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE PUSH32 0x0 AND SWAP4 POP PUSH4 0xA9059CBB SWAP3 POP PUSH1 0x44 ADD SWAP1 POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2007 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x202B SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x2037 JUMPI PUSH2 0x2037 PUSH2 0x373F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35313C21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x6A627842 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x207F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20A3 SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP3 POP DUP4 CALLVALUE GT ISZERO PUSH2 0x20C0 JUMPI PUSH2 0x20C0 CALLER PUSH2 0x20BB DUP7 CALLVALUE PUSH2 0x3CEB JUMP JUMPDEST PUSH2 0x254E JUMP JUMPDEST POP POP SWAP7 POP SWAP7 POP SWAP7 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x20F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x212E JUMPI PUSH2 0x212E PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2143 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2169 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0x21C7 PUSH32 0x0 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2CB5 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP CALLVALUE DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x21DD JUMPI PUSH2 0x21DD PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2203 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3DFB JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2245 JUMPI PUSH2 0x2245 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x228C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x22F7 PUSH32 0x0 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x3CFE JUMP JUMPDEST DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x230A JUMPI PUSH2 0x230A PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2343 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2362 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2386 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x2392 JUMPI PUSH2 0x2392 PUSH2 0x373F JUMP JUMPDEST PUSH2 0x23D1 DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2AAD SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x23E4 JUMPI PUSH2 0x23E4 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLVALUE GT ISZERO PUSH2 0x151F JUMPI PUSH2 0x151F CALLER DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x240A JUMPI PUSH2 0x240A PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLVALUE PUSH2 0x20BB SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x2479 SWAP2 SWAP1 PUSH2 0x3F4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x24B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x24BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x24E5 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x24E5 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x24E5 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x2547 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A3A736166655472616E736665723A207472 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x185B9CD9995C8819985A5B1959 PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD PUSH2 0x2578 SWAP2 SWAP1 PUSH2 0x3F4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x25B5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x25BA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2628 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A3A736166655472616E736665724554483A PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x8115512081D1C985B9CD9995C8819985A5B1959 PUSH1 0x62 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x2692 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F49 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1394155517D05353D55395 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x26A2 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST PUSH2 0x26BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3F68 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26CC DUP6 PUSH2 0x3E5 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26DA DUP3 DUP6 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26F4 DUP4 PUSH2 0x26EE DUP9 PUSH2 0x3E8 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 PUSH2 0x3620 JUMP JUMPDEST SWAP1 POP PUSH2 0x2700 DUP2 DUP4 PUSH2 0x3FB0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 MLOAD LT ISZERO PUSH2 0x275F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E56414C49445F504154480000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2779 JUMPI PUSH2 0x2779 PUSH2 0x3903 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x27A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x27B9 JUMPI PUSH2 0x27B9 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 MLOAD PUSH2 0x27D6 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x288E JUMPI PUSH1 0x0 DUP1 PUSH2 0x2829 DUP8 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x27F6 JUMPI PUSH2 0x27F6 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 PUSH1 0x1 PUSH2 0x280C SWAP2 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x281C JUMPI PUSH2 0x281C PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3675 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2851 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2842 JUMPI PUSH2 0x2842 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 PUSH2 0x262D JUMP JUMPDEST DUP5 PUSH2 0x285D DUP6 PUSH1 0x1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x286D JUMPI PUSH2 0x286D PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP DUP1 DUP1 PUSH2 0x2886 SWAP1 PUSH2 0x3FE5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x27C8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x28A5 DUP6 DUP6 PUSH2 0x329E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP5 DUP2 SHL DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP4 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE SWAP2 SWAP4 POP SWAP2 POP DUP7 SWAP1 PUSH1 0x48 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x294D SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 MSTORE PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 DUP4 ADD MSTORE PUSH1 0x15 DUP3 ADD MSTORE PUSH32 0x96E8AC4277198FF8B6F785478AA9A39F403CB768DD02CBEE326C3E7DA348845F PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH2 0x29D3 SWAP2 SWAP1 PUSH2 0x3F4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2A10 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2A15 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2A3F JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x2A3F JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2A3F SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x2AA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A3A7472616E7366657246726F6D3A207472 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x185B9CD9995C919C9BDB4819985A5B1959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 MLOAD PUSH2 0x2ABE SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x2CAF JUMPI PUSH1 0x0 DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2ADA JUMPI PUSH2 0x2ADA PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 PUSH1 0x1 PUSH2 0x2AF0 SWAP2 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2B00 JUMPI PUSH2 0x2B00 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2B18 DUP4 DUP4 PUSH2 0x329E JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP8 PUSH2 0x2B29 DUP7 PUSH1 0x1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2B39 JUMPI PUSH2 0x2B39 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2B67 JUMPI DUP3 PUSH1 0x0 PUSH2 0x2B6B JUMP JUMPDEST PUSH1 0x0 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP11 MLOAD PUSH2 0x2B7F SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP9 LT PUSH2 0x2B8B JUMPI DUP9 PUSH2 0x2BD9 JUMP JUMPDEST PUSH2 0x2BD9 PUSH32 0x0 DUP8 DUP13 PUSH2 0x2BBC DUP13 PUSH1 0x2 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2BCC JUMPI PUSH2 0x2BCC PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C06 PUSH32 0x0 DUP9 DUP9 PUSH2 0x2896 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x22C0D9F DUP5 DUP5 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C43 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C63 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3FFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP DUP1 DUP1 PUSH2 0x2CA7 SWAP1 PUSH2 0x3FE5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2AB0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 MLOAD LT ISZERO PUSH2 0x2D09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E56414C49445F504154480000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D23 JUMPI PUSH2 0x2D23 PUSH2 0x3903 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D4C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 DUP2 PUSH1 0x1 DUP4 MLOAD PUSH2 0x2D5F SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2D6F JUMPI PUSH2 0x2D6F PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x1 DUP4 MLOAD PUSH2 0x2D8B SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO PUSH2 0x288E JUMPI PUSH1 0x0 DUP1 PUSH2 0x2DD1 DUP8 DUP7 PUSH2 0x2DA7 PUSH1 0x1 DUP8 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2DB7 JUMPI PUSH2 0x2DB7 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x281C JUMPI PUSH2 0x281C PUSH2 0x3CFE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2DF9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DEA JUMPI PUSH2 0x2DEA PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 PUSH2 0x3125 JUMP JUMPDEST DUP5 PUSH2 0x2E05 PUSH1 0x1 DUP7 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2E15 JUMPI PUSH2 0x2E15 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP DUP1 DUP1 PUSH2 0x2E2E SWAP1 PUSH2 0x404E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2D8E JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 MLOAD PUSH2 0x2E47 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x2628 JUMPI PUSH1 0x0 DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2E63 JUMPI PUSH2 0x2E63 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 PUSH1 0x1 PUSH2 0x2E79 SWAP2 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2E89 JUMPI PUSH2 0x2E89 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2EA1 DUP4 DUP4 PUSH2 0x329E JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH2 0x2ED1 PUSH32 0x0 DUP6 DUP6 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F3B SWAP2 SWAP1 PUSH2 0x407C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2F75 JUMPI DUP3 DUP5 PUSH2 0x2F78 JUMP JUMPDEST DUP4 DUP4 JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH2 0x2FB3 SWAP2 DUP5 SWAP2 SWAP1 DUP14 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH2 0xF7A JUMP JUMPDEST SWAP6 POP PUSH2 0x2FC0 DUP7 DUP4 DUP4 PUSH2 0x262D JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2FEA JUMPI DUP3 PUSH1 0x0 PUSH2 0x2FEE JUMP JUMPDEST PUSH1 0x0 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP13 MLOAD PUSH2 0x3002 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP11 LT PUSH2 0x300E JUMPI DUP11 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x303F PUSH32 0x0 DUP10 DUP15 PUSH2 0x2BBC DUP15 PUSH1 0x2 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x22C0D9F PUSH1 0xE0 SHL SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x22C0D9F SWAP1 PUSH2 0x3081 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x3FFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x309B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP DUP1 DUP1 PUSH2 0x30C7 SWAP1 PUSH2 0x3FE5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E39 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x30DC DUP4 DUP3 PUSH2 0x3CEB JUMP JUMPDEST SWAP2 POP DUP2 GT ISZERO PUSH2 0x95F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x64732D6D6174682D7375622D756E646572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x318B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4F PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x155514155517D05353D55395 PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x319B JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST PUSH2 0x31B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3F68 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31CF PUSH2 0x3E8 PUSH2 0x31C9 DUP7 DUP9 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x31E3 PUSH2 0x3E5 PUSH2 0x31C9 DUP7 DUP10 PUSH2 0x30CF JUMP JUMPDEST SWAP1 POP PUSH2 0x31F4 PUSH1 0x1 PUSH2 0x26EE DUP4 DUP6 PUSH2 0x3FB0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x325D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F41 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1353D55395 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x326D JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST PUSH2 0x3289 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3F68 JUMP JUMPDEST DUP3 PUSH2 0x3294 DUP6 DUP5 PUSH2 0x35B9 JUMP JUMPDEST PUSH2 0x5F8 SWAP2 SWAP1 PUSH2 0x3FB0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3310 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A204944454E544943414C5F41444452 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x4553534553 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x3330 JUMPI DUP3 DUP5 PUSH2 0x3333 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x338E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A205A45524F5F414444524553530000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE6A43905 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xE6A43905 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x340C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3430 SWAP2 SWAP1 PUSH2 0x40CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x34D4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64E329CB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP9 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xC9C65396 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34D2 SWAP2 SWAP1 PUSH2 0x40CC JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3502 PUSH32 0x0 DUP12 DUP12 PUSH2 0x3675 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x3514 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3524 JUMPI DUP8 SWAP4 POP DUP7 SWAP3 POP PUSH2 0x35AC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3531 DUP10 DUP5 DUP5 PUSH2 0x31FE JUMP JUMPDEST SWAP1 POP DUP8 DUP2 GT PUSH2 0x3565 JUMPI DUP6 DUP2 LT ISZERO PUSH2 0x355A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3EE2 JUMP JUMPDEST DUP9 SWAP5 POP SWAP3 POP DUP3 PUSH2 0x35AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3572 DUP10 DUP5 DUP7 PUSH2 0x31FE JUMP JUMPDEST SWAP1 POP DUP10 DUP2 GT ISZERO PUSH2 0x3584 JUMPI PUSH2 0x3584 PUSH2 0x373F JUMP JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x35A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3E9C JUMP JUMPDEST SWAP5 POP DUP8 SWAP4 POP JUMPDEST POP JUMPDEST POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x35DD JUMPI POP DUP3 DUP3 PUSH2 0x35CF DUP2 DUP4 PUSH2 0x40E9 JUMP JUMPDEST SWAP3 POP PUSH2 0x35DB SWAP1 DUP4 PUSH2 0x3FB0 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x95F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6D756C2D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x362D DUP4 DUP3 PUSH2 0x3FD2 JUMP JUMPDEST SWAP2 POP DUP2 LT ISZERO PUSH2 0x95F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6164642D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3684 DUP6 DUP6 PUSH2 0x329E JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x3695 DUP9 DUP9 DUP9 PUSH2 0x2896 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F6 SWAP2 SWAP1 PUSH2 0x407C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x372D JUMPI DUP1 DUP3 PUSH2 0x3730 JUMP JUMPDEST DUP2 DUP2 JUMPDEST SWAP1 SWAP10 SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x376A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x3778 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x37A1 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH2 0x37C6 DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x37F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x338E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3865 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x388A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3896 DUP10 DUP3 DUP11 ADD PUSH2 0x3807 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x38AA DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x38F7 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x38DB JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x392C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x394C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3960 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3972 JUMPI PUSH2 0x3972 PUSH2 0x3903 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x3997 JUMPI PUSH2 0x3997 PUSH2 0x3903 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH2 0x39B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x39DA JUMPI PUSH2 0x39CB DUP6 PUSH2 0x376D JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x39BA JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x376A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x160 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x3A2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP12 CALLDATALOAD PUSH2 0x3A36 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD PUSH2 0x3A46 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP10 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD SWAP9 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP8 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP7 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD PUSH2 0x3A6B DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP6 POP PUSH1 0xC0 DUP13 ADD CALLDATALOAD SWAP5 POP PUSH1 0xE0 DUP13 ADD CALLDATALOAD PUSH2 0x3A82 DUP2 PUSH2 0x39EA JUMP JUMPDEST SWAP4 POP PUSH2 0x3A91 PUSH2 0x100 DUP14 ADD PUSH2 0x39F8 JUMP JUMPDEST SWAP3 POP PUSH2 0x120 DUP13 ADD CALLDATALOAD SWAP2 POP PUSH2 0x140 DUP13 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x3AD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 CALLDATALOAD PUSH2 0x3ADE DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP10 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP9 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP8 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP7 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD PUSH2 0x3B03 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP6 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 DUP12 ADD CALLDATALOAD PUSH2 0x3B1A DUP2 PUSH2 0x39EA JUMP JUMPDEST SWAP4 POP PUSH2 0x3B28 PUSH1 0xE0 DUP13 ADD PUSH2 0x39F8 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 DUP12 ADD CALLDATALOAD SWAP2 POP PUSH2 0x120 DUP12 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3B61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B8B DUP9 DUP3 DUP10 ADD PUSH2 0x3807 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x3B9F DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3BCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x3BD6 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x3BE6 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH2 0x3C0B DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3C3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x3C4A DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x3C5A DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP3 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD PUSH2 0x3C86 DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xE0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20455850495245440000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x95F JUMPI PUSH2 0x95F PUSH2 0x3CD5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3D31 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20494E56414C49445F50415448000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20494E53554646494349454E545F4F55 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x1514155517D05353D55395 PUSH1 0xAA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A204558434553534956455F494E505554 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x17D05353D55395 PUSH1 0xCA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D31 DUP2 PUSH2 0x39EA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20494E53554646494349454E545F415F PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x105353D55395 PUSH1 0xD2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20494E53554646494349454E545F425F PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x105353D55395 PUSH1 0xD2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3F43 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3F2B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3F5E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3F28 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4C PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x4951554944495459 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3FCD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x95F JUMPI PUSH2 0x95F PUSH2 0x3CD5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3FF7 JUMPI PUSH2 0x3FF7 PUSH2 0x3CD5 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x4037 DUP2 PUSH1 0xA0 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3F28 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xA0 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x405D JUMPI PUSH2 0x405D PUSH2 0x3CD5 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4091 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x409A DUP5 PUSH2 0x4065 JUMP JUMPDEST SWAP3 POP PUSH2 0x40A8 PUSH1 0x20 DUP6 ADD PUSH2 0x4065 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x40C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x40DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D31 DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x95F JUMPI PUSH2 0x95F PUSH2 0x3CD5 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xF6 0xB7 CALLER MSTORE8 SWAP2 0x2F DUP6 PUSH2 0x1F63 PUSH31 0x48263C06B9A1387AF8C39092E3320F81A192C51464736F6C63430008150033 PUSH9 0x747470733A2F2F6D61 PUSH10 0x6E6E65742E696E667572 PUSH2 0x2E69 PUSH16 0x2F76332F623937393461643164646638 CALLVALUE PUSH5 0x6662386333 CALLVALUE PUSH5 0x3662623564 PUSH4 0x61323030 BALANCE PUSH9 0x747470733A2F2F7365 PUSH17 0x6F6C69612E696E667572612E696F2F7633 0x2F PUSH3 0x393739 CALLVALUE PUSH2 0x6431 PUSH5 0x6466383464 PUSH7 0x62386333346436 PUSH3 0x623564 PUSH4 0x61323030 BALANCE STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP PUSH18 0x9709ECFA91A80626FF3989D68F67F5B1DD1 0x2D PUSH9 0x747470733A2F2F6170 PUSH10 0x2E617661782E6E657477 PUSH16 0x726B2F6578742F62632F432F72706368 PUSH21 0x7470733A2F2F7270632E616E6B722E636F6D2F6273 PUSH4 0x5F746573 PUSH21 0x6E65745F63686170656C68747470733A2F2F727063 0x2D PUSH14 0x756D6261692E6D61746963766967 PUSH10 0x6C2E636F6D885CB69240 0xA9 CALLDATALOAD 0xD6 ORIGIN 0xD7 SWAP13 BALANCE PUSH18 0x9709ECFA91A80626FF3989D68F67F5B1DD1 0x2D PUSH9 0x747470733A2F2F676F PUSH6 0x726C692D726F PUSH13 0x6C75702E617262697472756D2E PUSH10 0x6F2F7270636874747073 GASPRICE 0x2F 0x2F PUSH2 0x7069 0x2E PUSH2 0x7661 PUSH25 0x2D746573742E6E6574776F726B2F6578742F62632F432F7270 PUSH4 0x68747470 PUSH20 0x3A2F2F6273632D6461746173656564312E62696E PUSH2 0x6E63 PUSH6 0x2E6F72676874 PUSH21 0x70733A2F2F676F65726C692E696E667572612E696F 0x2F PUSH23 0x332F623937393461643164646638346466623863333464 CALLDATASIZE PUSH3 0x623564 PUSH4 0x61323030 BALANCE LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI MOD 0xDC PUSH3 0xAE51C1 INVALID 0xD8 0x1F SELFDESTRUCT 0xA7 0x25 CALLDATACOPY TIMESTAMP 0xB8 0xB7 GT 0xFC EXP PUSH4 0x370BAA2D CALLDATASIZE 0xA7 0xE9 AND CALLVALUE LOG1 EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ",
              "sourceMap": "440:3712:54:-:0;;;3191:44:23;;;3231:4;-1:-1:-1;;3191:44:23;;;;;;;;825:28:22;;;;;;;;;;;440:3712:54;;;;;;;;;;;;;;;;",
              "linkReferences": {}
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@IS_SCRIPT_7803": {
                  "entryPoint": null,
                  "id": 7803,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_sendLogPayload_17128": {
                  "entryPoint": 8163,
                  "id": 17128,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@_toUpper_8177": {
                  "entryPoint": 8292,
                  "id": 8177,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@deployments_49828": {
                  "entryPoint": 252,
                  "id": 49828,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@exportDeployments_50011": {
                  "entryPoint": 3862,
                  "id": 50011,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@findChainName_50087": {
                  "entryPoint": 2279,
                  "id": 50087,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@getChainWithUpdatedRpcUrl_8294": {
                  "entryPoint": 7390,
                  "id": 8294,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@getChain_50023": {
                  "entryPoint": 458,
                  "id": 50023,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@getChain_7969": {
                  "entryPoint": 2733,
                  "id": 7969,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@initializeStdChains_8459": {
                  "entryPoint": 5007,
                  "id": 8459,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@logString_17181": {
                  "entryPoint": 3788,
                  "id": 17181,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@run_49675": {
                  "entryPoint": 518,
                  "id": 49675,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@setChainWithDefaultRpcUrl_8496": {
                  "entryPoint": 8196,
                  "id": 8496,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@setChain_8079": {
                  "entryPoint": 8616,
                  "id": 8079,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@test_49679": {
                  "entryPoint": 2731,
                  "id": 49679,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "abi_decode_string_fromMemory": {
                  "entryPoint": 10247,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_address_fromMemory": {
                  "entryPoint": 10048,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_array$_t_array$_t_string_memory_ptr_$2_memory_ptr_$dyn_memory_ptr_fromMemory": {
                  "entryPoint": 10634,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_string_memory_ptr_fromMemory": {
                  "entryPoint": 10364,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_struct$_Chain_$7844_memory_ptr_fromMemory": {
                  "entryPoint": 11895,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256": {
                  "entryPoint": 9674,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256_fromMemory": {
                  "entryPoint": 10022,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 9738,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_storage": {
                  "entryPoint": 11439,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_storage_to_string": {
                  "entryPoint": 11689,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11009,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_2186fe596dea1a615b7a1cb43899fd18c5b434aa29c8de36d4b8fcc67e3d6ad9__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12220,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_bytes5__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11605,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11648,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_storage_t_stringliteral_9b849f40317fba7d532c0bb5a0048fc588a330868a6212ac1ddf9bd048284b1c__to_t_string_memory_ptr_t_bytes13__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11562,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_06bc3ef3eee4fdcce3195cef9d74d258aba0896341bc2c935480fe386e382b3e_t_string_memory_ptr__to_t_bytes27_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 10492,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_2baf3da7b122675739218e635e969f0d1b560b915d35635239551f70fe123eed_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12266,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_2f5ddfff35cec202bbf760c515d7332e259c9b0c330efa0b2d03073b34906ba0_t_string_memory_ptr_t_stringliteral_03dcc98944d744f10105f4b63a1d5b4f5b14493812e66201e5f21a3da2662077_t_string_memory_ptr_t_stringliteral_cb54fc3dbdac1cb7b87378fdaddeb9e7549db2a108b5270efaa4bcd576270193__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12352,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_47f4e387a3e3a1bf5441a11471d96bb40e79f7cd37d0651a9e52162fbbec1fcf_t_string_memory_ptr__to_t_bytes30_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 10421,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_5d7c56fcc4e141be4faeb6cfd4880f29589549ce44f76d87ef22b113d79741ad_t_string_memory_ptr__to_t_bytes29_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 10563,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_ce7b2cad45f1a6d0b9b7bb125e9a8742fce8fed7d742c83265d4a2da4caf457d_t_string_memory_ptr_t_stringliteral_f310d2efb88747fac959fa7567a0a1a161dd43a77ba9af074f6191cf5bcf4f8b__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11039,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 9941,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed": {
                  "entryPoint": 9784,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 11822,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 12179,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_4e6fff0fc5b5dc488a5e6a18c9962f889fd002b6870d15a6d38e2608c1672222_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 12100,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_0f9b2418403e0efe0b594cd5a0bbad664afce7e82ee227d7bdd13366fe6c27b1__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_126dc7d4763b2b2c23a60aa98a5d472584b4ae417eca2b2710f81792900a6ecc__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2016869337567cea9dbdd5c3e7389f812a72b7d8339efb4f14ead7b7cb06dc46__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_30b2334ec57cbeeece39c6405e10d3437560135ecd84835d6b9144db1d575354__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_64f1cd082b277ed92a70b6890cc1e3b6ebd77bc6c9299e7ce82305de04926a4a__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_ab0ba8dace83d80dc1941286e8d0551223497db1b420e58abff2f3db2ad3fbf4__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_struct$_Chain_$7844_memory_ptr__to_t_struct$_Chain_$7844_memory_ptr__fromStack_reversed": {
                  "entryPoint": 9828,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 10195,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_3055": {
                  "entryPoint": 10113,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_memory_3057": {
                  "entryPoint": 10157,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_sub_t_uint8": {
                  "entryPoint": 12324,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_string_storage": {
                  "entryPoint": 11151,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
                  "entryPoint": 11234,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 9700,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_byte_array_length": {
                  "entryPoint": 9962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_used_part_and_set_length_of_short_byte_array": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "increment_t_uint256": {
                  "entryPoint": 10981,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 10959,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 10937,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 10091,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "object": "60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806306609bbe146200006f57806332e21ae7146200009f578063c040622614620000b8578063d200726514620000c4578063f8a8fd6d14620000c2578063f8ccbf4714620000dd575b600080fd5b6200008662000080366004620025ca565b620000fc565b6040516200009692919062002638565b60405180910390f35b620000a9620001ca565b60405162000096919062002664565b620000c262000206565b005b620000ce620008e7565b604051620000969190620026d5565b600c54620000eb9060ff1681565b604051901515815260200162000096565b600f81815481106200010d57600080fd5b90600052602060002090600202016000915090508060000180546200013290620026ea565b80601f01602080910402602001604051908101604052809291908181526020018280546200016090620026ea565b8015620001b15780601f106200018557610100808354040283529160200191620001b1565b820191906000526020600020905b8154815290600101906020018083116200019357829003601f168201915b505050600190930154919250506001600160a01b031682565b620001f66040518060800160405280606081526020016000815260200160608152602001606081525090565b620002014662000aad565b905090565b60405163c1978d1f60e01b815260206004820152601160248201527041444d494e5f505249564154455f4b455960781b60448201526000906000805160206200acb18339815191529063c1978d1f90606401602060405180830381865afa15801562000276573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029c919062002726565b60405163c1978d1f60e01b815260206004820152600d60248201526c4f574e45525f4144445245535360981b60448201529091506000906000805160206200acb18339815191529063c1978d1f90606401602060405180830381865afa1580156200030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000331919062002726565b6040516001625e79b760e01b03198152600481018490529091506000906000805160206200acb18339815191529063ffa1864990602401602060405180830381865afa15801562000386573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ac919062002740565b9050826000036200048e5760405163fd535ce160e01b815260206004820152608e60248201527f596f7520646f6e277420686176652061206465706c6f796572206163636f756e60448201527f742e204d616b65207375726520796f75206861766520736574204445504c4f5960648201527f45525f505249564154455f4b455920696e202e656e76206f722075736520607960848201527f61726e2067656e65726174656020746f2067656e65726174652061206e65772060a48201526d1c985b991bdb481858d8dbdd5b9d60921b60c482015260e4015b60405180910390fd5b81600003620004b057604051633649397d60e21b815260040160405180910390fd5b60405163ce817d4760e01b8152600481018490526000805160206200acb18339815191529063ce817d4790602401600060405180830381600087803b158015620004f957600080fd5b505af11580156200050e573d6000803e3d6000fd5b50506040516001625e79b760e01b0319815260048101869052600092506000805160206200acb1833981519152915063ffa1864990602401602060405180830381865afa15801562000564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200058a919062002740565b9050806040516200059b906200254c565b6001600160a01b039091168152602001604051809103906000f080158015620005c8573d6000803e3d6000fd5b50601480546001600160a01b0319166001600160a01b0392909216919091179055604051620005f7906200255a565b604051809103906000f08015801562000614573d6000803e3d6000fd5b50601680546001600160a01b0319166001600160a01b03928316908117909155601454604051921691620006489062002568565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156200067c573d6000803e3d6000fd5b50601580546001600160a01b0319166001600160a01b03928316179055601454604051632b65311f60e11b8152911660048201526200073e906000805160206200acb1833981519152906356ca623e90602401600060405180830381865afa158015620006ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200071791908101906200287c565b604051602001620007299190620028b5565b60405160208183030381529060405262000ecc565b601654604051632b65311f60e11b81526001600160a01b039091166004820152620007d7906000805160206200acb1833981519152906356ca623e90602401600060405180830381865afa1580156200079b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620007c591908101906200287c565b604051602001620007299190620028fc565b601554604051632b65311f60e11b81526001600160a01b03909116600482015262000870906000805160206200acb1833981519152906356ca623e90602401600060405180830381865afa15801562000834573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200085e91908101906200287c565b60405160200162000729919062002943565b6000805160206200ad3e83398151915260001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620008be57600080fd5b505af1158015620008d3573d6000803e3d6000fd5b50505050620008e162000f16565b50505050565b6060600046905060006000805160206200ad3e83398151915260001c6001600160a01b031663a85a84186040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000941573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200096b91908101906200298a565b905060005b815181101562000a91576000805160206200ad3e83398151915260001c6001600160a01b03166398680034838381518110620009b057620009b062002ab9565b6020026020010151600160028110620009cd57620009cd62002ab9565b60200201516040518263ffffffff1660e01b8152600401620009f09190620026d5565b6020604051808303816000875af192505050801562000a2e575060408051601f3d908101601f1916820190925262000a2b9181019062002726565b60015b1562000a7c575082460362000a7c5781818151811062000a525762000a5262002ab9565b602002602001015160006002811062000a6f5762000a6f62002ab9565b6020020151935050505090565b8062000a888162002ae5565b91505062000970565b5060405163057f3fa760e51b815260040160405180910390fd5b565b62000ad96040518060800160405280606081526020016000815260200160608152602001606081525090565b8160000362000b465760405162461bcd60e51b815260206004820152603260248201527f537464436861696e7320676574436861696e2875696e74323536293a2043686160448201527134b71024a21031b0b73737ba10313290181760711b606482015260840162000485565b62000b506200138f565b6000828152600360205260408120805462000b6b90620026ea565b80601f016020809104026020016040519081016040528092919081815260200182805462000b9990620026ea565b801562000bea5780601f1062000bbe5761010080835404028352916020019162000bea565b820191906000526020600020905b81548152906001019060200180831162000bcc57829003601f168201915b5050505050905060018160405162000c03919062002b01565b908152602001604051809103902060405180608001604052908160008201805462000c2e90620026ea565b80601f016020809104026020016040519081016040528092919081815260200182805462000c5c90620026ea565b801562000cad5780601f1062000c815761010080835404028352916020019162000cad565b820191906000526020600020905b81548152906001019060200180831162000c8f57829003601f168201915b505050505081526020016001820154815260200160028201805462000cd290620026ea565b80601f016020809104026020016040519081016040528092919081815260200182805462000d0090620026ea565b801562000d515780601f1062000d255761010080835404028352916020019162000d51565b820191906000526020600020905b81548152906001019060200180831162000d3357829003601f168201915b5050505050815260200160038201805462000d6c90620026ea565b80601f016020809104026020016040519081016040528092919081815260200182805462000d9a90620026ea565b801562000deb5780601f1062000dbf5761010080835404028352916020019162000deb565b820191906000526020600020905b81548152906001019060200180831162000dcd57829003601f168201915b50505091909252505050602081015160405163348051d760e11b8152600481018690529193501515906000805160206200acb183398151915290636900a3ae90602401600060405180830381865afa15801562000e4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000e7691908101906200287c565b60405160200162000e88919062002b1f565b6040516020818303038152906040529062000eb85760405162461bcd60e51b8152600401620004859190620026d5565b5062000ec5818362001cde565b9392505050565b62000f138160405160240162000ee39190620026d5565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905262001fe3565b50565b6000805160206200ad3e83398151915260001c6001600160a01b031663d930a0e66040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000f67573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000f9191908101906200287c565b600d9062000fa0908262002be2565b50600d60405160200162000fb5919062002d2a565b604051602081830303815290604052600e908162000fd4919062002be2565b5060405163348051d760e11b81524660048201526000906000805160206200acb183398151915290636900a3ae90602401600060405180830381865afa15801562001023573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200104d91908101906200287c565b9050600e8160405160200162001064919062002d55565b60408051601f198184030181529082905262001084929160200162002d80565b604051602081830303815290604052600e9081620010a3919062002be2565b50600f5460609060005b818110156200121957600f80546000805160206200acb1833981519152916388da6d3591869184916356ca623e919087908110620010ef57620010ef62002ab9565b600091825260209091206002909102016001015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401600060405180830381865afa15801562001148573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200117291908101906200287c565b600f858154811062001188576200118862002ab9565b90600052602060002090600202016000016040518463ffffffff1660e01b8152600401620011b99392919062002e2e565b6000604051808303816000875af1158015620011d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200120391908101906200287c565b5080620012108162002ae5565b915050620010ad565b506060306001600160a01b03166332e21ae76040518163ffffffff1660e01b81526004016000604051808303816000875af19250505080156200128057506040513d6000823e601f3d908101601f191682016040526200127d919081019062002e77565b60015b62001297576200128f620008e7565b90506200129b565b5190505b6040516388da6d3560e01b81526000805160206200acb1833981519152906388da6d3590620012d1908690859060040162002f44565b6000604051808303816000875af1158015620012f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200131b91908101906200287c565b60405163e23cd19f60e01b81529093506000805160206200acb18339815191529063e23cd19f9062001355908690600e9060040162002f93565b600060405180830381600087803b1580156200137057600080fd5b505af115801562001385573d6000803e3d6000fd5b5050505050505050565b60005460ff16156200139d57565b6000805460ff19166001179055604080518082018252600580825264185b9d9a5b60da1b602080840191909152835160a0810185526060810192835264105b9d9a5b60da1b6080820152918252617a6982820152835180850185526015815274687474703a2f2f3132372e302e302e313a3835343560581b91810191909152928101929092526200142e9162002004565b620014ab604051806040016040528060078152602001661b585a5b9b995d60ca1b81525060405180606001604052806040518060400160405280600781526020016613585a5b9b995d60ca1b8152508152602001600181526020016040518060600160405280603d81526020016200ac37603d9139905262002004565b6200152660405180604001604052806006815260200165676f65726c6960d01b815250604051806060016040528060405180604001604052806006815260200165476f65726c6960d01b8152508152602001600581526020016040518060600160405280603c81526020016200adce603c9139905262002004565b620015a5604051806040016040528060078152602001667365706f6c696160c81b8152506040518060600160405280604051806040016040528060078152602001665365706f6c696160c81b815250815260200162aa36a781526020016040518060600160405280603d81526020016200ac74603d9139905262002004565b62001641604051806040016040528060088152602001676f7074696d69736d60c01b8152506040518060600160405280604051806040016040528060088152602001674f7074696d69736d60c01b8152508152602001600a81526020016040518060400160405280601b81526020017f68747470733a2f2f6d61696e6e65742e6f7074696d69736d2e696f000000000081525081525062002004565b620016ec6040518060400160405280600f81526020016e6f7074696d69736d5f676f65726c6960881b81525060405180606001604052806040518060400160405280600f81526020016e4f7074696d69736d20476f65726c6960881b81525081526020016101a481526020016040518060400160405280601a81526020017f68747470733a2f2f676f65726c692e6f7074696d69736d2e696f00000000000081525081525062002004565b620017916040518060400160405280600c81526020016b617262697472756d5f6f6e6560a01b81525060405180606001604052806040518060400160405280600c81526020016b417262697472756d204f6e6560a01b815250815260200161a4b181526020016040518060400160405280601c81526020017f68747470733a2f2f617262312e617262697472756d2e696f2f7270630000000081525081525062002004565b6200182860405180604001604052806013815260200172617262697472756d5f6f6e655f676f65726c6960681b815250604051806060016040528060405180604001604052806013815260200172417262697472756d204f6e6520476f65726c6960681b815250815260200162066eed81526020016040518060600160405280602581526020016200ad5e60259139905262002004565b620018cf6040518060400160405280600d81526020016c617262697472756d5f6e6f766160981b81525060405180606001604052806040518060400160405280600d81526020016c417262697472756d204e6f766160981b815250815260200161a4ba81526020016040518060400160405280601c81526020017f68747470733a2f2f6e6f76612e617262697472756d2e696f2f7270630000000081525081525062002004565b62001969604051806040016040528060078152602001663837b63cb3b7b760c91b8152506040518060600160405280604051806040016040528060078152602001662837b63cb3b7b760c91b8152508152602001608981526020016040518060400160405280601781526020017f68747470733a2f2f706f6c79676f6e2d7270632e636f6d00000000000000000081525081525062002004565b620019f66040518060400160405280600e81526020016d706f6c79676f6e5f6d756d62616960901b81525060405180606001604052806040518060400160405280600e81526020016d506f6c79676f6e204d756d62616960901b81525081526020016201388181526020016040518060600160405280602181526020016200ad1d60219139905262002004565b62001a78604051806040016040528060098152602001686176616c616e63686560b81b8152506040518060600160405280604051806040016040528060098152602001684176616c616e63686560b81b815250815260200161a86a81526020016040518060600160405280602581526020016200acd160259139905262002004565b62001b046040518060400160405280600e81526020016d6176616c616e6368655f66756a6960901b81525060405180606001604052806040518060400160405280600e81526020016d4176616c616e6368652046756a6960901b815250815260200161a86981526020016040518060600160405280602a81526020016200ad83602a9139905262002004565b62001b916040518060400160405280600f81526020016e3137312fb9b6b0b93a2fb1b430b4b760891b81525060405180606001604052806040518060400160405280600f81526020016e2127211029b6b0b93a1021b430b4b760891b8152508152602001603881526020016040518060600160405280602181526020016200adad60219139905262002004565b62001c3a6040518060400160405280601781526020017f626e625f736d6172745f636861696e5f746573746e657400000000000000000081525060405180606001604052806040518060400160405280601781526020017f424e4220536d61727420436861696e20546573746e65740000000000000000008152508152602001606181526020016040518060600160405280602781526020016200acf660279139905262002004565b62000aab6040518060400160405280600c81526020016b33b737b9b4b9afb1b430b4b760a11b81525060405180606001604052806040518060400160405280600c81526020016b23b737b9b4b99021b430b4b760a11b8152508152602001606481526020016040518060400160405280601b81526020017f68747470733a2f2f7270632e676e6f736973636861696e2e636f6d000000000081525081525062002004565b62001d0a6040518060800160405280606081526020016000815260200160608152602001606081525090565b81606001515160000362001fda5760405163975a6ce960e01b81526000805160206200acb18339815191529063975a6ce99062001d4c908690600401620026d5565b600060405180830381865afa92505050801562001d8d57506040513d6000823e601f3d908101601f1916820160405262001d8a91908101906200287c565b60015b62001fd4573d80801562001dbe576040519150601f19603f3d011682016040523d82523d6000602084013e62001dc3565b606091505b50600062001dd18562002064565b60405160200162001de3919062002fbc565b60408051601f1981840301815291905260045490915060ff161562001eba576000805160206200ad3e83398151915260001c6001600160a01b031663d145736c8260028860405162001e36919062002b01565b9081526040519081900360200181206001600160e01b031960e085901b16825262001e65929160040162002f93565b6000604051808303816000875af115801562001e85573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001eaf91908101906200287c565b606085015262001f3c565b60405163f877cb1960e01b81526000805160206200acb18339815191529063f877cb199062001eee908490600401620026d5565b600060405180830381865afa15801562001f0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001f3691908101906200287c565b60608501525b60008560405160200162001f51919062002fea565b60408051601f198184030181529082905262001f7091602401620026d5565b60408051601f19818403018152919052602080820180516001600160e01b0316630bc4450360e01b178152855191860191909120825190912091925014158062001fbd5750606085015151155b1562001fcb57825183602001fd5b50505062001fda565b60608301525b50805b92915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000816040015190508060028460405162002020919062002b01565b908152602001604051809103902090816200203c919062002be2565b506040805160208101825260008152908301526200205b8383620021a8565b60409091015250565b606060008290506000815167ffffffffffffffff8111156200208a576200208a6200276b565b6040519080825280601f01601f191660200182016040528015620020b5576020820181803683370190505b50905060005b8251811015620021a0576000838281518110620020dc57620020dc62002ab9565b01602001516001600160f81b0319169050606160f81b8110801590620021105750603d60f91b6001600160f81b0319821611155b156200215c5762002127602060f883901c62003024565b60f81b8383815181106200213f576200213f62002ab9565b60200101906001600160f81b031916908160001a9053506200218a565b8083838151811062002172576200217262002ab9565b60200101906001600160f81b031916908160001a9053505b5080620021978162002ae5565b915050620020bb565b509392505050565b8151600003620022375760405162461bcd60e51b815260206004820152604d60248201527f537464436861696e7320736574436861696e28737472696e672c436861696e4460448201527f617461293a20436861696e20616c6961732063616e6e6f74206265207468652060648201526c32b6b83a3c9039ba3934b7339760991b608482015260a40162000485565b8060200151600003620022b35760405162461bcd60e51b815260206004820152603b60248201527f537464436861696e7320736574436861696e28737472696e672c436861696e4460448201527f617461293a20436861696e2049442063616e6e6f7420626520302e0000000000606482015260840162000485565b620022bd6200138f565b60208082015160009081526003909152604081208054620022de90620026ea565b80601f01602080910402602001604051908101604052809291908181526020018280546200230c90620026ea565b80156200235d5780601f1062002331576101008083540402835291602001916200235d565b820191906000526020600020905b8154815290600101906020018083116200233f57829003601f168201915b5050505050905080516000148062002382575082805190602001208180519060200120145b602083015160405163348051d760e11b815260048101919091526000805160206200acb183398151915290636900a3ae90602401600060405180830381865afa158015620023d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620023fe91908101906200287c565b826040516020016200241292919062003040565b60405160208183030381529060405290620024425760405162461bcd60e51b8152600401620004859190620026d5565b50600060018460405162002457919062002b01565b90815260200160405180910390206001015490506003600082815260200190815260200160002060006200248c919062002576565b604051806080016040528084600001518152602001846020015181526020018581526020018460400151815250600185604051620024cb919062002b01565b90815260405190819003602001902081518190620024ea908262002be2565b5060208201516001820155604082015160028201906200250b908262002be2565b506060820151600382019062002522908262002be2565b505050602080840151600090815260039091526040902062002545858262002be2565b5050505050565b612a0180620030e283390190565b610deb8062005ae383390190565b61436980620068ce83390190565b5080546200258490620026ea565b6000825580601f1062002595575050565b601f01602090049060005260206000209081019062000f1391905b80821115620025c65760008155600101620025b0565b5090565b600060208284031215620025dd57600080fd5b5035919050565b60005b8381101562002601578181015183820152602001620025e7565b50506000910152565b6000815180845262002624816020860160208601620025e4565b601f01601f19169290920160200192915050565b6040815260006200264d60408301856200260a565b905060018060a01b03831660208301529392505050565b6020815260008251608060208401526200268260a08401826200260a565b9050602084015160408401526040840151601f1980858403016060860152620026ac83836200260a565b9250606086015191508085840301608086015250620026cc82826200260a565b95945050505050565b60208152600062000ec560208301846200260a565b600181811c90821680620026ff57607f821691505b6020821081036200272057634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156200273957600080fd5b5051919050565b6000602082840312156200275357600080fd5b81516001600160a01b038116811462000ec557600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715620027a757620027a76200276b565b60405290565b6040516080810167ffffffffffffffff81118282101715620027a757620027a76200276b565b604051601f8201601f1916810167ffffffffffffffff81118282101715620027ff57620027ff6200276b565b604052919050565b600082601f8301126200281957600080fd5b815167ffffffffffffffff8111156200283657620028366200276b565b6200284b601f8201601f1916602001620027d3565b8181528460208386010111156200286157600080fd5b62002874826020830160208701620025e4565b949350505050565b6000602082840312156200288f57600080fd5b815167ffffffffffffffff811115620028a757600080fd5b620028748482850162002807565b7f666163746f727920636f6e7472616374206465706c6f7965642061743a200000815260008251620028ef81601e850160208701620025e4565b91909101601e0192915050565b7f776e726b20636f6e7472616374206465706c6f7965642061743a2000000000008152600082516200293681601b850160208701620025e4565b91909101601b0192915050565b7f726f7574657220636f6e7472616374206465706c6f7965642061743a200000008152600082516200297d81601d850160208701620025e4565b91909101601d0192915050565b600060208083850312156200299e57600080fd5b825167ffffffffffffffff80821115620029b757600080fd5b818501915085601f830112620029cc57600080fd5b815181811115620029e157620029e16200276b565b620029f1848260051b01620027d3565b81815260059190911b8301840190848101908883111562002a1157600080fd5b8585015b8381101562002aac5780518581111562002a2e57600080fd5b8601603f81018b1362002a4057600080fd5b62002a4a62002781565b808c60608401111562002a5c57600080fd5b8983015b6060840181101562002a9b5780518981111562002a7c57600080fd5b62002a8c8f8d8388010162002807565b845250918a01918a0162002a60565b508552505091860191860162002a15565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162002afa5762002afa62002acf565b5060010190565b6000825162002b15818460208701620025e4565b9190910192915050565b7f537464436861696e7320676574436861696e2875696e74323536293a2043686181526a034b7103bb4ba341024a2160ad1b60208201526000825162002b6d81602b850160208701620025e4565b6a103737ba103337bab7321760a91b602b939091019283015250603601919050565b601f82111562002bdd57600081815260208120601f850160051c8101602086101562002bb85750805b601f850160051c820191505b8181101562002bd95782815560010162002bc4565b5050505b505050565b815167ffffffffffffffff81111562002bff5762002bff6200276b565b62002c178162002c108454620026ea565b8462002b8f565b602080601f83116001811462002c4f576000841562002c365750858301515b600019600386901b1c1916600185901b17855562002bd9565b600085815260208120601f198616915b8281101562002c805788860151825594840194600190910190840162002c5f565b508582101562002c9f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000815462002cbe81620026ea565b6001828116801562002cd9576001811462002cef5762002d20565b60ff198416875282151583028701945062002d20565b8560005260208060002060005b8581101562002d175781548a82015290840190820162002cfc565b50505082870194505b5050505092915050565b600062002d38828462002caf565b6c2f6465706c6f796d656e74732f60981b8152600d019392505050565b6000825162002d69818460208701620025e4565b64173539b7b760d91b920191825250600501919050565b600062002d8e828562002caf565b835162002da0818360208801620025e4565b01949350505050565b6000815462002db881620026ea565b80855260206001838116801562002dd8576001811462002df35762002e23565b60ff1985168884015283151560051b88018301955062002e23565b866000528260002060005b8581101562002e1b5781548a820186015290830190840162002dfe565b890184019650505b505050505092915050565b60608152600062002e4360608301866200260a565b828103602084015262002e5781866200260a565b9050828103604084015262002e6d818562002da9565b9695505050505050565b60006020828403121562002e8a57600080fd5b815167ffffffffffffffff8082111562002ea357600080fd5b908301906080828603121562002eb857600080fd5b62002ec2620027ad565b82518281111562002ed257600080fd5b62002ee08782860162002807565b8252506020830151602082015260408301518281111562002f0057600080fd5b62002f0e8782860162002807565b60408301525060608301518281111562002f2757600080fd5b62002f358782860162002807565b60608301525095945050505050565b60608152600062002f5960608301856200260a565b828103806020850152600b82526a6e6574776f726b4e616d6560a81b602083015260408101604085015250620026cc60408201856200260a565b60408152600062002fa860408301856200260a565b8281036020840152620026cc818562002da9565b6000825162002fd0818460208701620025e4565b6717d49410d7d5549360c21b920191825250600801919050565b6f034b73b30b634b210393831903ab936160851b81526000825162003017816010850160208701620025e4565b9190910160100192915050565b60ff828116828216039081111562001fdd5762001fdd62002acf565b7f537464436861696e7320736574436861696e28737472696e672c436861696e4481526e030ba30949d1021b430b4b71024a21608d1b6020820152600083516200309281602f850160208801620025e4565b711030b63932b0b23c903ab9b2b210313c901160711b602f918401918201528351620030c6816041840160208801620025e4565b61111760f11b6041929091019182015260430194935050505056fe608060405234801561001057600080fd5b50604051612a01380380612a0183398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61296e806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2e74af61161005b578063a2e74af6146100f4578063c9c6539614610109578063e6a439051461011c578063f46901ed1461015057600080fd5b8063017e7e581461008d578063094b7415146100bd5780631e3dd18b146100d0578063574f2ba3146100e3575b600080fd5b6000546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100a0906001600160a01b031681565b6100a06100de366004610583565b610163565b6003546040519081526020016100b4565b6101076101023660046105b8565b61018d565b005b6100a06101173660046105da565b610205565b6100a061012a3660046105da565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b61010761015e3660046105b8565b610503565b6003818154811061017357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031633146101e35760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b60448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b0316036102685760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f414444524553534553000060448201526064016101da565b600080836001600160a01b0316856001600160a01b03161061028b57838561028e565b84845b90925090506001600160a01b0382166102e95760405162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f4144445245535300000000000000000060448201526064016101da565b6001600160a01b038281166000908152600260209081526040808320858516845290915290205416156103575760405162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b60448201526064016101da565b60006040518060200161036990610576565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b15801561041b57600080fd5b505af115801561042f573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526002602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560038054600181018255958190527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9095018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6001546001600160a01b031633146105545760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b60448201526064016101da565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61232b8061060e83390190565b60006020828403121561059557600080fd5b5035919050565b80356001600160a01b03811681146105b357600080fd5b919050565b6000602082840312156105ca57600080fd5b6105d38261059c565b9392505050565b600080604083850312156105ed57600080fd5b6105f68361059c565b91506106046020840161059c565b9050925092905056fe60806040526001600c5534801561001557600080fd5b5060408051808201825260098152682737b93232b5902b1960b91b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fde430dc832330fbaacead3e6c47b78169d8abe3f0fff0a13b56a3f3b9c0a1768818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b03191633179055612224806101076000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610407578063d505accf1461041a578063dd62ed3e1461042d578063fff6cae91461045857600080fd5b8063ba9a7a56146103d8578063bc25cf77146103e1578063c45a0155146103f457600080fd5b80637ecebe00116100d35780637ecebe001461035857806389afcb441461037857806395d89b41146103a0578063a9059cbb146103c557600080fd5b80636a6278421461031c57806370a082311461032f5780637464fc3d1461034f57600080fd5b806323b872dd116101665780633644e515116101405780633644e515146102ee578063485cc955146102f75780635909c0d51461030a5780635a3d54931461031357600080fd5b806323b872dd1461029a57806330adf81f146102ad578063313ce567146102d457600080fd5b8063022c0d9f146101ae57806306fdde03146101c35780630902f1ac14610201578063095ea7b3146102355780630dfe16811461025857806318160ddd14610283575b600080fd5b6101c16101bc366004611db6565b610460565b005b6101eb604051806040016040528060098152602001682737b93232b5902b1960b91b81525081565b6040516101f89190611e70565b60405180910390f35b610209610966565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101f8565b610248610243366004611ea3565b610990565b60405190151581526020016101f8565b60065461026b906001600160a01b031681565b6040516001600160a01b0390911681526020016101f8565b61028c60005481565b6040519081526020016101f8565b6102486102a8366004611ecf565b6109a7565b61028c7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102dc601281565b60405160ff90911681526020016101f8565b61028c60035481565b6101c1610305366004611f10565b610a3b565b61028c60095481565b61028c600a5481565b61028c61032a366004611f49565b610aba565b61028c61033d366004611f49565b60016020526000908152604090205481565b61028c600b5481565b61028c610366366004611f49565b60046020526000908152604090205481565b61038b610386366004611f49565b610d82565b604080519283526020830191909152016101f8565b6101eb6040518060400160405280600681526020016504e524b2d4c560d41b81525081565b6102486103d3366004611ea3565b6110e8565b61028c6103e881565b6101c16103ef366004611f49565b6110f5565b60055461026b906001600160a01b031681565b60075461026b906001600160a01b031681565b6101c1610428366004611f66565b611209565b61028c61043b366004611f10565b600260209081526000928352604080842090915290825290205481565b6101c161141d565b600c5460011461048b5760405162461bcd60e51b815260040161048290611fdd565b60405180910390fd5b6000600c558415158061049e5750600084115b6104f85760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608401610482565b600080610503610966565b5091509150816001600160701b0316871080156105285750806001600160701b031686105b61057e5760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b6064820152608401610482565b60065460075460009182916001600160a01b039182169190811690891682148015906105bc5750806001600160a01b0316896001600160a01b031614155b6106005760405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606401610482565b8a1561061157610611828a8d611541565b891561062257610622818a8c611541565b861561068f576040516304347a1760e21b81526001600160a01b038a16906310d1e85c9061065c9033908f908f908e908e90600401612008565b600060405180830381600087803b15801561067657600080fd5b505af115801561068a573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156106d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f79190612054565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190612054565b92505050600089856001600160701b031661077d9190612083565b831161078a5760006107a7565b61079d8a6001600160701b038716612083565b6107a79084612083565b905060006107be8a6001600160701b038716612083565b83116107cb5760006107e8565b6107de8a6001600160701b038716612083565b6107e89084612083565b905060008211806107f95750600081115b6108515760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608401610482565b600061087361086184600361168c565b61086d876103e861168c565b906116f3565b9050600061088561086184600361168c565b90506108aa620f42406108a46001600160701b038b8116908b1661168c565b9061168c565b6108b4838361168c565b10156108f15760405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606401610482565b50506108ff84848888611749565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600061099d338484611935565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610a26576001600160a01b0384166000908152600260209081526040808320338452909152902054610a0190836116f3565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610a31848484611997565b5060019392505050565b6005546001600160a01b03163314610a8c5760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606401610482565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6000600c54600114610ade5760405162461bcd60e51b815260040161048290611fdd565b6000600c81905580610aee610966565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190612054565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd69190612054565b90506000610bed836001600160701b0387166116f3565b90506000610c04836001600160701b0387166116f3565b90506000610c128787611a3d565b60008054919250819003610c4c57610c386103e861086d610c33878761168c565b611b7a565b9850610c4760006103e8611bea565b610c93565b610c906001600160701b038916610c63868461168c565b610c6d91906120ac565b6001600160701b038916610c81868561168c565b610c8b91906120ac565b611c79565b98505b60008911610cf45760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d3525395115160c21b6064820152608401610482565b610cfe8a8a611bea565b610d0a86868a8a611749565b8115610d3457600854610d30906001600160701b0380821691600160701b90041661168c565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c54600114610da75760405162461bcd60e51b815260040161048290611fdd565b6000600c81905580610db7610966565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a0823190602401602060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e359190612054565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190612054565b30600090815260016020526040812054919250610ec08888611a3d565b60005490915080610ed1848761168c565b610edb91906120ac565b9a5080610ee8848661168c565b610ef291906120ac565b995060008b118015610f04575060008a115b610f615760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d0955493915160c21b6064820152608401610482565b610f6b3084611c91565b610f76878d8d611541565b610f81868d8c611541565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa158015610fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe99190612054565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110549190612054565b935061106285858b8b611749565b811561108c57600854611088906001600160701b0380821691600160701b90041661168c565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b600061099d338484611997565b600c546001146111175760405162461bcd60e51b815260040161048290611fdd565b6000600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916111b291849186916111ad916001600160701b039091169084906370a08231906024015b602060405180830381865afa158015611189573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190612054565b611541565b6008546040516370a0823160e01b81523060048201526111ff91839186916111ad91600160701b9091046001600160701b0316906001600160a01b038516906370a082319060240161116c565b50506001600c5550565b4284101561124e5760405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606401610482565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876112a1836120c0565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161131a92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611385573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906113bb5750886001600160a01b0316816001600160a01b0316145b6114075760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e4154555245000000006044820152606401610482565b611412898989611935565b505050505050505050565b600c5460011461143f5760405162461bcd60e51b815260040161048290611fdd565b6000600c556006546040516370a0823160e01b815230600482015261153a916001600160a01b0316906370a0823190602401602060405180830381865afa15801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b29190612054565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156114fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151e9190612054565b6008546001600160701b0380821691600160701b900416611749565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916115cd91906120d9565b6000604051808303816000865af19150503d806000811461160a576040519150601f19603f3d011682016040523d82523d6000602084013e61160f565b606091505b509150915081801561163957508051158061163957508080602001905181019061163991906120f5565b6116855760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c45440000000000006044820152606401610482565b5050505050565b60008115806116b0575082826116a28183612117565b92506116ae90836120ac565b145b6109a15760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610482565b6000826117008382612083565b91508111156109a15760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610482565b6001600160701b03841180159061176757506001600160701b038311155b6117a95760405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606401610482565b60006117ba6401000000004261212e565b6008549091506000906117da90600160e01b900463ffffffff1683612142565b905060008163ffffffff161180156117fa57506001600160701b03841615155b801561180e57506001600160701b03831615155b1561189d578063ffffffff166118368561182786611d1b565b6001600160e01b031690611d34565b6001600160e01b03166118499190612117565b6009600082825461185a9190612166565b909155505063ffffffff81166118738461182787611d1b565b6001600160e01b03166118869190612117565b600a60008282546118979190612166565b90915550505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166000908152600160205260409020546119ba90826116f3565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546119e99082611d49565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061198a9085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab79190612179565b600b546001600160a01b038216158015945091925090611b66578015611b61576000611af2610c336001600160701b0388811690881661168c565b90506000611aff83611b7a565b905080821115611b5e576000611b21611b1884846116f3565b6000549061168c565b90506000611b3a83611b3486600561168c565b90611d49565b90506000611b4882846120ac565b90508015611b5a57611b5a8782611bea565b5050505b50505b611b72565b8015611b72576000600b555b505092915050565b60006003821115611bdb5750806000611b946002836120ac565b611b9f906001612166565b90505b81811015611bd557905080600281611bba81866120ac565b611bc49190612166565b611bce91906120ac565b9050611ba2565b50919050565b8115611be5575060015b919050565b600054611bf79082611d49565b60009081556001600160a01b038316815260016020526040902054611c1c9082611d49565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611c6d9085815260200190565b60405180910390a35050565b6000818310611c885781611c8a565b825b9392505050565b6001600160a01b038216600090815260016020526040902054611cb490826116f3565b6001600160a01b03831660009081526001602052604081209190915554611cdb90826116f3565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611c6d565b60006109a1600160701b6001600160701b038416612196565b6000611c8a6001600160701b038316846121c8565b600082611d568382612166565b91508110156109a15760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610482565b6001600160a01b0381168114611db357600080fd5b50565b600080600080600060808688031215611dce57600080fd5b85359450602086013593506040860135611de781611d9e565b9250606086013567ffffffffffffffff80821115611e0457600080fd5b818801915088601f830112611e1857600080fd5b813581811115611e2757600080fd5b896020828501011115611e3957600080fd5b9699959850939650602001949392505050565b60005b83811015611e67578181015183820152602001611e4f565b50506000910152565b6020815260008251806020840152611e8f816040850160208701611e4c565b601f01601f19169190910160400192915050565b60008060408385031215611eb657600080fd5b8235611ec181611d9e565b946020939093013593505050565b600080600060608486031215611ee457600080fd5b8335611eef81611d9e565b92506020840135611eff81611d9e565b929592945050506040919091013590565b60008060408385031215611f2357600080fd5b8235611f2e81611d9e565b91506020830135611f3e81611d9e565b809150509250929050565b600060208284031215611f5b57600080fd5b8135611c8a81611d9e565b600080600080600080600060e0888a031215611f8157600080fd5b8735611f8c81611d9e565b96506020880135611f9c81611d9e565b95506040880135945060608801359350608088013560ff81168114611fc057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825260119082015270155b9a5cddd85c158c8e881313d0d2d151607a1b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561206657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109a1576109a161206d565b634e487b7160e01b600052601260045260246000fd5b6000826120bb576120bb612096565b500490565b6000600182016120d2576120d261206d565b5060010190565b600082516120eb818460208701611e4c565b9190910192915050565b60006020828403121561210757600080fd5b81518015158114611c8a57600080fd5b80820281158282048414176109a1576109a161206d565b60008261213d5761213d612096565b500690565b63ffffffff82811682821603908082111561215f5761215f61206d565b5092915050565b808201808211156109a1576109a161206d565b60006020828403121561218b57600080fd5b8151611c8a81611d9e565b6001600160e01b038281168282168181028316929181158285048214176121bf576121bf61206d565b50505092915050565b60006001600160e01b03838116806121e2576121e2612096565b9216919091049291505056fea2646970667358221220bbc60172fc2521c31caec32f38fac9445acb0753cd7e608c826d98a8ef3ff7cc64736f6c63430008150033a2646970667358221220bfdf406d35e3e01442d949eec294c392a8eb8fe2087b3d0ee39240872706b87d64736f6c6343000815003360806040523480156200001157600080fd5b506040518060400160405280600b81526020016a57726170706564204e524b60a81b81525060405180604001604052806004815260200163574e524b60e01b815250816003908162000064919062000121565b50600462000073828262000121565b505050620001ed565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a757607f821691505b602082108103620000c857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011c57600081815260208120601f850160051c81016020861015620000f75750805b601f850160051c820191505b81811015620001185782815560010162000103565b5050505b505050565b81516001600160401b038111156200013d576200013d6200007c565b62000155816200014e845462000092565b84620000ce565b602080601f8311600181146200018d5760008415620001745750858301515b600019600386901b1c1916600185901b17855562000118565b600085815260208120601f198616915b82811015620001be578886015182559484019460019091019084016200019d565b5085821015620001dd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610bee80620001fd6000396000f3fe6080604052600436106100c65760003560e01c8063395093511161007f578063a457c2d711610059578063a457c2d71461021e578063a9059cbb1461023e578063d0e30db0146100d5578063dd62ed3e1461025e576100d5565b806339509351146101b357806370a08231146101d357806395d89b4114610209576100d5565b806306fdde03146100dd578063095ea7b31461010857806318160ddd1461013857806323b872dd146101575780632e1a7d4d14610177578063313ce56714610197576100d5565b366100d5576100d361027e565b005b6100d361027e565b3480156100e957600080fd5b506100f261028a565b6040516100ff9190610a1f565b60405180910390f35b34801561011457600080fd5b50610128610123366004610a89565b61031c565b60405190151581526020016100ff565b34801561014457600080fd5b506002545b6040519081526020016100ff565b34801561016357600080fd5b50610128610172366004610ab3565b610336565b34801561018357600080fd5b506100d3610192366004610aef565b61035a565b3480156101a357600080fd5b50604051601281526020016100ff565b3480156101bf57600080fd5b506101286101ce366004610a89565b610407565b3480156101df57600080fd5b506101496101ee366004610b08565b6001600160a01b031660009081526020819052604090205490565b34801561021557600080fd5b506100f2610429565b34801561022a57600080fd5b50610128610239366004610a89565b610438565b34801561024a57600080fd5b50610128610259366004610a89565b6104b3565b34801561026a57600080fd5b50610149610279366004610b2a565b6104c1565b61028833346104ec565b565b60606003805461029990610b5d565b80601f01602080910402602001604051908101604052809291908181526020018280546102c590610b5d565b80156103125780601f106102e757610100808354040283529160200191610312565b820191906000526020600020905b8154815290600101906020018083116102f557829003601f168201915b5050505050905090565b60003361032a8185856105ab565b60019150505b92915050565b6000336103448582856106cf565b61034f858585610749565b506001949350505050565b3361036581836108ed565b6000816001600160a01b03168360405160006040518083038185875af1925050503d80600081146103b2576040519150601f19603f3d011682016040523d82523d6000602084013e6103b7565b606091505b50509050806104025760405162461bcd60e51b81526020600482015260126024820152716661696c656420746f2073656e64204e524b60701b60448201526064015b60405180910390fd5b505050565b60003361032a81858561041a83836104c1565b6104249190610b97565b6105ab565b60606004805461029990610b5d565b6000338161044682866104c1565b9050838110156104a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103f9565b61034f82868684036105ab565b60003361032a818585610749565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0382166105425760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103f9565b80600260008282546105549190610b97565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b03831661060d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103f9565b6001600160a01b03821661066e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103f9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006106db84846104c1565b9050600019811461074357818110156107365760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103f9565b61074384848484036105ab565b50505050565b6001600160a01b0383166107ad5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103f9565b6001600160a01b03821661080f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103f9565b6001600160a01b038316600090815260208190526040902054818110156108875760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103f9565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610743565b6001600160a01b03821661094d5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103f9565b6001600160a01b038216600090815260208190526040902054818110156109c15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103f9565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600060208083528351808285015260005b81811015610a4c57858101830151858201604001528201610a30565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a8457600080fd5b919050565b60008060408385031215610a9c57600080fd5b610aa583610a6d565b946020939093013593505050565b600080600060608486031215610ac857600080fd5b610ad184610a6d565b9250610adf60208501610a6d565b9150604084013590509250925092565b600060208284031215610b0157600080fd5b5035919050565b600060208284031215610b1a57600080fd5b610b2382610a6d565b9392505050565b60008060408385031215610b3d57600080fd5b610b4683610a6d565b9150610b5460208401610a6d565b90509250929050565b600181811c90821680610b7157607f821691505b602082108103610b9157634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561033057634e487b7160e01b600052601160045260246000fdfea264697066735822122046b2bc867c4d2a78e90d9f25b7f3959cd6fb5eee533407c011afbe035110cf1b64736f6c6343000815003360c06040523480156200001157600080fd5b506040516200436938038062004369833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a051614136620002336000396000818161015f0152818161036d01528181610522015281816105710152818161062d0152818161085001528181610b8901528181610cc401528181611014015281816110f7015281816111a20152818161123501528181611353015281816113e101528181611629015281816116e101528181611772015281816117ef0152818161186301528181611caa01528181611e9b01528181611ef101528181611f2501528181611fba015281816120f301528181612205015261229301526000818161042c015281816106a90152818161077b015281816109360152818161096f01528181610a6601528181610c0501528181610ca201528181610dd9015281816112b0015281816114130152818161155e0152818161189501528181611ab401528181611c5801528181611c8801528181611db101528181611ecf0152818161216e015281816122c501528181612b9001528181612be001528181612eab01528181613013015281816133c30152818161346501526134dc01526141366000f3fe60806040526004361061014f5760003560e01c80638803dbee116100b6578063c45a01551161006f578063c45a01551461041a578063d06ca61f1461044e578063ded9382a1461046e578063e8e337001461048e578063f305d719146104c9578063fb3bdb41146104dc57600080fd5b80638803dbee1461033b578063ad5c46481461035b578063ad615dec146103a7578063af2979eb146103c7578063b6f9de95146103e7578063baa2abde146103fa57600080fd5b80634a25d94a116101085780634a25d94a146102885780635b0d5984146102a85780635c11d795146102c8578063791ac947146102e85780637ff36ab51461030857806385f8c2591461031b57600080fd5b806302751cec14610193578063054d50d4146101cd57806318cbafe5146101fb5780631f00ca74146102285780632195995c1461024857806338ed17391461026857600080fd5b3661018e57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461018c5761018c61373f565b005b600080fd5b34801561019f57600080fd5b506101b36101ae36600461377d565b6104ef565b604080519283526020830191909152015b60405180910390f35b3480156101d957600080fd5b506101ed6101e83660046137db565b6105eb565b6040519081526020016101c4565b34801561020757600080fd5b5061021b61021636600461384c565b610600565b6040516101c491906138bf565b34801561023457600080fd5b5061021b610243366004613919565b61092f565b34801561025457600080fd5b506101b3610263366004613a09565b610965565b34801561027457600080fd5b5061021b61028336600461384c565b610a3e565b34801561029457600080fd5b5061021b6102a336600461384c565b610b5c565b3480156102b457600080fd5b506101ed6102c3366004613ab3565b610c9a565b3480156102d457600080fd5b5061018c6102e336600461384c565b610d87565b3480156102f457600080fd5b5061018c61030336600461384c565b610fe9565b61021b610316366004613b49565b611210565b34801561032757600080fd5b506101ed6103363660046137db565b611529565b34801561034757600080fd5b5061021b61035636600461384c565b611536565b34801561036757600080fd5b5061038f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101c4565b3480156103b357600080fd5b506101ed6103c23660046137db565b6115f3565b3480156103d357600080fd5b506101ed6103e236600461377d565b611600565b61018c6103f5366004613b49565b61174f565b34801561040657600080fd5b506101b3610415366004613bb0565b611a89565b34801561042657600080fd5b5061038f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045a57600080fd5b5061021b610469366004613919565b611c51565b34801561047a57600080fd5b506101b3610489366004613ab3565b611c7e565b34801561049a57600080fd5b506104ae6104a9366004613c22565b611d71565b604080519384526020840192909252908201526060016101c4565b6104ae6104d736600461377d565b611e6f565b61021b6104ea366004613b49565b6120ce565b600080824281101561051c5760405162461bcd60e51b815260040161051390613c9e565b60405180910390fd5b61054b897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611a89565b909350915061055b89868561241d565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156105bd57600080fd5b505af11580156105d1573d6000803e3d6000fd5b505050506105df858361254e565b50965096945050505050565b60006105f884848461262d565b949350505050565b606081428110156106235760405162461bcd60e51b815260040161051390613c9e565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868661065a600182613ceb565b81811061066957610669613cfe565b905060200201602081019061067e9190613d14565b6001600160a01b0316146106a45760405162461bcd60e51b815260040161051390613d38565b6107027f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061270b92505050565b91508682600184516107149190613ceb565b8151811061072457610724613cfe565b6020026020010151101561074a5760405162461bcd60e51b815260040161051390613d6f565b61080f8686600081811061076057610760613cfe565b90506020020160208101906107759190613d14565b336107ef7f00000000000000000000000000000000000000000000000000000000000000008a8a60008181106107ad576107ad613cfe565b90506020020160208101906107c29190613d14565b8b8b60018181106107d5576107d5613cfe565b90506020020160208101906107ea9190613d14565b612896565b8560008151811061080257610802613cfe565b602002602001015161296f565b61084e82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250612aad915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161088c9190613ceb565b8151811061089c5761089c613cfe565b60200260200101516040518263ffffffff1660e01b81526004016108c291815260200190565b600060405180830381600087803b1580156108dc57600080fd5b505af11580156108f0573d6000803e3d6000fd5b505050506109248483600185516109079190613ceb565b8151811061091757610917613cfe565b602002602001015161254e565b509695505050505050565b606061095c7f00000000000000000000000000000000000000000000000000000000000000008484612cb5565b90505b92915050565b60008060006109957f00000000000000000000000000000000000000000000000000000000000000008f8f612896565b90506000876109a4578c6109a8565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf906109e3903390309086908f908e908e908e90600401613dba565b600060405180830381600087803b1580156109fd57600080fd5b505af1158015610a11573d6000803e3d6000fd5b50505050610a248f8f8f8f8f8f8f611a89565b809450819550505050509b509b9950505050505050505050565b60608142811015610a615760405162461bcd60e51b815260040161051390613c9e565b610abf7f00000000000000000000000000000000000000000000000000000000000000008988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061270b92505050565b9150868260018451610ad19190613ceb565b81518110610ae157610ae1613cfe565b60200260200101511015610b075760405162461bcd60e51b815260040161051390613d6f565b610b1d8686600081811061076057610760613cfe565b61092482878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612aad915050565b60608142811015610b7f5760405162461bcd60e51b815260040161051390613c9e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610bb6600182613ceb565b818110610bc557610bc5613cfe565b9050602002016020810190610bda9190613d14565b6001600160a01b031614610c005760405162461bcd60e51b815260040161051390613d38565b610c5e7f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612cb592505050565b91508682600081518110610c7457610c74613cfe565b6020026020010151111561074a5760405162461bcd60e51b815260040161051390613dfb565b600080610ce87f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000612896565b9050600086610cf7578b610cfb565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90610d36903390309086908e908d908d908d90600401613dba565b600060405180830381600087803b158015610d5057600080fd5b505af1158015610d64573d6000803e3d6000fd5b50505050610d768d8d8d8d8d8d611600565b9d9c50505050505050505050505050565b8042811015610da85760405162461bcd60e51b815260040161051390613c9e565b610e3985856000818110610dbe57610dbe613cfe565b9050602002016020810190610dd39190613d14565b33610e337f000000000000000000000000000000000000000000000000000000000000000089896000818110610e0b57610e0b613cfe565b9050602002016020810190610e209190613d14565b8a8a60018181106107d5576107d5613cfe565b8a61296f565b60008585610e48600182613ceb565b818110610e5757610e57613cfe565b9050602002016020810190610e6c9190613d14565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed89190613e42565b9050610f18868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250612e36915050565b86610fc1828888610f2a600182613ceb565b818110610f3957610f39613cfe565b9050602002016020810190610f4e9190613d14565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a08231906024015b602060405180830381865afa158015610f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbb9190613e42565b906130cf565b1015610fdf5760405162461bcd60e51b815260040161051390613d6f565b5050505050505050565b804281101561100a5760405162461bcd60e51b815260040161051390613c9e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585611041600182613ceb565b81811061105057611050613cfe565b90506020020160208101906110659190613d14565b6001600160a01b03161461108b5760405162461bcd60e51b815260040161051390613d38565b6110a185856000818110610dbe57610dbe613cfe565b6110df858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250612e36915050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116a9190613e42565b90508681101561118c5760405162461bcd60e51b815260040161051390613d6f565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156111ee57600080fd5b505af1158015611202573d6000803e3d6000fd5b50505050610fdf848261254e565b606081428110156112335760405162461bcd60e51b815260040161051390613c9e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061127057611270613cfe565b90506020020160208101906112859190613d14565b6001600160a01b0316146112ab5760405162461bcd60e51b815260040161051390613d38565b6113097f00000000000000000000000000000000000000000000000000000000000000003488888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061270b92505050565b915086826001845161131b9190613ceb565b8151811061132b5761132b613cfe565b602002602001015110156113515760405162461bcd60e51b815260040161051390613d6f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061139357611393613cfe565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6114457f000000000000000000000000000000000000000000000000000000000000000089896000818110610e0b57610e0b613cfe565b8460008151811061145857611458613cfe565b60200260200101516040518363ffffffff1660e01b81526004016114919291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156114b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d49190613e5b565b6114e0576114e061373f565b61151f82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612aad915050565b5095945050505050565b60006105f8848484613125565b606081428110156115595760405162461bcd60e51b815260040161051390613c9e565b6115b77f000000000000000000000000000000000000000000000000000000000000000089888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612cb592505050565b915086826000815181106115cd576115cd613cfe565b60200260200101511115610b075760405162461bcd60e51b815260040161051390613dfb565b60006105f88484846131fe565b600081428110156116235760405162461bcd60e51b815260040161051390613c9e565b611652887f00000000000000000000000000000000000000000000000000000000000000008989893089611a89565b6040516370a0823160e01b81523060048201529093506116cb9150899086906001600160a01b038316906370a0823190602401602060405180830381865afa1580156116a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c69190613e42565b61241d565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561172d57600080fd5b505af1158015611741573d6000803e3d6000fd5b50505050610924848361254e565b80428110156117705760405162461bcd60e51b815260040161051390613c9e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858560008181106117ad576117ad613cfe565b90506020020160208101906117c29190613d14565b6001600160a01b0316146117e85760405162461bcd60e51b815260040161051390613d38565b60003490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561184857600080fd5b505af115801561185c573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6118c77f000000000000000000000000000000000000000000000000000000000000000089896000818110610e0b57610e0b613cfe565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119389190613e5b565b6119445761194461373f565b60008686611953600182613ceb565b81811061196257611962613cfe565b90506020020160208101906119779190613d14565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa1580156119bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e39190613e42565b9050611a23878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612e36915050565b87610fc1828989611a35600182613ceb565b818110611a4457611a44613cfe565b9050602002016020810190611a599190613d14565b6040516370a0823160e01b81526001600160a01b038a8116600483015291909116906370a0823190602401610f7a565b6000808242811015611aad5760405162461bcd60e51b815260040161051390613c9e565b6000611ada7f00000000000000000000000000000000000000000000000000000000000000008c8c612896565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303816000875af1158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190613e5b565b5060405163226bf2d160e21b81526001600160a01b03878116600483015260009182918416906389afcb449060240160408051808303816000875af1158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc59190613e78565b915091506000611bd58e8e61329e565b509050806001600160a01b03168e6001600160a01b031614611bf8578183611bfb565b82825b90975095508a871015611c205760405162461bcd60e51b815260040161051390613e9c565b89861015611c405760405162461bcd60e51b815260040161051390613ee2565b505050505097509795505050505050565b606061095c7f0000000000000000000000000000000000000000000000000000000000000000848461270b565b6000806000611cce7f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000612896565b9050600087611cdd578c611ce1565b6000195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611d1c903390309086908f908e908e908e90600401613dba565b600060405180830381600087803b158015611d3657600080fd5b505af1158015611d4a573d6000803e3d6000fd5b50505050611d5c8e8e8e8e8e8e6104ef565b909f909e509c50505050505050505050505050565b60008060008342811015611d975760405162461bcd60e51b815260040161051390613c9e565b611da58c8c8c8c8c8c613395565b90945092506000611dd77f00000000000000000000000000000000000000000000000000000000000000008e8e612896565b9050611de58d33838861296f565b611df18c33838761296f565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af1158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190613e42565b92505050985098509895505050505050565b60008060008342811015611e955760405162461bcd60e51b815260040161051390613c9e565b611ec38a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c613395565b90945092506000611f157f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000612896565b9050611f238b33838861296f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f7e57600080fd5b505af1158015611f92573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015612007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202b9190613e5b565b6120375761203761373f565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af115801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a39190613e42565b9250833411156120c0576120c0336120bb8634613ceb565b61254e565b505096509650969350505050565b606081428110156120f15760405162461bcd60e51b815260040161051390613c9e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061212e5761212e613cfe565b90506020020160208101906121439190613d14565b6001600160a01b0316146121695760405162461bcd60e51b815260040161051390613d38565b6121c77f000000000000000000000000000000000000000000000000000000000000000088888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612cb592505050565b915034826000815181106121dd576121dd613cfe565b602002602001015111156122035760405162461bcd60e51b815260040161051390613dfb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db08360008151811061224557612245613cfe565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561227857600080fd5b505af115801561228c573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6122f77f000000000000000000000000000000000000000000000000000000000000000089896000818110610e0b57610e0b613cfe565b8460008151811061230a5761230a613cfe565b60200260200101516040518363ffffffff1660e01b81526004016123439291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015612362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123869190613e5b565b6123925761239261373f565b6123d182878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612aad915050565b816000815181106123e4576123e4613cfe565b602002602001015134111561151f5761151f338360008151811061240a5761240a613cfe565b6020026020010151346120bb9190613ceb565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916124799190613f4c565b6000604051808303816000865af19150503d80600081146124b6576040519150601f19603f3d011682016040523d82523d6000602084013e6124bb565b606091505b50915091508180156124e55750805115806124e55750808060200190518101906124e59190613e5b565b6125475760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610513565b5050505050565b604080516000808252602082019092526001600160a01b0384169083906040516125789190613f4c565b60006040518083038185875af1925050503d80600081146125b5576040519150601f19603f3d011682016040523d82523d6000602084013e6125ba565b606091505b50509050806126285760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610513565b505050565b60008084116126925760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b6064820152608401610513565b6000831180156126a25750600082115b6126be5760405162461bcd60e51b815260040161051390613f68565b60006126cc856103e56135b9565b905060006126da82856135b9565b905060006126f4836126ee886103e86135b9565b90613620565b90506127008183613fb0565b979650505050505050565b606060028251101561275f5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152606401610513565b815167ffffffffffffffff81111561277957612779613903565b6040519080825280602002602001820160405280156127a2578160200160208202803683370190505b50905082816000815181106127b9576127b9613cfe565b60200260200101818152505060005b600183516127d69190613ceb565b81101561288e57600080612829878685815181106127f6576127f6613cfe565b60200260200101518786600161280c9190613fd2565b8151811061281c5761281c613cfe565b6020026020010151613675565b9150915061285184848151811061284257612842613cfe565b6020026020010151838361262d565b8461285d856001613fd2565b8151811061286d5761286d613cfe565b6020026020010181815250505050808061288690613fe5565b9150506127c8565b509392505050565b60008060006128a5858561329e565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152919350915086906048016040516020818303038152906040528051906020012060405160200161294d9291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916129d39190613f4c565b6000604051808303816000865af19150503d8060008114612a10576040519150601f19603f3d011682016040523d82523d6000602084013e612a15565b606091505b5091509150818015612a3f575080511580612a3f575080806020019051810190612a3f9190613e5b565b612aa55760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610513565b505050505050565b60005b60018351612abe9190613ceb565b811015612caf57600080848381518110612ada57612ada613cfe565b602002602001015185846001612af09190613fd2565b81518110612b0057612b00613cfe565b6020026020010151915091506000612b18838361329e565b509050600087612b29866001613fd2565b81518110612b3957612b39613cfe565b60200260200101519050600080836001600160a01b0316866001600160a01b031614612b6757826000612b6b565b6000835b91509150600060028a51612b7f9190613ceb565b8810612b8b5788612bd9565b612bd97f0000000000000000000000000000000000000000000000000000000000000000878c612bbc8c6002613fd2565b81518110612bcc57612bcc613cfe565b6020026020010151612896565b9050612c067f00000000000000000000000000000000000000000000000000000000000000008888612896565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612c43576020820181803683370190505b506040518563ffffffff1660e01b8152600401612c639493929190613ffe565b600060405180830381600087803b158015612c7d57600080fd5b505af1158015612c91573d6000803e3d6000fd5b50505050505050505050508080612ca790613fe5565b915050612ab0565b50505050565b6060600282511015612d095760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152606401610513565b815167ffffffffffffffff811115612d2357612d23613903565b604051908082528060200260200182016040528015612d4c578160200160208202803683370190505b509050828160018351612d5f9190613ceb565b81518110612d6f57612d6f613cfe565b602002602001018181525050600060018351612d8b9190613ceb565b90505b801561288e57600080612dd18786612da7600187613ceb565b81518110612db757612db7613cfe565b602002602001015187868151811061281c5761281c613cfe565b91509150612df9848481518110612dea57612dea613cfe565b60200260200101518383613125565b84612e05600186613ceb565b81518110612e1557612e15613cfe565b60200260200101818152505050508080612e2e9061404e565b915050612d8e565b60005b60018351612e479190613ceb565b81101561262857600080848381518110612e6357612e63613cfe565b602002602001015185846001612e799190613fd2565b81518110612e8957612e89613cfe565b6020026020010151915091506000612ea1838361329e565b5090506000612ed17f00000000000000000000000000000000000000000000000000000000000000008585612896565b9050600080600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3b919061407c565b506001600160701b031691506001600160701b03169150600080876001600160a01b03168a6001600160a01b031614612f75578284612f78565b83835b6040516370a0823160e01b81526001600160a01b038a81166004830152929450909250612fb3918491908d16906370a0823190602401610f7a565b9550612fc086838361262d565b945050505050600080856001600160a01b0316886001600160a01b031614612fea57826000612fee565b6000835b91509150600060028c516130029190613ceb565b8a1061300e578a61303f565b61303f7f0000000000000000000000000000000000000000000000000000000000000000898e612bbc8e6002613fd2565b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f906130819086908690869060248101613ffe565b600060405180830381600087803b15801561309b57600080fd5b505af11580156130af573d6000803e3d6000fd5b5050505050505050505050505080806130c790613fe5565b915050612e39565b6000826130dc8382613ceb565b915081111561095f5760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610513565b600080841161318b5760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b6064820152608401610513565b60008311801561319b5750600082115b6131b75760405162461bcd60e51b815260040161051390613f68565b60006131cf6103e86131c986886135b9565b906135b9565b905060006131e36103e56131c986896130cf565b90506131f460016126ee8385613fb0565b9695505050505050565b600080841161325d5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416044820152641353d5539560da1b6064820152608401610513565b60008311801561326d5750600082115b6132895760405162461bcd60e51b815260040161051390613f68565b8261329485846135b9565b6105f89190613fb0565b600080826001600160a01b0316846001600160a01b0316036133105760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608401610513565b826001600160a01b0316846001600160a01b031610613330578284613333565b83835b90925090506001600160a01b03821661338e5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401610513565b9250929050565b60405163e6a4390560e01b81526001600160a01b0387811660048301528681166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa15801561340c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343091906140cc565b6001600160a01b0316036134d4576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303816000875af11580156134ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d291906140cc565b505b6000806135027f00000000000000000000000000000000000000000000000000000000000000008b8b613675565b91509150816000148015613514575080155b15613524578793508692506135ac565b60006135318984846131fe565b9050878111613565578581101561355a5760405162461bcd60e51b815260040161051390613ee2565b8894509250826135aa565b60006135728984866131fe565b9050898111156135845761358461373f565b878110156135a45760405162461bcd60e51b815260040161051390613e9c565b94508793505b505b5050965096945050505050565b60008115806135dd575082826135cf81836140e9565b92506135db9083613fb0565b145b61095f5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610513565b60008261362d8382613fd2565b915081101561095f5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610513565b6000806000613684858561329e565b509050600080613695888888612896565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156136d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f6919061407c565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461372d578082613730565b81815b90999098509650505050505050565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b038116811461376a57600080fd5b50565b803561377881613755565b919050565b60008060008060008060c0878903121561379657600080fd5b86356137a181613755565b955060208701359450604087013593506060870135925060808701356137c681613755565b8092505060a087013590509295509295509295565b6000806000606084860312156137f057600080fd5b505081359360208301359350604090920135919050565b60008083601f84011261381957600080fd5b50813567ffffffffffffffff81111561383157600080fd5b6020830191508360208260051b850101111561338e57600080fd5b60008060008060008060a0878903121561386557600080fd5b8635955060208701359450604087013567ffffffffffffffff81111561388a57600080fd5b61389689828a01613807565b90955093505060608701356138aa81613755565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156138f7578351835292840192918401916001016138db565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561392c57600080fd5b8235915060208084013567ffffffffffffffff8082111561394c57600080fd5b818601915086601f83011261396057600080fd5b81358181111561397257613972613903565b8060051b604051601f19603f8301168101818110858211171561399757613997613903565b6040529182528482019250838101850191898311156139b557600080fd5b938501935b828510156139da576139cb8561376d565b845293850193928501926139ba565b8096505050505050509250929050565b801515811461376a57600080fd5b803560ff8116811461377857600080fd5b60008060008060008060008060008060006101608c8e031215613a2b57600080fd5b8b35613a3681613755565b9a5060208c0135613a4681613755565b995060408c0135985060608c0135975060808c0135965060a08c0135613a6b81613755565b955060c08c0135945060e08c0135613a82816139ea565b9350613a916101008d016139f8565b92506101208c013591506101408c013590509295989b509295989b9093969950565b6000806000806000806000806000806101408b8d031215613ad357600080fd5b8a35613ade81613755565b995060208b0135985060408b0135975060608b0135965060808b0135613b0381613755565b955060a08b0135945060c08b0135613b1a816139ea565b9350613b2860e08c016139f8565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060808688031215613b6157600080fd5b85359450602086013567ffffffffffffffff811115613b7f57600080fd5b613b8b88828901613807565b9095509350506040860135613b9f81613755565b949793965091946060013592915050565b600080600080600080600060e0888a031215613bcb57600080fd5b8735613bd681613755565b96506020880135613be681613755565b955060408801359450606088013593506080880135925060a0880135613c0b81613755565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215613c3f57600080fd5b8835613c4a81613755565b97506020890135613c5a81613755565b965060408901359550606089013594506080890135935060a0890135925060c0890135613c8681613755565b8092505060e089013590509295985092959890939650565b60208082526018908201527f556e69737761705632526f757465723a20455850495245440000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561095f5761095f613cd5565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613d2657600080fd5b8135613d3181613755565b9392505050565b6020808252601d908201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604082015260600190565b6020808252602b908201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560408201526a1514155517d05353d5539560aa1b606082015260800190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60208082526027908201527f556e69737761705632526f757465723a204558434553534956455f494e50555460408201526617d05353d5539560ca1b606082015260800190565b600060208284031215613e5457600080fd5b5051919050565b600060208284031215613e6d57600080fd5b8151613d31816139ea565b60008060408385031215613e8b57600080fd5b505080516020909101519092909150565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604082015265105353d5539560d21b606082015260800190565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604082015265105353d5539560d21b606082015260800190565b60005b83811015613f43578181015183820152602001613f2b565b50506000910152565b60008251613f5e818460208701613f28565b9190910192915050565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b600082613fcd57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561095f5761095f613cd5565b600060018201613ff757613ff7613cd5565b5060010190565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526140378160a0850160208701613f28565b601f01601f19169190910160a00195945050505050565b60008161405d5761405d613cd5565b506000190190565b80516001600160701b038116811461377857600080fd5b60008060006060848603121561409157600080fd5b61409a84614065565b92506140a860208501614065565b9150604084015163ffffffff811681146140c157600080fd5b809150509250925092565b6000602082840312156140de57600080fd5b8151613d3181613755565b808202811582820484141761095f5761095f613cd556fea26469706673582212202af6b73353912f85611f637e48263c06b9a1387af8c39092e3320f81a192c51464736f6c6343000815003368747470733a2f2f6d61696e6e65742e696e667572612e696f2f76332f623937393461643164646638346466623863333464366262356463613230303168747470733a2f2f7365706f6c69612e696e667572612e696f2f76332f62393739346164316464663834646662386333346436626235646361323030310000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d68747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f7270632e616e6b722e636f6d2f6273635f746573746e65745f63686170656c68747470733a2f2f7270632d6d756d6261692e6d61746963766967696c2e636f6d885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d68747470733a2f2f676f65726c692d726f6c6c75702e617262697472756d2e696f2f72706368747470733a2f2f6170692e617661782d746573742e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6273632d6461746173656564312e62696e616e63652e6f726768747470733a2f2f676f65726c692e696e667572612e696f2f76332f6239373934616431646466383464666238633334643662623564636132303031a26469706673582212205706dc62ae51c1fed81fffa7253742b8b711fc0a63370baa2d36a7e91634a13f64736f6c63430008150033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x6A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6609BBE EQ PUSH3 0x6F JUMPI DUP1 PUSH4 0x32E21AE7 EQ PUSH3 0x9F JUMPI DUP1 PUSH4 0xC0406226 EQ PUSH3 0xB8 JUMPI DUP1 PUSH4 0xD2007265 EQ PUSH3 0xC4 JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH3 0xC2 JUMPI DUP1 PUSH4 0xF8CCBF47 EQ PUSH3 0xDD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x86 PUSH3 0x80 CALLDATASIZE PUSH1 0x4 PUSH3 0x25CA JUMP JUMPDEST PUSH3 0xFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x96 SWAP3 SWAP2 SWAP1 PUSH3 0x2638 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xA9 PUSH3 0x1CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x96 SWAP2 SWAP1 PUSH3 0x2664 JUMP JUMPDEST PUSH3 0xC2 PUSH3 0x206 JUMP JUMPDEST STOP JUMPDEST PUSH3 0xCE PUSH3 0x8E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x96 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH3 0xEB SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x96 JUMP JUMPDEST PUSH1 0xF DUP2 DUP2 SLOAD DUP2 LT PUSH3 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH3 0x132 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x160 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0x1B1 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x185 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x1B1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x193 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 JUMP JUMPDEST PUSH3 0x1F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH3 0x201 CHAINID PUSH3 0xAAD JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC1978D1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x41444D494E5F505249564154455F4B4559 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xC1978D1F SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x276 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x29C SWAP2 SWAP1 PUSH3 0x2726 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC1978D1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x4F574E45525F41444452455353 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xC1978D1F SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x30B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x331 SWAP2 SWAP1 PUSH3 0x2726 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5E79B7 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xFFA18649 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x386 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x3AC SWAP2 SWAP1 PUSH3 0x2740 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x0 SUB PUSH3 0x48E JUMPI PUSH1 0x40 MLOAD PUSH4 0xFD535CE1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x8E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E277420686176652061206465706C6F796572206163636F756E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x742E204D616B65207375726520796F75206861766520736574204445504C4F59 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x45525F505249564154455F4B455920696E202E656E76206F7220757365206079 PUSH1 0x84 DUP3 ADD MSTORE PUSH32 0x61726E2067656E65726174656020746F2067656E65726174652061206E657720 PUSH1 0xA4 DUP3 ADD MSTORE PUSH14 0x1C985B991BDB481858D8DBDD5B9D PUSH1 0x92 SHL PUSH1 0xC4 DUP3 ADD MSTORE PUSH1 0xE4 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH3 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3649397D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCE817D47 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xCE817D47 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x50E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0x5E79B7 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x0 SWAP3 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 POP PUSH4 0xFFA18649 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x564 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x58A SWAP2 SWAP1 PUSH3 0x2740 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x40 MLOAD PUSH3 0x59B SWAP1 PUSH3 0x254C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x5C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x14 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0x5F7 SWAP1 PUSH3 0x255A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x614 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x16 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD SWAP3 AND SWAP2 PUSH3 0x648 SWAP1 PUSH3 0x2568 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x67C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x15 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2B65311F PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH3 0x73E SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x56CA623E SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x6ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x717 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x729 SWAP2 SWAP1 PUSH3 0x28B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH3 0xECC JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2B65311F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH3 0x7D7 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x56CA623E SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x79B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x7C5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x729 SWAP2 SWAP1 PUSH3 0x28FC JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2B65311F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH3 0x870 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x56CA623E SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x834 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x85E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x729 SWAP2 SWAP1 PUSH3 0x2943 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x76EADD36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x8BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x8D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH3 0x8E1 PUSH3 0xF16 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 CHAINID SWAP1 POP PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA85A8418 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x941 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x96B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x298A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH3 0xA91 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x98680034 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x9B0 JUMPI PUSH3 0x9B0 PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x2 DUP2 LT PUSH3 0x9CD JUMPI PUSH3 0x9CD PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x9F0 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0xA2E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0xA2B SWAP2 DUP2 ADD SWAP1 PUSH3 0x2726 JUMP JUMPDEST PUSH1 0x1 JUMPDEST ISZERO PUSH3 0xA7C JUMPI POP DUP3 CHAINID SUB PUSH3 0xA7C JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH3 0xA52 JUMPI PUSH3 0xA52 PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x2 DUP2 LT PUSH3 0xA6F JUMPI PUSH3 0xA6F PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST DUP1 PUSH3 0xA88 DUP2 PUSH3 0x2AE5 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x970 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x57F3FA7 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH3 0xAD9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH3 0xB46 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537464436861696E7320676574436861696E2875696E74323536293A20436861 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x34B71024A21031B0B73737BA103132901817 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x485 JUMP JUMPDEST PUSH3 0xB50 PUSH3 0x138F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH3 0xB6B SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xB99 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0xBEA JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xBBE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xBEA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xBCC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x40 MLOAD PUSH3 0xC03 SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH3 0xC2E SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xC5C SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0xCAD JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xC81 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xCAD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xC8F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH3 0xCD2 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xD00 SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0xD51 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xD25 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xD51 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xD33 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH3 0xD6C SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0xD9A SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0xDEB JUMPI DUP1 PUSH1 0x1F LT PUSH3 0xDBF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0xDEB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0xDCD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP POP PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x348051D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP4 POP ISZERO ISZERO SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x6900A3AE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xE4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0xE76 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0xE88 SWAP2 SWAP1 PUSH3 0x2B1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH3 0xEB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x485 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST POP PUSH3 0xEC5 DUP2 DUP4 PUSH3 0x1CDE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH3 0xF13 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0xEE3 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x104C13EB PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH3 0x1FE3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD930A0E6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xF67 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0xF91 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0xD SWAP1 PUSH3 0xFA0 SWAP1 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0xD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0xFB5 SWAP2 SWAP1 PUSH3 0x2D2A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0xE SWAP1 DUP2 PUSH3 0xFD4 SWAP2 SWAP1 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x348051D7 PUSH1 0xE1 SHL DUP2 MSTORE CHAINID PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x6900A3AE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1023 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x104D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST SWAP1 POP PUSH1 0xE DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1064 SWAP2 SWAP1 PUSH3 0x2D55 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x1084 SWAP3 SWAP2 PUSH1 0x20 ADD PUSH3 0x2D80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0xE SWAP1 DUP2 PUSH3 0x10A3 SWAP2 SWAP1 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0xF SLOAD PUSH1 0x60 SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1219 JUMPI PUSH1 0xF DUP1 SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH4 0x88DA6D35 SWAP2 DUP7 SWAP2 DUP5 SWAP2 PUSH4 0x56CA623E SWAP2 SWAP1 DUP8 SWAP1 DUP2 LT PUSH3 0x10EF JUMPI PUSH3 0x10EF PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1148 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1172 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0xF DUP6 DUP2 SLOAD DUP2 LT PUSH3 0x1188 JUMPI PUSH3 0x1188 PUSH3 0x2AB9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 ADD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x11B9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x2E2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0x11D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1203 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST POP DUP1 PUSH3 0x1210 DUP2 PUSH3 0x2AE5 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x10AD JUMP JUMPDEST POP PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x32E21AE7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x1280 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x127D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x2E77 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x1297 JUMPI PUSH3 0x128F PUSH3 0x8E7 JUMP JUMPDEST SWAP1 POP PUSH3 0x129B JUMP JUMPDEST MLOAD SWAP1 POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x88DA6D35 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x88DA6D35 SWAP1 PUSH3 0x12D1 SWAP1 DUP7 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH3 0x2F44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0x12F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x131B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE23CD19F PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xE23CD19F SWAP1 PUSH3 0x1355 SWAP1 DUP7 SWAP1 PUSH1 0xE SWAP1 PUSH1 0x4 ADD PUSH3 0x2F93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1385 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x139D JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x5 DUP1 DUP3 MSTORE PUSH5 0x185B9D9A5B PUSH1 0xDA SHL PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD PUSH1 0xA0 DUP2 ADD DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 DUP4 MSTORE PUSH5 0x105B9D9A5B PUSH1 0xDA SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP2 DUP3 MSTORE PUSH2 0x7A69 DUP3 DUP3 ADD MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH21 0x687474703A2F2F3132372E302E302E313A38353435 PUSH1 0x58 SHL SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH3 0x142E SWAP2 PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x14AB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x1B585A5B9B995D PUSH1 0xCA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x13585A5B9B995D PUSH1 0xCA SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3D DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAC37 PUSH1 0x3D SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1526 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x676F65726C69 PUSH1 0xD0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x476F65726C69 PUSH1 0xD0 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3C DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xADCE PUSH1 0x3C SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x15A5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x7365706F6C6961 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x5365706F6C6961 PUSH1 0xC8 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAA36A7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3D DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAC74 PUSH1 0x3D SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1641 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x6F7074696D69736D PUSH1 0xC0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x4F7074696D69736D PUSH1 0xC0 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F6D61696E6E65742E6F7074696D69736D2E696F0000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x16EC PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x6F7074696D69736D5F676F65726C69 PUSH1 0x88 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x4F7074696D69736D20476F65726C69 PUSH1 0x88 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F676F65726C692E6F7074696D69736D2E696F000000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1791 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x617262697472756D5F6F6E65 PUSH1 0xA0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x417262697472756D204F6E65 PUSH1 0xA0 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4B1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F617262312E617262697472756D2E696F2F72706300000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1828 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH19 0x617262697472756D5F6F6E655F676F65726C69 PUSH1 0x68 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH19 0x417262697472756D204F6E6520476F65726C69 PUSH1 0x68 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x66EED DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAD5E PUSH1 0x25 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x18CF PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x617262697472756D5F6E6F7661 PUSH1 0x98 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x417262697472756D204E6F7661 PUSH1 0x98 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4BA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1C DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F6E6F76612E617262697472756D2E696F2F72706300000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1969 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x3837B63CB3B7B7 PUSH1 0xC9 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x2837B63CB3B7B7 PUSH1 0xC9 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x89 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F706F6C79676F6E2D7270632E636F6D000000000000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x19F6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x706F6C79676F6E5F6D756D626169 PUSH1 0x90 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x506F6C79676F6E204D756D626169 PUSH1 0x90 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x13881 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAD1D PUSH1 0x21 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1A78 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x6176616C616E636865 PUSH1 0xB8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x4176616C616E636865 PUSH1 0xB8 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA86A DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xACD1 PUSH1 0x25 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1B04 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x6176616C616E6368655F66756A69 PUSH1 0x90 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x4176616C616E6368652046756A69 PUSH1 0x90 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA869 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xAD83 PUSH1 0x2A SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1B91 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x3137312FB9B6B0B93A2FB1B430B4B7 PUSH1 0x89 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x2127211029B6B0B93A1021B430B4B7 PUSH1 0x89 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x38 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xADAD PUSH1 0x21 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1C3A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x626E625F736D6172745F636861696E5F746573746E6574000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x424E4220536D61727420436861696E20546573746E6574000000000000000000 DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x61 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xACF6 PUSH1 0x27 SWAP2 CODECOPY SWAP1 MSTORE PUSH3 0x2004 JUMP JUMPDEST PUSH3 0xAAB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x33B737B9B4B9AFB1B430B4B7 PUSH1 0xA1 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x23B737B9B4B99021B430B4B7 PUSH1 0xA1 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x64 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x68747470733A2F2F7270632E676E6F736973636861696E2E636F6D0000000000 DUP2 MSTORE POP DUP2 MSTORE POP PUSH3 0x2004 JUMP JUMPDEST PUSH3 0x1D0A PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD MLOAD MLOAD PUSH1 0x0 SUB PUSH3 0x1FDA JUMPI PUSH1 0x40 MLOAD PUSH4 0x975A6CE9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x975A6CE9 SWAP1 PUSH3 0x1D4C SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x1D8D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1D8A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x1FD4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH3 0x1DBE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1DC3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH3 0x1DD1 DUP6 PUSH3 0x2064 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1DE3 SWAP2 SWAP1 PUSH3 0x2FBC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x4 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH3 0x1EBA JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xAD3E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD145736C DUP3 PUSH1 0x2 DUP9 PUSH1 0x40 MLOAD PUSH3 0x1E36 SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD DUP2 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP3 MSTORE PUSH3 0x1E65 SWAP3 SWAP2 PUSH1 0x4 ADD PUSH3 0x2F93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0x1E85 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1EAF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH3 0x1F3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF877CB19 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0xF877CB19 SWAP1 PUSH3 0x1EEE SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1F0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x1F36 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1F51 SWAP2 SWAP1 PUSH3 0x2FEA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x1F70 SWAP2 PUSH1 0x24 ADD PUSH3 0x26D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xBC44503 PUSH1 0xE0 SHL OR DUP2 MSTORE DUP6 MLOAD SWAP2 DUP7 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD SWAP1 SWAP2 KECCAK256 SWAP2 SWAP3 POP EQ ISZERO DUP1 PUSH3 0x1FBD JUMPI POP PUSH1 0x60 DUP6 ADD MLOAD MLOAD ISZERO JUMPDEST ISZERO PUSH3 0x1FCB JUMPI DUP3 MLOAD DUP4 PUSH1 0x20 ADD REVERT JUMPDEST POP POP POP PUSH3 0x1FDA JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE JUMPDEST POP DUP1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH11 0x636F6E736F6C652E6C6F67 PUSH1 0x20 DUP4 ADD PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 GAS STATICCALL POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD SWAP1 POP DUP1 PUSH1 0x2 DUP5 PUSH1 0x40 MLOAD PUSH3 0x2020 SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 DUP2 PUSH3 0x203C SWAP2 SWAP1 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 DUP4 ADD MSTORE PUSH3 0x205B DUP4 DUP4 PUSH3 0x21A8 JUMP JUMPDEST PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x208A JUMPI PUSH3 0x208A PUSH3 0x276B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x20B5 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH3 0x21A0 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x20DC JUMPI PUSH3 0x20DC PUSH3 0x2AB9 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 POP PUSH1 0x61 PUSH1 0xF8 SHL DUP2 LT DUP1 ISZERO SWAP1 PUSH3 0x2110 JUMPI POP PUSH1 0x3D PUSH1 0xF9 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 AND GT ISZERO JUMPDEST ISZERO PUSH3 0x215C JUMPI PUSH3 0x2127 PUSH1 0x20 PUSH1 0xF8 DUP4 SWAP1 SHR PUSH3 0x3024 JUMP JUMPDEST PUSH1 0xF8 SHL DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x213F JUMPI PUSH3 0x213F PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH3 0x218A JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x2172 JUMPI PUSH3 0x2172 PUSH3 0x2AB9 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP JUMPDEST POP DUP1 PUSH3 0x2197 DUP2 PUSH3 0x2AE5 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x20BB JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SUB PUSH3 0x2237 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537464436861696E7320736574436861696E28737472696E672C436861696E44 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x617461293A20436861696E20616C6961732063616E6E6F742062652074686520 PUSH1 0x64 DUP3 ADD MSTORE PUSH13 0x32B6B83A3C9039BA3934B73397 PUSH1 0x99 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH3 0x485 JUMP JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH1 0x0 SUB PUSH3 0x22B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537464436861696E7320736574436861696E28737472696E672C436861696E44 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x617461293A20436861696E2049442063616E6E6F7420626520302E0000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x485 JUMP JUMPDEST PUSH3 0x22BD PUSH3 0x138F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH3 0x22DE SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x230C SWAP1 PUSH3 0x26EA JUMP JUMPDEST DUP1 ISZERO PUSH3 0x235D JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x2331 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x235D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x233F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH3 0x2382 JUMPI POP DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x348051D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0xACB1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH4 0x6900A3AE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x23D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH3 0x23FE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x287C JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x2412 SWAP3 SWAP2 SWAP1 PUSH3 0x3040 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH3 0x2442 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x485 SWAP2 SWAP1 PUSH3 0x26D5 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x40 MLOAD PUSH3 0x2457 SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH1 0x3 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH3 0x248C SWAP2 SWAP1 PUSH3 0x2576 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x40 ADD MLOAD DUP2 MSTORE POP PUSH1 0x1 DUP6 PUSH1 0x40 MLOAD PUSH3 0x24CB SWAP2 SWAP1 PUSH3 0x2B01 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 DUP2 MLOAD DUP2 SWAP1 PUSH3 0x24EA SWAP1 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SWAP1 PUSH3 0x250B SWAP1 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 DUP3 ADD SWAP1 PUSH3 0x2522 SWAP1 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP POP POP PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH3 0x2545 DUP6 DUP3 PUSH3 0x2BE2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2A01 DUP1 PUSH3 0x30E2 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0xDEB DUP1 PUSH3 0x5AE3 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x4369 DUP1 PUSH3 0x68CE DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH3 0x2584 SWAP1 PUSH3 0x26EA JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH3 0x2595 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH3 0xF13 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x25C6 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x25B0 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x25DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x2601 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x25E7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x2624 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH3 0x264D PUSH1 0x40 DUP4 ADD DUP6 PUSH3 0x260A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH1 0x80 PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x2682 PUSH1 0xA0 DUP5 ADD DUP3 PUSH3 0x260A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP1 DUP6 DUP5 SUB ADD PUSH1 0x60 DUP7 ADD MSTORE PUSH3 0x26AC DUP4 DUP4 PUSH3 0x260A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP6 DUP5 SUB ADD PUSH1 0x80 DUP7 ADD MSTORE POP PUSH3 0x26CC DUP3 DUP3 PUSH3 0x260A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0xEC5 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x260A JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x26FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2720 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2739 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xEC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x27A7 JUMPI PUSH3 0x27A7 PUSH3 0x276B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x27A7 JUMPI PUSH3 0x27A7 PUSH3 0x276B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x27FF JUMPI PUSH3 0x27FF PUSH3 0x276B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2836 JUMPI PUSH3 0x2836 PUSH3 0x276B JUMP JUMPDEST PUSH3 0x284B PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH3 0x27D3 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH3 0x2861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2874 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x288F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x28A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2874 DUP5 DUP3 DUP6 ADD PUSH3 0x2807 JUMP JUMPDEST PUSH32 0x666163746F727920636F6E7472616374206465706C6F7965642061743A200000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x28EF DUP2 PUSH1 0x1E DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1E ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x776E726B20636F6E7472616374206465706C6F7965642061743A200000000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x2936 DUP2 PUSH1 0x1B DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1B ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x726F7574657220636F6E7472616374206465706C6F7965642061743A20000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x297D DUP2 PUSH1 0x1D DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1D ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x299E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x29B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x29CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x29E1 JUMPI PUSH3 0x29E1 PUSH3 0x276B JUMP JUMPDEST PUSH3 0x29F1 DUP5 DUP3 PUSH1 0x5 SHL ADD PUSH3 0x27D3 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP9 DUP4 GT ISZERO PUSH3 0x2A11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x2AAC JUMPI DUP1 MLOAD DUP6 DUP2 GT ISZERO PUSH3 0x2A2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x3F DUP2 ADD DUP12 SGT PUSH3 0x2A40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2A4A PUSH3 0x2781 JUMP JUMPDEST DUP1 DUP13 PUSH1 0x60 DUP5 ADD GT ISZERO PUSH3 0x2A5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 DUP4 ADD JUMPDEST PUSH1 0x60 DUP5 ADD DUP2 LT ISZERO PUSH3 0x2A9B JUMPI DUP1 MLOAD DUP10 DUP2 GT ISZERO PUSH3 0x2A7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2A8C DUP16 DUP14 DUP4 DUP9 ADD ADD PUSH3 0x2807 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP11 ADD SWAP2 DUP11 ADD PUSH3 0x2A60 JUMP JUMPDEST POP DUP6 MSTORE POP POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH3 0x2A15 JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x2AFA JUMPI PUSH3 0x2AFA PUSH3 0x2ACF JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x2B15 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x537464436861696E7320676574436861696E2875696E74323536293A20436861 DUP2 MSTORE PUSH11 0x34B7103BB4BA341024A21 PUSH1 0xAD SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x2B6D DUP2 PUSH1 0x2B DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH11 0x103737BA103337BAB73217 PUSH1 0xA9 SHL PUSH1 0x2B SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x36 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2BDD JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2BB8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2BD9 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2BC4 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2BFF JUMPI PUSH3 0x2BFF PUSH3 0x276B JUMP JUMPDEST PUSH3 0x2C17 DUP2 PUSH3 0x2C10 DUP5 SLOAD PUSH3 0x26EA JUMP JUMPDEST DUP5 PUSH3 0x2B8F JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x2C4F JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x2C36 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x2BD9 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2C80 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x2C5F JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2C9F JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH3 0x2CBE DUP2 PUSH3 0x26EA JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH3 0x2CD9 JUMPI PUSH1 0x1 DUP2 EQ PUSH3 0x2CEF JUMPI PUSH3 0x2D20 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH3 0x2D20 JUMP JUMPDEST DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x2D17 JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH3 0x2CFC JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2D38 DUP3 DUP5 PUSH3 0x2CAF JUMP JUMPDEST PUSH13 0x2F6465706C6F796D656E74732F PUSH1 0x98 SHL DUP2 MSTORE PUSH1 0xD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x2D69 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x5 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2D8E DUP3 DUP6 PUSH3 0x2CAF JUMP JUMPDEST DUP4 MLOAD PUSH3 0x2DA0 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH3 0x25E4 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH3 0x2DB8 DUP2 PUSH3 0x26EA JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x20 PUSH1 0x1 DUP4 DUP2 AND DUP1 ISZERO PUSH3 0x2DD8 JUMPI PUSH1 0x1 DUP2 EQ PUSH3 0x2DF3 JUMPI PUSH3 0x2E23 JUMP JUMPDEST PUSH1 0xFF NOT DUP6 AND DUP9 DUP5 ADD MSTORE DUP4 ISZERO ISZERO PUSH1 0x5 SHL DUP9 ADD DUP4 ADD SWAP6 POP PUSH3 0x2E23 JUMP JUMPDEST DUP7 PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x2E1B JUMPI DUP2 SLOAD DUP11 DUP3 ADD DUP7 ADD MSTORE SWAP1 DUP4 ADD SWAP1 DUP5 ADD PUSH3 0x2DFE JUMP JUMPDEST DUP10 ADD DUP5 ADD SWAP7 POP POP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH3 0x2E43 PUSH1 0x60 DUP4 ADD DUP7 PUSH3 0x260A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x2E57 DUP2 DUP7 PUSH3 0x260A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x2E6D DUP2 DUP6 PUSH3 0x2DA9 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x2EA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x80 DUP3 DUP7 SUB SLT ISZERO PUSH3 0x2EB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2EC2 PUSH3 0x27AD JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x2ED2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2EE0 DUP8 DUP3 DUP7 ADD PUSH3 0x2807 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x2F00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2F0E DUP8 DUP3 DUP7 ADD PUSH3 0x2807 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x2F27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2F35 DUP8 DUP3 DUP7 ADD PUSH3 0x2807 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH3 0x2F59 PUSH1 0x60 DUP4 ADD DUP6 PUSH3 0x260A JUMP JUMPDEST DUP3 DUP2 SUB DUP1 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0xB DUP3 MSTORE PUSH11 0x6E6574776F726B4E616D65 PUSH1 0xA8 SHL PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 DUP6 ADD MSTORE POP PUSH3 0x26CC PUSH1 0x40 DUP3 ADD DUP6 PUSH3 0x260A JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH3 0x2FA8 PUSH1 0x40 DUP4 ADD DUP6 PUSH3 0x260A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x26CC DUP2 DUP6 PUSH3 0x2DA9 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x2FD0 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH8 0x17D49410D7D55493 PUSH1 0xC2 SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x8 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH16 0x34B73B30B634B210393831903AB9361 PUSH1 0x85 SHL DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH3 0x3017 DUP2 PUSH1 0x10 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x25E4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x10 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH3 0x1FDD JUMPI PUSH3 0x1FDD PUSH3 0x2ACF JUMP JUMPDEST PUSH32 0x537464436861696E7320736574436861696E28737472696E672C436861696E44 DUP2 MSTORE PUSH15 0x30BA30949D1021B430B4B71024A21 PUSH1 0x8D SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP4 MLOAD PUSH3 0x3092 DUP2 PUSH1 0x2F DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH18 0x1030B63932B0B23C903AB9B2B210313C9011 PUSH1 0x71 SHL PUSH1 0x2F SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH3 0x30C6 DUP2 PUSH1 0x41 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x25E4 JUMP JUMPDEST PUSH2 0x1117 PUSH1 0xF1 SHL PUSH1 0x41 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x43 ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2A01 CODESIZE SUB DUP1 PUSH2 0x2A01 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x54 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x296E DUP1 PUSH2 0x93 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA2E74AF6 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA2E74AF6 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0xC9C65396 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xE6A43905 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0xF46901ED EQ PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x17E7E58 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x94B7415 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x1E3DD18B EQ PUSH2 0xD0 JUMPI DUP1 PUSH4 0x574F2BA3 EQ PUSH2 0xE3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xA0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xA0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xDE CALLDATASIZE PUSH1 0x4 PUSH2 0x583 JUMP JUMPDEST PUSH2 0x163 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH2 0x107 PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x18D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0x117 CALLDATASIZE PUSH1 0x4 PUSH2 0x5DA JUMP JUMPDEST PUSH2 0x205 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x107 PUSH2 0x15E CALLDATASIZE PUSH1 0x4 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2AB734B9BBB0B82B191D102327A92124A22222A7 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x268 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A204944454E544943414C5F4144445245535345530000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x28B JUMPI DUP4 DUP6 PUSH2 0x28E JUMP JUMPDEST DUP5 DUP5 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A205A45524F5F41444452455353000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD AND ISZERO PUSH2 0x357 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x556E697377617056323A20504149525F455849535453 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH2 0x369 SWAP1 PUSH2 0x576 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP7 DUP2 SHL DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP6 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x48 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH1 0x0 CREATE2 PUSH1 0x40 MLOAD PUSH4 0x485CC955 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP7 POP SWAP1 DUP7 AND SWAP1 PUSH4 0x485CC955 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x42F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP10 DUP8 AND DUP1 DUP7 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP6 KECCAK256 DUP1 SLOAD SWAP8 DUP14 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP9 DUP10 AND DUP2 OR SWAP1 SWAP2 SSTORE SWAP4 DUP4 MSTORE DUP2 DUP6 KECCAK256 DUP7 DUP7 MSTORE DUP4 MSTORE DUP2 DUP6 KECCAK256 DUP1 SLOAD DUP9 AND DUP6 OR SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP6 DUP2 SWAP1 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP1 SWAP6 ADD DUP1 SLOAD SWAP1 SWAP8 AND DUP5 OR SWAP1 SWAP7 SSTORE SWAP3 SLOAD DUP4 MLOAD SWAP3 DUP4 MSTORE SWAP1 DUP3 ADD MSTORE PUSH32 0xD3648BD0F6BA80134A33BA9275AC585D9D315F0AD8355CDDEFDE31AFA28D0E9 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x554 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2AB734B9BBB0B82B191D102327A92124A22222A7 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1DA JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x232B DUP1 PUSH2 0x60E DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x595 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5D3 DUP3 PUSH2 0x59C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5F6 DUP4 PUSH2 0x59C JUMP JUMPDEST SWAP2 POP PUSH2 0x604 PUSH1 0x20 DUP5 ADD PUSH2 0x59C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0xC SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x2737B93232B5902B19 PUSH1 0xB9 SHL PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL SWAP1 DUP3 ADD MSTORE DUP2 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP2 DUP4 ADD MSTORE PUSH32 0xDE430DC832330FBAACEAD3E6C47B78169D8ABE3F0FFF0A13B56A3F3B9C0A1768 DUP2 DUP5 ADD MSTORE PUSH32 0xC89EFDAA54C0F20C7ADF612882DF0950F5A951637E0307CDCB4C672F298B8BC6 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x3 SSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x2224 DUP1 PUSH2 0x107 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6A627842 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xBA9A7A56 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD21220A7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x407 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x42D JUMPI DUP1 PUSH4 0xFFF6CAE9 EQ PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBA9A7A56 EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0xBC25CF77 EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x3F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7ECEBE00 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x89AFCB44 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6A627842 EQ PUSH2 0x31C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x7464FC3D EQ PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x3644E515 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x5909C0D5 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x5A3D5493 EQ PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0x30ADF81F EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x22C0D9F EQ PUSH2 0x1AE JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x902F1AC EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0xDFE1681 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x283 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C1 PUSH2 0x1BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1DB6 JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x2737B93232B5902B19 PUSH1 0xB9 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F8 SWAP2 SWAP1 PUSH2 0x1E70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x209 PUSH2 0x966 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH4 0xFFFFFFFF AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA3 JUMP JUMPDEST PUSH2 0x990 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x26B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x28C PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1ECF JUMP JUMPDEST PUSH2 0x9A7 JUMP JUMPDEST PUSH2 0x28C PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP2 JUMP JUMPDEST PUSH2 0x2DC PUSH1 0x12 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x28C PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F10 JUMP JUMPDEST PUSH2 0xA3B JUMP JUMPDEST PUSH2 0x28C PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0xABA JUMP JUMPDEST PUSH2 0x28C PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x38B PUSH2 0x386 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0xD82 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x4E524B2D4C5 PUSH1 0xD4 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x3D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EA3 JUMP JUMPDEST PUSH2 0x10E8 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x1F49 JUMP JUMPDEST PUSH2 0x10F5 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x26B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x26B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x428 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F66 JUMP JUMPDEST PUSH2 0x1209 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x1F10 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C1 PUSH2 0x141D JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0x48B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xC SSTORE DUP5 ISZERO ISZERO DUP1 PUSH2 0x49E JUMPI POP PUSH1 0x0 DUP5 GT JUMPDEST PUSH2 0x4F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F4F55545055545F41 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1353D55395 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x503 PUSH2 0x966 JUMP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP8 LT DUP1 ISZERO PUSH2 0x528 JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND DUP7 LT JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F4C49515549444954 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x59 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 SWAP1 DUP2 AND SWAP1 DUP10 AND DUP3 EQ DUP1 ISZERO SWAP1 PUSH2 0x5BC JUMPI POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST PUSH2 0x600 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x556E697377617056323A20494E56414C49445F544F PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST DUP11 ISZERO PUSH2 0x611 JUMPI PUSH2 0x611 DUP3 DUP11 DUP14 PUSH2 0x1541 JUMP JUMPDEST DUP10 ISZERO PUSH2 0x622 JUMPI PUSH2 0x622 DUP2 DUP11 DUP13 PUSH2 0x1541 JUMP JUMPDEST DUP7 ISZERO PUSH2 0x68F JUMPI PUSH1 0x40 MLOAD PUSH4 0x4347A17 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x10D1E85C SWAP1 PUSH2 0x65C SWAP1 CALLER SWAP1 DUP16 SWAP1 DUP16 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x2008 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x68A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6F7 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x762 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST SWAP3 POP POP POP PUSH1 0x0 DUP10 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x2083 JUMP JUMPDEST DUP4 GT PUSH2 0x78A JUMPI PUSH1 0x0 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x79D DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x2083 JUMP JUMPDEST PUSH2 0x7A7 SWAP1 DUP5 PUSH2 0x2083 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7BE DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x2083 JUMP JUMPDEST DUP4 GT PUSH2 0x7CB JUMPI PUSH1 0x0 PUSH2 0x7E8 JUMP JUMPDEST PUSH2 0x7DE DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x2083 JUMP JUMPDEST PUSH2 0x7E8 SWAP1 DUP5 PUSH2 0x2083 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 GT DUP1 PUSH2 0x7F9 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F494E5055545F414D PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x13D55395 PUSH1 0xE2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x873 PUSH2 0x861 DUP5 PUSH1 0x3 PUSH2 0x168C JUMP JUMPDEST PUSH2 0x86D DUP8 PUSH2 0x3E8 PUSH2 0x168C JUMP JUMPDEST SWAP1 PUSH2 0x16F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x885 PUSH2 0x861 DUP5 PUSH1 0x3 PUSH2 0x168C JUMP JUMPDEST SWAP1 POP PUSH2 0x8AA PUSH3 0xF4240 PUSH2 0x8A4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP12 DUP2 AND SWAP1 DUP12 AND PUSH2 0x168C JUMP JUMPDEST SWAP1 PUSH2 0x168C JUMP JUMPDEST PUSH2 0x8B4 DUP4 DUP4 PUSH2 0x168C JUMP JUMPDEST LT ISZERO PUSH2 0x8F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x556E697377617056323A204B PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST POP POP PUSH2 0x8FF DUP5 DUP5 DUP9 DUP9 PUSH2 0x1749 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 CALLER SWAP1 PUSH32 0xD78AD95FA46C994B6551D0DA85FC275FE613CE37657FB8D5E3D130840159D822 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0xC SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP1 DUP3 AND SWAP3 PUSH1 0x1 PUSH1 0x70 SHL DUP4 DIV SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x99D CALLER DUP5 DUP5 PUSH2 0x1935 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0x0 NOT EQ PUSH2 0xA26 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0xA01 SWAP1 DUP4 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST PUSH2 0xA31 DUP5 DUP5 DUP5 PUSH2 0x1997 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA8C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2AB734B9BBB0B82B191D102327A92124A22222A7 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x7 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0xADE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC DUP2 SWAP1 SSTORE DUP1 PUSH2 0xAEE PUSH2 0x966 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB40 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB64 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBB2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBD6 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBED DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x16F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC04 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP8 AND PUSH2 0x16F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC12 DUP8 DUP8 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP2 SWAP3 POP DUP2 SWAP1 SUB PUSH2 0xC4C JUMPI PUSH2 0xC38 PUSH2 0x3E8 PUSH2 0x86D PUSH2 0xC33 DUP8 DUP8 PUSH2 0x168C JUMP JUMPDEST PUSH2 0x1B7A JUMP JUMPDEST SWAP9 POP PUSH2 0xC47 PUSH1 0x0 PUSH2 0x3E8 PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0xC93 JUMP JUMPDEST PUSH2 0xC90 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP10 AND PUSH2 0xC63 DUP7 DUP5 PUSH2 0x168C JUMP JUMPDEST PUSH2 0xC6D SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP10 AND PUSH2 0xC81 DUP7 DUP6 PUSH2 0x168C JUMP JUMPDEST PUSH2 0xC8B SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST PUSH2 0x1C79 JUMP JUMPDEST SWAP9 POP JUMPDEST PUSH1 0x0 DUP10 GT PUSH2 0xCF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F4C49515549444954 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x1657D35253951151 PUSH1 0xC2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH2 0xCFE DUP11 DUP11 PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0xD0A DUP7 DUP7 DUP11 DUP11 PUSH2 0x1749 JUMP JUMPDEST DUP2 ISZERO PUSH2 0xD34 JUMPI PUSH1 0x8 SLOAD PUSH2 0xD30 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV AND PUSH2 0x168C JUMP JUMPDEST PUSH1 0xB SSTORE JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x4C209B5FC8AD50758F13E2E1088BA56A560DFF690A1C6FEF26394F4C03821C4F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0xC SSTORE POP SWAP5 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC DUP2 SWAP1 SSTORE DUP1 PUSH2 0xDB7 PUSH2 0x966 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP4 SWAP6 POP SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 SWAP2 AND SWAP1 PUSH1 0x0 SWAP1 DUP4 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE35 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEA3 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST ADDRESS PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP PUSH2 0xEC0 DUP9 DUP9 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 SWAP2 POP DUP1 PUSH2 0xED1 DUP5 DUP8 PUSH2 0x168C JUMP JUMPDEST PUSH2 0xEDB SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST SWAP11 POP DUP1 PUSH2 0xEE8 DUP5 DUP7 PUSH2 0x168C JUMP JUMPDEST PUSH2 0xEF2 SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST SWAP10 POP PUSH1 0x0 DUP12 GT DUP1 ISZERO PUSH2 0xF04 JUMPI POP PUSH1 0x0 DUP11 GT JUMPDEST PUSH2 0xF61 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E53554646494349454E545F4C49515549444954 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x1657D09554939151 PUSH1 0xC2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x482 JUMP JUMPDEST PUSH2 0xF6B ADDRESS DUP5 PUSH2 0x1C91 JUMP JUMPDEST PUSH2 0xF76 DUP8 DUP14 DUP14 PUSH2 0x1541 JUMP JUMPDEST PUSH2 0xF81 DUP7 DUP14 DUP13 PUSH2 0x1541 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFC5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFE9 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP6 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1030 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1054 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST SWAP4 POP PUSH2 0x1062 DUP6 DUP6 DUP12 DUP12 PUSH2 0x1749 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x108C JUMPI PUSH1 0x8 SLOAD PUSH2 0x1088 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV AND PUSH2 0x168C JUMP JUMPDEST PUSH1 0xB SSTORE JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP13 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND SWAP2 CALLER SWAP2 PUSH32 0xDCCD412F0B1252819CB1FD330B93224CA42612892BB3F4F789976E6D81936496 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP PUSH1 0x1 PUSH1 0xC DUP2 SWAP1 SSTORE POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x99D CALLER DUP5 DUP5 PUSH2 0x1997 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0x1117 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SSTORE PUSH1 0x6 SLOAD PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP2 PUSH2 0x11B2 SWAP2 DUP5 SWAP2 DUP7 SWAP2 PUSH2 0x11AD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1189 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86D SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH2 0x1541 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0x11FF SWAP2 DUP4 SWAP2 DUP7 SWAP2 PUSH2 0x11AD SWAP2 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH2 0x116C JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0xC SSTORE POP JUMP JUMPDEST TIMESTAMP DUP5 LT ISZERO PUSH2 0x124E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x155B9A5CDDD85C158C8E8811561412549151 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 SWAP1 DUP8 PUSH2 0x12A1 DUP4 PUSH2 0x20C0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x131A SWAP3 SWAP2 SWAP1 PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP1 DUP6 MSTORE SWAP2 DUP5 ADD DUP1 DUP5 MSTORE DUP2 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP3 POP SWAP1 PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1385 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x13BB JUMPI POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1407 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A20494E56414C49445F5349474E415455524500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH2 0x1412 DUP10 DUP10 DUP10 PUSH2 0x1935 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x1 EQ PUSH2 0x143F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x482 SWAP1 PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0x153A SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x148E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14B2 SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x151E SWAP2 SWAP1 PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DIV AND PUSH2 0x1749 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH32 0x7472616E7366657228616464726573732C75696E743235362900000000000000 PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP5 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP5 MSTORE SWAP2 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP8 AND SWAP2 PUSH2 0x15CD SWAP2 SWAP1 PUSH2 0x20D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x160A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x160F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1639 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1639 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1639 SWAP2 SWAP1 PUSH2 0x20F5 JUMP JUMPDEST PUSH2 0x1685 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056323A205452414E534645525F4641494C4544000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x16B0 JUMPI POP DUP3 DUP3 PUSH2 0x16A2 DUP2 DUP4 PUSH2 0x2117 JUMP JUMPDEST SWAP3 POP PUSH2 0x16AE SWAP1 DUP4 PUSH2 0x20AC JUMP JUMPDEST EQ JUMPDEST PUSH2 0x9A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6D756C2D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1700 DUP4 DUP3 PUSH2 0x2083 JUMP JUMPDEST SWAP2 POP DUP2 GT ISZERO PUSH2 0x9A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x64732D6D6174682D7375622D756E646572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP5 GT DUP1 ISZERO SWAP1 PUSH2 0x1767 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP4 GT ISZERO JUMPDEST PUSH2 0x17A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x556E697377617056323A204F564552464C4F57 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17BA PUSH5 0x100000000 TIMESTAMP PUSH2 0x212E JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x17DA SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP4 PUSH2 0x2142 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH4 0xFFFFFFFF AND GT DUP1 ISZERO PUSH2 0x17FA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP5 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x180E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP4 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x189D JUMPI DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x1836 DUP6 PUSH2 0x1827 DUP7 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 PUSH2 0x1D34 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x1849 SWAP2 SWAP1 PUSH2 0x2117 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x185A SWAP2 SWAP1 PUSH2 0x2166 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH4 0xFFFFFFFF DUP2 AND PUSH2 0x1873 DUP5 PUSH2 0x1827 DUP8 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x1886 SWAP2 SWAP1 PUSH2 0x2117 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1897 SWAP2 SWAP1 PUSH2 0x2166 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH4 0xFFFFFFFF DUP5 AND PUSH1 0x1 PUSH1 0xE0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP10 DUP2 AND PUSH1 0x1 PUSH1 0x70 SHL SWAP1 DUP2 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP6 AND DUP13 DUP4 AND OR SWAP5 SWAP1 SWAP5 OR SWAP2 DUP3 AND DUP4 OR SWAP5 DUP6 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP3 AND SWAP3 DUP3 AND SWAP3 SWAP1 SWAP3 OR DUP4 MSTORE SWAP3 SWAP1 SWAP4 DIV SWAP1 SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x1C411E9A96E071241C2F21F7726B17AE89E3CAB4C78BE50E062B03A9FFFBBAD1 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x19BA SWAP1 DUP3 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x19E9 SWAP1 DUP3 PUSH2 0x1D49 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x198A SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x17E7E58 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AB7 SWAP2 SWAP1 PUSH2 0x2179 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO SWAP5 POP SWAP2 SWAP3 POP SWAP1 PUSH2 0x1B66 JUMPI DUP1 ISZERO PUSH2 0x1B61 JUMPI PUSH1 0x0 PUSH2 0x1AF2 PUSH2 0xC33 PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP9 DUP2 AND SWAP1 DUP9 AND PUSH2 0x168C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1AFF DUP4 PUSH2 0x1B7A JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1B5E JUMPI PUSH1 0x0 PUSH2 0x1B21 PUSH2 0x1B18 DUP5 DUP5 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 PUSH2 0x168C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B3A DUP4 PUSH2 0x1B34 DUP7 PUSH1 0x5 PUSH2 0x168C JUMP JUMPDEST SWAP1 PUSH2 0x1D49 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B48 DUP3 DUP5 PUSH2 0x20AC JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1B5A JUMPI PUSH2 0x1B5A DUP8 DUP3 PUSH2 0x1BEA JUMP JUMPDEST POP POP POP JUMPDEST POP POP JUMPDEST PUSH2 0x1B72 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1B72 JUMPI PUSH1 0x0 PUSH1 0xB SSTORE JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 GT ISZERO PUSH2 0x1BDB JUMPI POP DUP1 PUSH1 0x0 PUSH2 0x1B94 PUSH1 0x2 DUP4 PUSH2 0x20AC JUMP JUMPDEST PUSH2 0x1B9F SWAP1 PUSH1 0x1 PUSH2 0x2166 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1BD5 JUMPI SWAP1 POP DUP1 PUSH1 0x2 DUP2 PUSH2 0x1BBA DUP2 DUP7 PUSH2 0x20AC JUMP JUMPDEST PUSH2 0x1BC4 SWAP2 SWAP1 PUSH2 0x2166 JUMP JUMPDEST PUSH2 0x1BCE SWAP2 SWAP1 PUSH2 0x20AC JUMP JUMPDEST SWAP1 POP PUSH2 0x1BA2 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1BE5 JUMPI POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x1BF7 SWAP1 DUP3 PUSH2 0x1D49 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1C1C SWAP1 DUP3 PUSH2 0x1D49 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x1C6D SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1C88 JUMPI DUP2 PUSH2 0x1C8A JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1CB4 SWAP1 DUP3 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 0x1CDB SWAP1 DUP3 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH2 0x1C6D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A1 PUSH1 0x1 PUSH1 0x70 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP5 AND PUSH2 0x2196 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C8A PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP4 AND DUP5 PUSH2 0x21C8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1D56 DUP4 DUP3 PUSH2 0x2166 JUMP JUMPDEST SWAP2 POP DUP2 LT ISZERO PUSH2 0x9A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6164642D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x482 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1DB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1DE7 DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1E04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1E27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E67 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E4F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1E8F DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1E4C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1EC1 DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1EE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1EEF DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1EFF DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1F2E DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F3E DUP2 PUSH2 0x1D9E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C8A DUP2 PUSH2 0x1D9E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1F81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x1F8C DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x1F9C DUP2 PUSH2 0x1D9E JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1FC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x155B9A5CDDD85C158C8E881313D0D2D151 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE DUP2 PUSH1 0x80 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0xA0 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0xA0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2066 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x9A1 JUMPI PUSH2 0x9A1 PUSH2 0x206D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x20BB JUMPI PUSH2 0x20BB PUSH2 0x2096 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x20D2 JUMPI PUSH2 0x20D2 PUSH2 0x206D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x20EB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1E4C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x9A1 JUMPI PUSH2 0x9A1 PUSH2 0x206D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x213D JUMPI PUSH2 0x213D PUSH2 0x2096 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x215F JUMPI PUSH2 0x215F PUSH2 0x206D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x9A1 JUMPI PUSH2 0x9A1 PUSH2 0x206D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x218B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C8A DUP2 PUSH2 0x1D9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND DUP2 DUP2 MUL DUP4 AND SWAP3 SWAP2 DUP2 ISZERO DUP3 DUP6 DIV DUP3 EQ OR PUSH2 0x21BF JUMPI PUSH2 0x21BF PUSH2 0x206D JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP4 DUP2 AND DUP1 PUSH2 0x21E2 JUMPI PUSH2 0x21E2 PUSH2 0x2096 JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 DIV SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xC6 ADD PUSH19 0xFC2521C31CAEC32F38FAC9445ACB0753CD7E60 DUP13 DUP3 PUSH14 0x98A8EF3FF7CC64736F6C63430008 ISZERO STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF 0xDF BLOCKHASH PUSH14 0x35E3E01442D949EEC294C392A8EB DUP16 0xE2 ADDMOD PUSH28 0x3D0EE39240872706B87D64736F6C6343000815003360806040523480 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH11 0x57726170706564204E524B PUSH1 0xA8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x574E524B PUSH1 0xE0 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x64 SWAP2 SWAP1 PUSH3 0x121 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x73 DUP3 DUP3 PUSH3 0x121 JUMP JUMPDEST POP POP POP PUSH3 0x1ED JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0xA7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0xC8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x11C JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0xF7 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x118 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x13D JUMPI PUSH3 0x13D PUSH3 0x7C JUMP JUMPDEST PUSH3 0x155 DUP2 PUSH3 0x14E DUP5 SLOAD PUSH3 0x92 JUMP JUMPDEST DUP5 PUSH3 0xCE JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x18D JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x174 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x118 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x1BE JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x19D JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x1DD JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xBEE DUP1 PUSH3 0x1FD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xD0E30DB0 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x25E JUMPI PUSH2 0xD5 JUMP JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x209 JUMPI PUSH2 0xD5 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x197 JUMPI PUSH2 0xD5 JUMP JUMPDEST CALLDATASIZE PUSH2 0xD5 JUMPI PUSH2 0xD3 PUSH2 0x27E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD3 PUSH2 0x27E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x28A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFF SWAP2 SWAP1 PUSH2 0xA1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x123 CALLDATASIZE PUSH1 0x4 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0x31C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xAB3 JUMP JUMPDEST PUSH2 0x336 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0xAEF JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0x407 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x149 PUSH2 0x1EE CALLDATASIZE PUSH1 0x4 PUSH2 0xB08 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF2 PUSH2 0x429 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0x438 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x259 CALLDATASIZE PUSH1 0x4 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0x4B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x149 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0xB2A JUMP JUMPDEST PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0x288 CALLER CALLVALUE PUSH2 0x4EC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x299 SWAP1 PUSH2 0xB5D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2C5 SWAP1 PUSH2 0xB5D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x312 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x312 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x32A DUP2 DUP6 DUP6 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x344 DUP6 DUP3 DUP6 PUSH2 0x6CF JUMP JUMPDEST PUSH2 0x34F DUP6 DUP6 DUP6 PUSH2 0x749 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x365 DUP2 DUP4 PUSH2 0x8ED JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x402 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x6661696C656420746F2073656E64204E524B PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x32A DUP2 DUP6 DUP6 PUSH2 0x41A DUP4 DUP4 PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0x424 SWAP2 SWAP1 PUSH2 0xB97 JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x299 SWAP1 PUSH2 0xB5D JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x446 DUP3 DUP7 PUSH2 0x4C1 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0x34F DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x32A DUP2 DUP6 DUP6 PUSH2 0x749 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x542 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F9 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x554 SWAP2 SWAP1 PUSH2 0xB97 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x60D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x66E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DB DUP5 DUP5 PUSH2 0x4C1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x743 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x736 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0x743 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5AB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x80F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x887 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x743 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x94D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x9C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA4C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0xA30 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAA5 DUP4 PUSH2 0xA6D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAD1 DUP5 PUSH2 0xA6D JUMP JUMPDEST SWAP3 POP PUSH2 0xADF PUSH1 0x20 DUP6 ADD PUSH2 0xA6D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB23 DUP3 PUSH2 0xA6D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB46 DUP4 PUSH2 0xA6D JUMP JUMPDEST SWAP2 POP PUSH2 0xB54 PUSH1 0x20 DUP5 ADD PUSH2 0xA6D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xB71 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xB91 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x330 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID 0xB2 0xBC DUP7 PUSH29 0x4D2A78E90D9F25B7F3959CD6FB5EEE533407C011AFBE035110CF1B6473 PUSH16 0x6C6343000815003360C0604052348015 PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4369 CODESIZE SUB DUP1 PUSH3 0x4369 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x69 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x80 MSTORE AND PUSH1 0xA0 MSTORE PUSH3 0xA1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x88 DUP4 PUSH3 0x4C JUMP JUMPDEST SWAP2 POP PUSH3 0x98 PUSH1 0x20 DUP5 ADD PUSH3 0x4C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x4136 PUSH3 0x233 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x15F ADD MSTORE DUP2 DUP2 PUSH2 0x36D ADD MSTORE DUP2 DUP2 PUSH2 0x522 ADD MSTORE DUP2 DUP2 PUSH2 0x571 ADD MSTORE DUP2 DUP2 PUSH2 0x62D ADD MSTORE DUP2 DUP2 PUSH2 0x850 ADD MSTORE DUP2 DUP2 PUSH2 0xB89 ADD MSTORE DUP2 DUP2 PUSH2 0xCC4 ADD MSTORE DUP2 DUP2 PUSH2 0x1014 ADD MSTORE DUP2 DUP2 PUSH2 0x10F7 ADD MSTORE DUP2 DUP2 PUSH2 0x11A2 ADD MSTORE DUP2 DUP2 PUSH2 0x1235 ADD MSTORE DUP2 DUP2 PUSH2 0x1353 ADD MSTORE DUP2 DUP2 PUSH2 0x13E1 ADD MSTORE DUP2 DUP2 PUSH2 0x1629 ADD MSTORE DUP2 DUP2 PUSH2 0x16E1 ADD MSTORE DUP2 DUP2 PUSH2 0x1772 ADD MSTORE DUP2 DUP2 PUSH2 0x17EF ADD MSTORE DUP2 DUP2 PUSH2 0x1863 ADD MSTORE DUP2 DUP2 PUSH2 0x1CAA ADD MSTORE DUP2 DUP2 PUSH2 0x1E9B ADD MSTORE DUP2 DUP2 PUSH2 0x1EF1 ADD MSTORE DUP2 DUP2 PUSH2 0x1F25 ADD MSTORE DUP2 DUP2 PUSH2 0x1FBA ADD MSTORE DUP2 DUP2 PUSH2 0x20F3 ADD MSTORE DUP2 DUP2 PUSH2 0x2205 ADD MSTORE PUSH2 0x2293 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x42C ADD MSTORE DUP2 DUP2 PUSH2 0x6A9 ADD MSTORE DUP2 DUP2 PUSH2 0x77B ADD MSTORE DUP2 DUP2 PUSH2 0x936 ADD MSTORE DUP2 DUP2 PUSH2 0x96F ADD MSTORE DUP2 DUP2 PUSH2 0xA66 ADD MSTORE DUP2 DUP2 PUSH2 0xC05 ADD MSTORE DUP2 DUP2 PUSH2 0xCA2 ADD MSTORE DUP2 DUP2 PUSH2 0xDD9 ADD MSTORE DUP2 DUP2 PUSH2 0x12B0 ADD MSTORE DUP2 DUP2 PUSH2 0x1413 ADD MSTORE DUP2 DUP2 PUSH2 0x155E ADD MSTORE DUP2 DUP2 PUSH2 0x1895 ADD MSTORE DUP2 DUP2 PUSH2 0x1AB4 ADD MSTORE DUP2 DUP2 PUSH2 0x1C58 ADD MSTORE DUP2 DUP2 PUSH2 0x1C88 ADD MSTORE DUP2 DUP2 PUSH2 0x1DB1 ADD MSTORE DUP2 DUP2 PUSH2 0x1ECF ADD MSTORE DUP2 DUP2 PUSH2 0x216E ADD MSTORE DUP2 DUP2 PUSH2 0x22C5 ADD MSTORE DUP2 DUP2 PUSH2 0x2B90 ADD MSTORE DUP2 DUP2 PUSH2 0x2BE0 ADD MSTORE DUP2 DUP2 PUSH2 0x2EAB ADD MSTORE DUP2 DUP2 PUSH2 0x3013 ADD MSTORE DUP2 DUP2 PUSH2 0x33C3 ADD MSTORE DUP2 DUP2 PUSH2 0x3465 ADD MSTORE PUSH2 0x34DC ADD MSTORE PUSH2 0x4136 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8803DBEE GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xC45A0155 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0xD06CA61F EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0xDED9382A EQ PUSH2 0x46E JUMPI DUP1 PUSH4 0xE8E33700 EQ PUSH2 0x48E JUMPI DUP1 PUSH4 0xF305D719 EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0xFB3BDB41 EQ PUSH2 0x4DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8803DBEE EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0xAD615DEC EQ PUSH2 0x3A7 JUMPI DUP1 PUSH4 0xAF2979EB EQ PUSH2 0x3C7 JUMPI DUP1 PUSH4 0xB6F9DE95 EQ PUSH2 0x3E7 JUMPI DUP1 PUSH4 0xBAA2ABDE EQ PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4A25D94A GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x4A25D94A EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0x5B0D5984 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x5C11D795 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x791AC947 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x7FF36AB5 EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x85F8C259 EQ PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2751CEC EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x54D50D4 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x18CBAFE5 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x1F00CA74 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x2195995C EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0x38ED1739 EQ PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x18E JUMPI CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x18C JUMPI PUSH2 0x18C PUSH2 0x373F JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x1AE CALLDATASIZE PUSH1 0x4 PUSH2 0x377D JUMP JUMPDEST PUSH2 0x4EF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x1E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x37DB JUMP JUMPDEST PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0x600 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C4 SWAP2 SWAP1 PUSH2 0x38BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x3919 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A09 JUMP JUMPDEST PUSH2 0x965 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x283 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0xA3E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0xB5C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AB3 JUMP JUMPDEST PUSH2 0xC9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0xD87 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH2 0x303 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0x21B PUSH2 0x316 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B49 JUMP JUMPDEST PUSH2 0x1210 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x336 CALLDATASIZE PUSH1 0x4 PUSH2 0x37DB JUMP JUMPDEST PUSH2 0x1529 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x356 CALLDATASIZE PUSH1 0x4 PUSH2 0x384C JUMP JUMPDEST PUSH2 0x1536 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x37DB JUMP JUMPDEST PUSH2 0x15F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1ED PUSH2 0x3E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x377D JUMP JUMPDEST PUSH2 0x1600 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3B49 JUMP JUMPDEST PUSH2 0x174F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x415 CALLDATASIZE PUSH1 0x4 PUSH2 0x3BB0 JUMP JUMPDEST PUSH2 0x1A89 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38F PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21B PUSH2 0x469 CALLDATASIZE PUSH1 0x4 PUSH2 0x3919 JUMP JUMPDEST PUSH2 0x1C51 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x3AB3 JUMP JUMPDEST PUSH2 0x1C7E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C22 JUMP JUMPDEST PUSH2 0x1D71 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1C4 JUMP JUMPDEST PUSH2 0x4AE PUSH2 0x4D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x377D JUMP JUMPDEST PUSH2 0x1E6F JUMP JUMPDEST PUSH2 0x21B PUSH2 0x4EA CALLDATASIZE PUSH1 0x4 PUSH2 0x3B49 JUMP JUMPDEST PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 TIMESTAMP DUP2 LT ISZERO PUSH2 0x51C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x54B DUP10 PUSH32 0x0 DUP11 DUP11 DUP11 ADDRESS DUP11 PUSH2 0x1A89 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH2 0x55B DUP10 DUP7 DUP6 PUSH2 0x241D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x5DF DUP6 DUP4 PUSH2 0x254E JUMP JUMPDEST POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F8 DUP5 DUP5 DUP5 PUSH2 0x262D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x623 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP7 DUP7 PUSH2 0x65A PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x669 JUMPI PUSH2 0x669 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x67E SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0x702 PUSH32 0x0 DUP10 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x270B SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x1 DUP5 MLOAD PUSH2 0x714 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x724 JUMPI PUSH2 0x724 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0x74A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x80F DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x760 JUMPI PUSH2 0x760 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x775 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST CALLER PUSH2 0x7EF PUSH32 0x0 DUP11 DUP11 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x7AD JUMPI PUSH2 0x7AD PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7C2 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST DUP12 DUP12 PUSH1 0x1 DUP2 DUP2 LT PUSH2 0x7D5 JUMPI PUSH2 0x7D5 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7EA SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH2 0x2896 JUMP JUMPDEST DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x802 JUMPI PUSH2 0x802 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x296F JUMP JUMPDEST PUSH2 0x84E DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP ADDRESS SWAP3 POP PUSH2 0x2AAD SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2E1A7D4D DUP4 PUSH1 0x1 DUP6 MLOAD PUSH2 0x88C SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x89C JUMPI PUSH2 0x89C PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C2 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x924 DUP5 DUP4 PUSH1 0x1 DUP6 MLOAD PUSH2 0x907 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x917 JUMPI PUSH2 0x917 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x254E JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x95C PUSH32 0x0 DUP5 DUP5 PUSH2 0x2CB5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x995 PUSH32 0x0 DUP16 DUP16 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH2 0x9A4 JUMPI DUP13 PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x9E3 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 DUP16 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x3DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xA24 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 DUP16 PUSH2 0x1A89 JUMP JUMPDEST DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP POP POP SWAP12 POP SWAP12 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0xA61 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0xABF PUSH32 0x0 DUP10 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x270B SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x1 DUP5 MLOAD PUSH2 0xAD1 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xAE1 JUMPI PUSH2 0xAE1 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0xB07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0xB1D DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x760 JUMPI PUSH2 0x760 PUSH2 0x3CFE JUMP JUMPDEST PUSH2 0x924 DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2AAD SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0xB7F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP7 DUP7 PUSH2 0xBB6 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0xBC5 JUMPI PUSH2 0xBC5 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBDA SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC00 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0xC5E PUSH32 0x0 DUP10 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2CB5 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC74 JUMPI PUSH2 0xC74 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x74A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3DFB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCE8 PUSH32 0x0 DUP14 PUSH32 0x0 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 PUSH2 0xCF7 JUMPI DUP12 PUSH2 0xCFB JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0xD36 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 DUP15 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x3DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD76 DUP14 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH2 0x1600 JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 TIMESTAMP DUP2 LT ISZERO PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0xE39 DUP6 DUP6 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xDBE JUMPI PUSH2 0xDBE PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xDD3 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST CALLER PUSH2 0xE33 PUSH32 0x0 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE20 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST DUP11 DUP11 PUSH1 0x1 DUP2 DUP2 LT PUSH2 0x7D5 JUMPI PUSH2 0x7D5 PUSH2 0x3CFE JUMP JUMPDEST DUP11 PUSH2 0x296F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 PUSH2 0xE48 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0xE57 JUMPI PUSH2 0xE57 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xE6C SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEB4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xED8 SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP1 POP PUSH2 0xF18 DUP7 DUP7 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP9 SWAP3 POP PUSH2 0x2E36 SWAP2 POP POP JUMP JUMPDEST DUP7 PUSH2 0xFC1 DUP3 DUP9 DUP9 PUSH2 0xF2A PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0xF39 JUMPI PUSH2 0xF39 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xF4E SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF97 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFBB SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP1 PUSH2 0x30CF JUMP JUMPDEST LT ISZERO PUSH2 0xFDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 TIMESTAMP DUP2 LT ISZERO PUSH2 0x100A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP6 DUP6 PUSH2 0x1041 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1050 JUMPI PUSH2 0x1050 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1065 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x108B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0x10A1 DUP6 DUP6 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xDBE JUMPI PUSH2 0xDBE PUSH2 0x3CFE JUMP JUMPDEST PUSH2 0x10DF DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP ADDRESS SWAP3 POP PUSH2 0x2E36 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1146 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x116A SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP1 POP DUP7 DUP2 LT ISZERO PUSH2 0x118C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1202 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xFDF DUP5 DUP3 PUSH2 0x254E JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1233 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x1270 JUMPI PUSH2 0x1270 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1285 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x12AB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0x1309 PUSH32 0x0 CALLVALUE DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x270B SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x1 DUP5 MLOAD PUSH2 0x131B SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x132B JUMPI PUSH2 0x132B PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0x1351 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D6F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1393 JUMPI PUSH2 0x1393 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x1445 PUSH32 0x0 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x3CFE JUMP JUMPDEST DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1458 JUMPI PUSH2 0x1458 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1491 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14D4 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x14E0 JUMPI PUSH2 0x14E0 PUSH2 0x373F JUMP JUMPDEST PUSH2 0x151F DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2AAD SWAP2 POP POP JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F8 DUP5 DUP5 DUP5 PUSH2 0x3125 JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1559 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x15B7 PUSH32 0x0 DUP10 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2CB5 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP DUP7 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x15CD JUMPI PUSH2 0x15CD PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0xB07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3DFB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F8 DUP5 DUP5 DUP5 PUSH2 0x31FE JUMP JUMPDEST PUSH1 0x0 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1623 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x1652 DUP9 PUSH32 0x0 DUP10 DUP10 DUP10 ADDRESS DUP10 PUSH2 0x1A89 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP4 POP PUSH2 0x16CB SWAP2 POP DUP10 SWAP1 DUP7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16C6 SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST PUSH2 0x241D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x172D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1741 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x924 DUP5 DUP4 PUSH2 0x254E JUMP JUMPDEST DUP1 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1770 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x17AD JUMPI PUSH2 0x17AD PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x17C2 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x17E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH1 0x0 CALLVALUE SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1848 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x185C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x18C7 PUSH32 0x0 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1914 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1938 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x1944 JUMPI PUSH2 0x1944 PUSH2 0x373F JUMP JUMPDEST PUSH1 0x0 DUP7 DUP7 PUSH2 0x1953 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1962 JUMPI PUSH2 0x1962 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1977 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19E3 SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A23 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2E36 SWAP2 POP POP JUMP JUMPDEST DUP8 PUSH2 0xFC1 DUP3 DUP10 DUP10 PUSH2 0x1A35 PUSH1 0x1 DUP3 PUSH2 0x3CEB JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1A44 JUMPI PUSH2 0x1A44 PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1A59 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH2 0xF7A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1AAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ADA PUSH32 0x0 DUP13 DUP13 PUSH2 0x2896 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP13 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B30 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B54 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x226BF2D1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP5 AND SWAP1 PUSH4 0x89AFCB44 SWAP1 PUSH1 0x24 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BC5 SWAP2 SWAP1 PUSH2 0x3E78 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x1BD5 DUP15 DUP15 PUSH2 0x329E JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1BF8 JUMPI DUP2 DUP4 PUSH2 0x1BFB JUMP JUMPDEST DUP3 DUP3 JUMPDEST SWAP1 SWAP8 POP SWAP6 POP DUP11 DUP8 LT ISZERO PUSH2 0x1C20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3E9C JUMP JUMPDEST DUP10 DUP7 LT ISZERO PUSH2 0x1C40 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3EE2 JUMP JUMPDEST POP POP POP POP POP SWAP8 POP SWAP8 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x95C PUSH32 0x0 DUP5 DUP5 PUSH2 0x270B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1CCE PUSH32 0x0 DUP15 PUSH32 0x0 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH2 0x1CDD JUMPI DUP13 PUSH2 0x1CE1 JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH2 0x1D1C SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 DUP16 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x3DBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1D4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1D5C DUP15 DUP15 DUP15 DUP15 DUP15 DUP15 PUSH2 0x4EF JUMP JUMPDEST SWAP1 SWAP16 SWAP1 SWAP15 POP SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1D97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x1DA5 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x3395 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH1 0x0 PUSH2 0x1DD7 PUSH32 0x0 DUP15 DUP15 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH2 0x1DE5 DUP14 CALLER DUP4 DUP9 PUSH2 0x296F JUMP JUMPDEST PUSH2 0x1DF1 DUP13 CALLER DUP4 DUP8 PUSH2 0x296F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35313C21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x6A627842 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E5D SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP3 POP POP POP SWAP9 POP SWAP9 POP SWAP9 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 TIMESTAMP DUP2 LT ISZERO PUSH2 0x1E95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x1EC3 DUP11 PUSH32 0x0 DUP12 CALLVALUE DUP13 DUP13 PUSH2 0x3395 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH1 0x0 PUSH2 0x1F15 PUSH32 0x0 DUP13 PUSH32 0x0 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH2 0x1F23 DUP12 CALLER DUP4 DUP9 PUSH2 0x296F JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE PUSH32 0x0 AND SWAP4 POP PUSH4 0xA9059CBB SWAP3 POP PUSH1 0x44 ADD SWAP1 POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2007 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x202B SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x2037 JUMPI PUSH2 0x2037 PUSH2 0x373F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35313C21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND SWAP1 PUSH4 0x6A627842 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x207F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20A3 SWAP2 SWAP1 PUSH2 0x3E42 JUMP JUMPDEST SWAP3 POP DUP4 CALLVALUE GT ISZERO PUSH2 0x20C0 JUMPI PUSH2 0x20C0 CALLER PUSH2 0x20BB DUP7 CALLVALUE PUSH2 0x3CEB JUMP JUMPDEST PUSH2 0x254E JUMP JUMPDEST POP POP SWAP7 POP SWAP7 POP SWAP7 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 TIMESTAMP DUP2 LT ISZERO PUSH2 0x20F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3C9E JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x212E JUMPI PUSH2 0x212E PUSH2 0x3CFE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2143 SWAP2 SWAP1 PUSH2 0x3D14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2169 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3D38 JUMP JUMPDEST PUSH2 0x21C7 PUSH32 0x0 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2CB5 SWAP3 POP POP POP JUMP JUMPDEST SWAP2 POP CALLVALUE DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x21DD JUMPI PUSH2 0x21DD PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x2203 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3DFB JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2245 JUMPI PUSH2 0x2245 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x228C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB PUSH2 0x22F7 PUSH32 0x0 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0B JUMPI PUSH2 0xE0B PUSH2 0x3CFE JUMP JUMPDEST DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x230A JUMPI PUSH2 0x230A PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2343 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2362 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2386 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x2392 JUMPI PUSH2 0x2392 PUSH2 0x373F JUMP JUMPDEST PUSH2 0x23D1 DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2AAD SWAP2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x23E4 JUMPI PUSH2 0x23E4 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLVALUE GT ISZERO PUSH2 0x151F JUMPI PUSH2 0x151F CALLER DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x240A JUMPI PUSH2 0x240A PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLVALUE PUSH2 0x20BB SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x2479 SWAP2 SWAP1 PUSH2 0x3F4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x24B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x24BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x24E5 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x24E5 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x24E5 SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x2547 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A3A736166655472616E736665723A207472 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x185B9CD9995C8819985A5B1959 PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD PUSH2 0x2578 SWAP2 SWAP1 PUSH2 0x3F4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x25B5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x25BA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2628 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A3A736166655472616E736665724554483A PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x8115512081D1C985B9CD9995C8819985A5B1959 PUSH1 0x62 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x2692 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F49 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1394155517D05353D55395 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x26A2 JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST PUSH2 0x26BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3F68 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26CC DUP6 PUSH2 0x3E5 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26DA DUP3 DUP6 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x26F4 DUP4 PUSH2 0x26EE DUP9 PUSH2 0x3E8 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 PUSH2 0x3620 JUMP JUMPDEST SWAP1 POP PUSH2 0x2700 DUP2 DUP4 PUSH2 0x3FB0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 MLOAD LT ISZERO PUSH2 0x275F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E56414C49445F504154480000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2779 JUMPI PUSH2 0x2779 PUSH2 0x3903 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x27A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x27B9 JUMPI PUSH2 0x27B9 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 MLOAD PUSH2 0x27D6 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x288E JUMPI PUSH1 0x0 DUP1 PUSH2 0x2829 DUP8 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x27F6 JUMPI PUSH2 0x27F6 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 PUSH1 0x1 PUSH2 0x280C SWAP2 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x281C JUMPI PUSH2 0x281C PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3675 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2851 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2842 JUMPI PUSH2 0x2842 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 PUSH2 0x262D JUMP JUMPDEST DUP5 PUSH2 0x285D DUP6 PUSH1 0x1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x286D JUMPI PUSH2 0x286D PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP DUP1 DUP1 PUSH2 0x2886 SWAP1 PUSH2 0x3FE5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x27C8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x28A5 DUP6 DUP6 PUSH2 0x329E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP5 DUP2 SHL DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP4 SWAP1 SHL AND PUSH1 0x34 DUP3 ADD MSTORE SWAP2 SWAP4 POP SWAP2 POP DUP7 SWAP1 PUSH1 0x48 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x294D SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 MSTORE PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 DUP4 ADD MSTORE PUSH1 0x15 DUP3 ADD MSTORE PUSH32 0x96E8AC4277198FF8B6F785478AA9A39F403CB768DD02CBEE326C3E7DA348845F PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH2 0x29D3 SWAP2 SWAP1 PUSH2 0x3F4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2A10 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2A15 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2A3F JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x2A3F JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2A3F SWAP2 SWAP1 PUSH2 0x3E5B JUMP JUMPDEST PUSH2 0x2AA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E7366657248656C7065723A3A7472616E7366657246726F6D3A207472 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x185B9CD9995C919C9BDB4819985A5B1959 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 MLOAD PUSH2 0x2ABE SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x2CAF JUMPI PUSH1 0x0 DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2ADA JUMPI PUSH2 0x2ADA PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 PUSH1 0x1 PUSH2 0x2AF0 SWAP2 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2B00 JUMPI PUSH2 0x2B00 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2B18 DUP4 DUP4 PUSH2 0x329E JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP8 PUSH2 0x2B29 DUP7 PUSH1 0x1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2B39 JUMPI PUSH2 0x2B39 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2B67 JUMPI DUP3 PUSH1 0x0 PUSH2 0x2B6B JUMP JUMPDEST PUSH1 0x0 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP11 MLOAD PUSH2 0x2B7F SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP9 LT PUSH2 0x2B8B JUMPI DUP9 PUSH2 0x2BD9 JUMP JUMPDEST PUSH2 0x2BD9 PUSH32 0x0 DUP8 DUP13 PUSH2 0x2BBC DUP13 PUSH1 0x2 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2BCC JUMPI PUSH2 0x2BCC PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C06 PUSH32 0x0 DUP9 DUP9 PUSH2 0x2896 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x22C0D9F DUP5 DUP5 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2C43 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C63 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3FFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C91 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP DUP1 DUP1 PUSH2 0x2CA7 SWAP1 PUSH2 0x3FE5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2AB0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 MLOAD LT ISZERO PUSH2 0x2D09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E56414C49445F504154480000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D23 JUMPI PUSH2 0x2D23 PUSH2 0x3903 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D4C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 DUP2 PUSH1 0x1 DUP4 MLOAD PUSH2 0x2D5F SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2D6F JUMPI PUSH2 0x2D6F PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x1 DUP4 MLOAD PUSH2 0x2D8B SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 ISZERO PUSH2 0x288E JUMPI PUSH1 0x0 DUP1 PUSH2 0x2DD1 DUP8 DUP7 PUSH2 0x2DA7 PUSH1 0x1 DUP8 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2DB7 JUMPI PUSH2 0x2DB7 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x281C JUMPI PUSH2 0x281C PUSH2 0x3CFE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2DF9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DEA JUMPI PUSH2 0x2DEA PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP4 PUSH2 0x3125 JUMP JUMPDEST DUP5 PUSH2 0x2E05 PUSH1 0x1 DUP7 PUSH2 0x3CEB JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2E15 JUMPI PUSH2 0x2E15 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP DUP1 DUP1 PUSH2 0x2E2E SWAP1 PUSH2 0x404E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2D8E JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP4 MLOAD PUSH2 0x2E47 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x2628 JUMPI PUSH1 0x0 DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2E63 JUMPI PUSH2 0x2E63 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 PUSH1 0x1 PUSH2 0x2E79 SWAP2 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x2E89 JUMPI PUSH2 0x2E89 PUSH2 0x3CFE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2EA1 DUP4 DUP4 PUSH2 0x329E JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH2 0x2ED1 PUSH32 0x0 DUP6 DUP6 PUSH2 0x2896 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F3B SWAP2 SWAP1 PUSH2 0x407C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x0 DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2F75 JUMPI DUP3 DUP5 PUSH2 0x2F78 JUMP JUMPDEST DUP4 DUP4 JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH2 0x2FB3 SWAP2 DUP5 SWAP2 SWAP1 DUP14 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH2 0xF7A JUMP JUMPDEST SWAP6 POP PUSH2 0x2FC0 DUP7 DUP4 DUP4 PUSH2 0x262D JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2FEA JUMPI DUP3 PUSH1 0x0 PUSH2 0x2FEE JUMP JUMPDEST PUSH1 0x0 DUP4 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP13 MLOAD PUSH2 0x3002 SWAP2 SWAP1 PUSH2 0x3CEB JUMP JUMPDEST DUP11 LT PUSH2 0x300E JUMPI DUP11 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x303F PUSH32 0x0 DUP10 DUP15 PUSH2 0x2BBC DUP15 PUSH1 0x2 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x22C0D9F PUSH1 0xE0 SHL SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x22C0D9F SWAP1 PUSH2 0x3081 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x3FFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x309B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x30AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP DUP1 DUP1 PUSH2 0x30C7 SWAP1 PUSH2 0x3FE5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E39 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x30DC DUP4 DUP3 PUSH2 0x3CEB JUMP JUMPDEST SWAP2 POP DUP2 GT ISZERO PUSH2 0x95F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x64732D6D6174682D7375622D756E646572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x318B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4F PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x155514155517D05353D55395 PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x319B JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST PUSH2 0x31B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3F68 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31CF PUSH2 0x3E8 PUSH2 0x31C9 DUP7 DUP9 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 PUSH2 0x35B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x31E3 PUSH2 0x3E5 PUSH2 0x31C9 DUP7 DUP10 PUSH2 0x30CF JUMP JUMPDEST SWAP1 POP PUSH2 0x31F4 PUSH1 0x1 PUSH2 0x26EE DUP4 DUP6 PUSH2 0x3FB0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 GT PUSH2 0x325D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F41 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1353D55395 PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP4 GT DUP1 ISZERO PUSH2 0x326D JUMPI POP PUSH1 0x0 DUP3 GT JUMPDEST PUSH2 0x3289 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3F68 JUMP JUMPDEST DUP3 PUSH2 0x3294 DUP6 DUP5 PUSH2 0x35B9 JUMP JUMPDEST PUSH2 0x5F8 SWAP2 SWAP1 PUSH2 0x3FB0 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3310 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A204944454E544943414C5F41444452 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x4553534553 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x513 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT PUSH2 0x3330 JUMPI DUP3 DUP5 PUSH2 0x3333 JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x338E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A205A45524F5F414444524553530000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE6A43905 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xE6A43905 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x340C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3430 SWAP2 SWAP1 PUSH2 0x40CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x34D4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64E329CB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP9 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xC9C65396 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x34AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34D2 SWAP2 SWAP1 PUSH2 0x40CC JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3502 PUSH32 0x0 DUP12 DUP12 PUSH2 0x3675 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x3514 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3524 JUMPI DUP8 SWAP4 POP DUP7 SWAP3 POP PUSH2 0x35AC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3531 DUP10 DUP5 DUP5 PUSH2 0x31FE JUMP JUMPDEST SWAP1 POP DUP8 DUP2 GT PUSH2 0x3565 JUMPI DUP6 DUP2 LT ISZERO PUSH2 0x355A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3EE2 JUMP JUMPDEST DUP9 SWAP5 POP SWAP3 POP DUP3 PUSH2 0x35AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3572 DUP10 DUP5 DUP7 PUSH2 0x31FE JUMP JUMPDEST SWAP1 POP DUP10 DUP2 GT ISZERO PUSH2 0x3584 JUMPI PUSH2 0x3584 PUSH2 0x373F JUMP JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x35A4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x513 SWAP1 PUSH2 0x3E9C JUMP JUMPDEST SWAP5 POP DUP8 SWAP4 POP JUMPDEST POP JUMPDEST POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x35DD JUMPI POP DUP3 DUP3 PUSH2 0x35CF DUP2 DUP4 PUSH2 0x40E9 JUMP JUMPDEST SWAP3 POP PUSH2 0x35DB SWAP1 DUP4 PUSH2 0x3FB0 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x95F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6D756C2D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x362D DUP4 DUP3 PUSH2 0x3FD2 JUMP JUMPDEST SWAP2 POP DUP2 LT ISZERO PUSH2 0x95F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x64732D6D6174682D6164642D6F766572666C6F77 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3684 DUP6 DUP6 PUSH2 0x329E JUMP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 PUSH2 0x3695 DUP9 DUP9 DUP9 PUSH2 0x2896 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36F6 SWAP2 SWAP1 PUSH2 0x407C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB AND SWAP2 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x372D JUMPI DUP1 DUP3 PUSH2 0x3730 JUMP JUMPDEST DUP2 DUP2 JUMPDEST SWAP1 SWAP10 SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x376A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x3778 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x37A1 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH2 0x37C6 DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x37F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x338E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3865 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x388A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3896 DUP10 DUP3 DUP11 ADD PUSH2 0x3807 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x38AA DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x38F7 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x38DB JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x392C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x394C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3960 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3972 JUMPI PUSH2 0x3972 PUSH2 0x3903 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x3997 JUMPI PUSH2 0x3997 PUSH2 0x3903 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH2 0x39B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x39DA JUMPI PUSH2 0x39CB DUP6 PUSH2 0x376D JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x39BA JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x376A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x160 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x3A2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP12 CALLDATALOAD PUSH2 0x3A36 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD PUSH2 0x3A46 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP10 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD SWAP9 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP8 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP7 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD PUSH2 0x3A6B DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP6 POP PUSH1 0xC0 DUP13 ADD CALLDATALOAD SWAP5 POP PUSH1 0xE0 DUP13 ADD CALLDATALOAD PUSH2 0x3A82 DUP2 PUSH2 0x39EA JUMP JUMPDEST SWAP4 POP PUSH2 0x3A91 PUSH2 0x100 DUP14 ADD PUSH2 0x39F8 JUMP JUMPDEST SWAP3 POP PUSH2 0x120 DUP13 ADD CALLDATALOAD SWAP2 POP PUSH2 0x140 DUP13 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x3AD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 CALLDATALOAD PUSH2 0x3ADE DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP10 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP9 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP8 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP7 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD PUSH2 0x3B03 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP6 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 DUP12 ADD CALLDATALOAD PUSH2 0x3B1A DUP2 PUSH2 0x39EA JUMP JUMPDEST SWAP4 POP PUSH2 0x3B28 PUSH1 0xE0 DUP13 ADD PUSH2 0x39F8 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 DUP12 ADD CALLDATALOAD SWAP2 POP PUSH2 0x120 DUP12 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3B61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B8B DUP9 DUP3 DUP10 ADD PUSH2 0x3807 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x3B9F DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3BCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x3BD6 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x3BE6 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH2 0x3C0B DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x3C3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x3C4A DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x3C5A DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP3 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD PUSH2 0x3C86 DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xE0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20455850495245440000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x95F JUMPI PUSH2 0x95F PUSH2 0x3CD5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3D26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3D31 DUP2 PUSH2 0x3755 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20494E56414C49445F50415448000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20494E53554646494349454E545F4F55 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x1514155517D05353D55395 PUSH1 0xAA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND DUP2 MSTORE SWAP6 SWAP1 SWAP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A204558434553534956455F494E505554 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x17D05353D55395 PUSH1 0xCA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D31 DUP2 PUSH2 0x39EA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20494E53554646494349454E545F415F PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x105353D55395 PUSH1 0xD2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E69737761705632526F757465723A20494E53554646494349454E545F425F PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x105353D55395 PUSH1 0xD2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3F43 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3F2B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3F5E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3F28 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4C PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x4951554944495459 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3FCD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x95F JUMPI PUSH2 0x95F PUSH2 0x3CD5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3FF7 JUMPI PUSH2 0x3FF7 PUSH2 0x3CD5 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x4037 DUP2 PUSH1 0xA0 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3F28 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xA0 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x405D JUMPI PUSH2 0x405D PUSH2 0x3CD5 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x70 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3778 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4091 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x409A DUP5 PUSH2 0x4065 JUMP JUMPDEST SWAP3 POP PUSH2 0x40A8 PUSH1 0x20 DUP6 ADD PUSH2 0x4065 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x40C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x40DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D31 DUP2 PUSH2 0x3755 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x95F JUMPI PUSH2 0x95F PUSH2 0x3CD5 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xF6 0xB7 CALLER MSTORE8 SWAP2 0x2F DUP6 PUSH2 0x1F63 PUSH31 0x48263C06B9A1387AF8C39092E3320F81A192C51464736F6C63430008150033 PUSH9 0x747470733A2F2F6D61 PUSH10 0x6E6E65742E696E667572 PUSH2 0x2E69 PUSH16 0x2F76332F623937393461643164646638 CALLVALUE PUSH5 0x6662386333 CALLVALUE PUSH5 0x3662623564 PUSH4 0x61323030 BALANCE PUSH9 0x747470733A2F2F7365 PUSH17 0x6F6C69612E696E667572612E696F2F7633 0x2F PUSH3 0x393739 CALLVALUE PUSH2 0x6431 PUSH5 0x6466383464 PUSH7 0x62386333346436 PUSH3 0x623564 PUSH4 0x61323030 BALANCE STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP PUSH18 0x9709ECFA91A80626FF3989D68F67F5B1DD1 0x2D PUSH9 0x747470733A2F2F6170 PUSH10 0x2E617661782E6E657477 PUSH16 0x726B2F6578742F62632F432F72706368 PUSH21 0x7470733A2F2F7270632E616E6B722E636F6D2F6273 PUSH4 0x5F746573 PUSH21 0x6E65745F63686170656C68747470733A2F2F727063 0x2D PUSH14 0x756D6261692E6D61746963766967 PUSH10 0x6C2E636F6D885CB69240 0xA9 CALLDATALOAD 0xD6 ORIGIN 0xD7 SWAP13 BALANCE PUSH18 0x9709ECFA91A80626FF3989D68F67F5B1DD1 0x2D PUSH9 0x747470733A2F2F676F PUSH6 0x726C692D726F PUSH13 0x6C75702E617262697472756D2E PUSH10 0x6F2F7270636874747073 GASPRICE 0x2F 0x2F PUSH2 0x7069 0x2E PUSH2 0x7661 PUSH25 0x2D746573742E6E6574776F726B2F6578742F62632F432F7270 PUSH4 0x68747470 PUSH20 0x3A2F2F6273632D6461746173656564312E62696E PUSH2 0x6E63 PUSH6 0x2E6F72676874 PUSH21 0x70733A2F2F676F65726C692E696E667572612E696F 0x2F PUSH23 0x332F623937393461643164646638346466623863333464 CALLDATASIZE PUSH3 0x623564 PUSH4 0x61323030 BALANCE LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI MOD 0xDC PUSH3 0xAE51C1 INVALID 0xD8 0x1F SELFDESTRUCT 0xA7 0x25 CALLDATACOPY TIMESTAMP 0xB8 0xB7 GT 0xFC EXP PUSH4 0x370BAA2D CALLDATASIZE 0xA7 0xE9 AND CALLVALUE LOG1 EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ",
              "sourceMap": "440:3712:54:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;310:31:55;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1897:99;;;:::i;:::-;;;;;;;:::i;946:1448:54:-;;;:::i;:::-;;2004:507:55;;;:::i;:::-;;;;;;;:::i;825:28:22:-;;;;;;;;;;;;2240:14:56;;2233:22;2215:41;;2203:2;2188:18;825:28:22;2075:187:56;310:31:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;310:31:55;;;;;;;-1:-1:-1;;;;;;;310:31:55;;:::o;1897:99::-;1933:12;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1933:12:55;1965:23;1974:13;1965:8;:23::i;:::-;1958:30;;1897:99;:::o;946:1448:54:-;1010:31;;-1:-1:-1;;;1010:31:54;;2854:2:56;1010:31:54;;;2836:21:56;2893:2;2873:18;;;2866:30;-1:-1:-1;;;2912:18:56;;;2905:47;981:26:54;;-1:-1:-1;;;;;;;;;;;1010:10:54;;;2969:18:56;;1010:31:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1068:27;;-1:-1:-1;;;1068:27:54;;3389:2:56;1068:27:54;;;3371:21:56;3428:2;3408:18;;;3401:30;-1:-1:-1;;;3447:18:56;;;3440:43;981:60:54;;-1:-1:-1;1052:13:54;;-1:-1:-1;;;;;;;;;;;1068:10:54;;;3500:18:56;;1068:27:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1122;;-1:-1:-1;;;;;;1122:27:54;;;;;3675:25:56;;;1052:43:54;;-1:-1:-1;1106:13:54;;-1:-1:-1;;;;;;;;;;;1122:7:54;;;3648:18:56;;1122:27:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1106:43;;1166:18;1188:1;1166:23;1162:258;;1213:195;;-1:-1:-1;;;1213:195:54;;4208:2:56;1213:195:54;;;4190:21:56;4247:3;4227:18;;;4220:31;4287:34;4267:18;;;4260:62;4358:34;4338:18;;;4331:62;4430:34;4409:19;;;4402:63;4502:34;4481:19;;;4474:63;-1:-1:-1;;;4553:19:56;;;4546:45;4608:19;;1213:195:54;;;;;;;;1162:258;1434:5;1443:1;1434:10;1430:71;;1468:21;;-1:-1:-1;;;1468:21:54;;;;;;;;;;;1430:71;1511:37;;-1:-1:-1;;;1511:37:54;;;;;3675:25:56;;;-1:-1:-1;;;;;;;;;;;1511:17:54;;;3648:18:56;;1511:37:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1576:27:54;;-1:-1:-1;;;;;;1576:27:54;;;;;3675:25:56;;;1559:14:54;;-1:-1:-1;;;;;;;;;;;;1576:7:54;-1:-1:-1;1576:7:54;;3648:18:56;;1576:27:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1559:44;;1681:6;1660:28;;;;;:::i;:::-;-1:-1:-1;;;;;4802:32:56;;;4784:51;;4772:2;4757:18;1660:28:54;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1650:7:54;:38;;-1:-1:-1;;;;;;1650:38:54;-1:-1:-1;;;;;1650:38:54;;;;;;;;;;1706:10;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1699:4:54;:17;;-1:-1:-1;;;;;;1699:17:54;-1:-1:-1;;;;;1699:17:54;;;;;;;;;1766:7;;1736:54;;1766:7;;;1736:54;;;:::i;:::-;-1:-1:-1;;;;;5076:15:56;;;5058:34;;5128:15;;5123:2;5108:18;;5101:43;5008:2;4993:18;1736:54:54;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1727:6:54;:63;;-1:-1:-1;;;;;;1727:63:54;-1:-1:-1;;;;;1727:63:54;;;;;;1938:7;;1918:29;;-1:-1:-1;;;1918:29:54;;1938:7;;1918:29;;;4784:51:56;1803:170:54;;-1:-1:-1;;;;;;;;;;;1918:11:54;;;4757:18:56;;1918:29:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1918:29:54;;;;;;;;;;;;:::i;:::-;1835:127;;;;;;;;:::i;:::-;;;;;;;;;;;;;1803:17;:170::i;:::-;2116:4;;2096:26;;-1:-1:-1;;;2096:26:54;;-1:-1:-1;;;;;2116:4:54;;;2096:26;;;4784:51:56;1984:164:54;;-1:-1:-1;;;;;;;;;;;2096:11:54;;;4757:18:56;;2096:26:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2096:26:54;;;;;;;;;;;;:::i;:::-;2016:121;;;;;;;;:::i;1984:164::-;2293:6;;2273:28;;-1:-1:-1;;;2273:28:54;;-1:-1:-1;;;;;2293:6:54;;;2273:28;;;4784:51:56;2159:168:54;;-1:-1:-1;;;;;;;;;;;2273:11:54;;;4757:18:56;;2273:28:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2273:28:54;;;;;;;;;;;;:::i;:::-;2191:125;;;;;;;;:::i;2159:168::-;-1:-1:-1;;;;;;;;;;;317:37:21;;-1:-1:-1;;;;;2338:16:54;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2367:19;:17;:19::i;:::-;970:1424;;;;946:1448::o;2004:507:55:-;2045:13;2071:19;2093:13;2071:35;;2117:29;-1:-1:-1;;;;;;;;;;;317:37:21;;-1:-1:-1;;;;;2149:10:55;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2149:12:55;;;;;;;;;;;;:::i;:::-;2117:44;;2177:9;2172:300;2196:10;:17;2192:1;:21;2172:300;;;-1:-1:-1;;;;;;;;;;;317:37:21;;-1:-1:-1;;;;;2239:19:55;;2259:10;2270:1;2259:13;;;;;;;;:::i;:::-;;;;;;;2273:1;2259:16;;;;;;;:::i;:::-;;;;;2239:37;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2239:37:55;;;;;;;;-1:-1:-1;;2239:37:55;;;;;;;;;;;;:::i;:::-;;;2235:226;2437:8;2235:226;;2317:11;2300:13;:28;2296:100;;2360:10;2371:1;2360:13;;;;;;;;:::i;:::-;;;;;;;2374:1;2360:16;;;;;;;:::i;:::-;;;;;2353:23;;;;;2004:507;:::o;2296:100::-;2215:3;;;;:::i;:::-;;;;2172:300;;;;2489:14;;-1:-1:-1;;;2489:14:55;;;;;;;;;;;2402:25:54;:::o;3866:554:23:-;3927:18;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:18:23;3966:7;3977:1;3966:12;3958:75;;;;-1:-1:-1;;;3958:75:23;;10592:2:56;3958:75:23;;;10574:21:56;10631:2;10611:18;;;10604:30;10670:34;10650:18;;;10643:62;-1:-1:-1;;;10721:18:56;;;10714:48;10779:19;;3958:75:23;10390:414:56;3958:75:23;4044:21;:19;:21::i;:::-;4076:24;4103:18;;;:9;:18;;;;;4076:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4142:6;4149:10;4142:18;;;;;;:::i;:::-;;;;;;;;;;;;;4134:26;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4134:26:23;;;;-1:-1:-1;;;4195:13:23;;;;4299:20;;-1:-1:-1;;;4299:20:23;;;;;3675:25:56;;;4195:13:23;;-1:-1:-1;4195:18:23;;;-1:-1:-1;;;;;;;;;;;4299:11:23;;;3648:18:56;;4299:20:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4299:20:23;;;;;;;;;;;;:::i;:::-;4235:100;;;;;;;;:::i;:::-;;;;;;;;;;;;;4173:174;;;;;-1:-1:-1;;;4173:174:23;;;;;;;;:::i;:::-;;4368:44;4394:10;4406:5;4368:25;:44::i;:::-;4360:52;3866:554;-1:-1:-1;;;3866:554:23:o;929:129:31:-;991:59;1046:2;1007:42;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1007:42:31;;;;;;;;;;;;;;-1:-1:-1;;;;;1007:42:31;-1:-1:-1;;;1007:42:31;;;991:15;:59::i;:::-;929:129;:::o;944:945:55:-;-1:-1:-1;;;;;;;;;;;317:37:21;;-1:-1:-1;;;;;1045:14:55;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1045:16:55;;;;;;;;;;;;:::i;:::-;1038:4;;:23;;:4;:23;:::i;:::-;;1093:4;1079:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;1072:4;:43;;;;;;:::i;:::-;-1:-1:-1;1153:26:55;;-1:-1:-1;;;1153:26:55;;1165:13;1153:26;;;3675:25:56;1126:24:55;;-1:-1:-1;;;;;;;;;;;1153:11:55;;;3648:18:56;;1153:26:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1153:26:55;;;;;;;;;;;;:::i;:::-;1126:53;;1211:4;1231:10;1217:34;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1217:34:55;;;;;;;;;;1197:55;;;1217:34;1197:55;;:::i;:::-;;;;;;;;;;;;;1190:4;:62;;;;;;:::i;:::-;-1:-1:-1;1315:11:55;:18;1265:23;;1301:11;1346:211;1370:3;1366:1;:7;1346:211;;;1472:11;:14;;-1:-1:-1;;;;;;;;;;;1395:18:55;;;1432:9;;1395:18;;1460:11;;1472;1484:1;;1472:14;;;;;;:::i;:::-;;;;;;;;;;;;;;:19;;;1460:32;;;;;;-1:-1:-1;;;;;;1460:32:55;;;-1:-1:-1;;;;;1472:19:55;;;1460:32;;;4784:51:56;4757:18;;1460:32:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1460:32:55;;;;;;;;;;;;:::i;:::-;1511:11;1523:1;1511:14;;;;;;;;:::i;:::-;;;;;;;;;;;:19;;1395:150;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1395:150:55;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1375:3:55;;;;:::i;:::-;;;;1346:211;;;;1569:23;1609:4;-1:-1:-1;;;;;1609:13:55;;:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1609:15:55;;;;;;;;;;;;:::i;:::-;;;1605:159;;1737:15;:13;:15::i;:::-;1725:27;;1605:159;;;1681:10;;-1:-1:-1;1605:159:55;1786:55;;-1:-1:-1;;;1786:55:55;;-1:-1:-1;;;;;;;;;;;1786:18:55;;;:55;;1805:9;;1831;;1786:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1786:55:55;;;;;;;;;;;;:::i;:::-;1852:29;;-1:-1:-1;;;1852:29:55;;1774:67;;-1:-1:-1;;;;;;;;;;;;1852:12:55;;;:29;;1774:67;;1876:4;;1852:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;982:907;;;;944:945::o;7955:2416:23:-;8009:20;;;;8005:33;;;7955:2416::o;8005:33::-;8050:20;:27;;-1:-1:-1;;8050:27:23;8073:4;8050:27;;;8177:86;;;;;;;;;;;;-1:-1:-1;;;8177:86:23;;;;;;;;8212:50;;;;;;;;;;;;;-1:-1:-1;;;8212:50:23;;;;;;;8231:5;8212:50;;;;;;;;;;;;;;-1:-1:-1;;;8212:50:23;;;;;;;;;;;;;;8177:86;;:25;:86::i;:::-;8274:150;;;;;;;;;;;;;;-1:-1:-1;;;8274:150:23;;;8325:88;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8325:88:23;;;;;;;8346:1;8325:88;;;;;;;;;;;;;;;;;;;;;;;8274:25;:150::i;:::-;8435:147;;;;;;;;;;;;;;-1:-1:-1;;;8435:147:23;;;8485:86;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8485:86:23;;;;;;;8505:1;8485:86;;;;;;;;;;;;;;;;;;;;;;;8435:25;:147::i;:::-;8593:157;;;;;;;;;;;;;;-1:-1:-1;;;8593:157:23;;;8644:95;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8644:95:23;;;;;;;8665:8;8644:95;;;;;;;;;;;;;;;;;;;;;;;8593:25;:157::i;:::-;8761:95;;;;;;;;;;;;;;-1:-1:-1;;;8761:95:23;;;8799:56;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8799:56:23;;;;;;;8821:2;8799:56;;;;;;;;;;;;;;;;;;;;;;;;8761:25;:95::i;:::-;8867:109;;;;;;;;;;;;;;-1:-1:-1;;;8867:109:23;;;8912:63;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8912:63:23;;;;;;;8941:3;8912:63;;;;;;;;;;;;;;;;;;;;;;;;8867:25;:109::i;:::-;8987:107;;;;;;;;;;;;;;-1:-1:-1;;;8987:107:23;;;9029:64;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9029:64:23;;;;;;;9055:5;9029:64;;;;;;;;;;;;;;;;;;;;;;;;8987:25;:107::i;:::-;9105:155;;;;;;;;;;;;;;-1:-1:-1;;;9105:155:23;;;9168:81;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9168:81:23;;;;;;;9201:6;9168:81;;;;;;;;;;;;;;;;;;;;;;;9105:25;:155::i;:::-;9271:109;;;;;;;;;;;;;;-1:-1:-1;;;9271:109:23;;;9314:65;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9314:65:23;;;;;;;9341:5;9314:65;;;;;;;;;;;;;;;;;;;;;;;;9271:25;:109::i;:::-;9391:90;;;;;;;;;;;;;;-1:-1:-1;;;9391:90:23;;;9428:52;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9428:52:23;;;;;;;9449:3;9428:52;;;;;;;;;;;;;;;;;;;;;;;;9391:25;:90::i;:::-;9492:140;;;;;;;;;;;;;;-1:-1:-1;;;9492:140:23;;;9550:71;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9550:71:23;;;;;;;9578:5;9550:71;;;;;;;;;;;;;;;;;;;;;;;9492:25;:140::i;:::-;9643:110;;;;;;;;;;;;;;-1:-1:-1;;;9643:110:23;;;9682:70;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9682:70:23;;;;;;;9705:5;9682:70;;;;;;;;;;;;;;;;;;;;;;;9643:25;:110::i;:::-;9764:149;;;;;;;;;;;;;;-1:-1:-1;;;9764:149:23;;;9822:80;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9822:80:23;;;;;;;9850:5;9822:80;;;;;;;;;;;;;;;;;;;;;;;9764:25;:149::i;:::-;9924:139;;;;;;;;;;;;;;-1:-1:-1;;;9924:139:23;;;9983:69;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;9983:69:23;;;;;;;10012:2;9983:69;;;;;;;;;;;;;;;;;;;;;;;9924:25;:139::i;:::-;10074:174;;;;;;;;;;;;;;;;;;10154:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10191:2;10154:83;;;;;;;;;;;;;;;;;;;;;;;10074:25;:174::i;:::-;10259:104;;;;;;;;;;;;;;-1:-1:-1;;;10259:104:23;;;10301:61;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;10301:61:23;;;;;;;10327:3;10301:61;;;;;;;;;;;;;;;;;;;;;;;;10259:25;:104::i;6579:1241::-;6677:12;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6677:12:23;6712:5;:12;;;6706:26;6736:1;6706:31;6702:1088;;6758:21;;-1:-1:-1;;;6758:21:23;;-1:-1:-1;;;;;;;;;;;6758:9:23;;;:21;;6768:10;;6758:21;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6758:21:23;;;;;;;;;;;;:::i;:::-;;;6754:1025;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6924:21;6972:20;6981:10;6972:8;:20::i;:::-;6955:50;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6955:50:23;;;;;;;;;7029:24;;6955:50;;-1:-1:-1;7029:24:23;;7025:218;;;-1:-1:-1;;;;;;;;;;;2019:37:23;;-1:-1:-1;;;;;7093:8:23;;7102:7;7111:14;7126:10;7111:26;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;;7093:45:23;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7093:45:23;;;;;;;;;;;;:::i;:::-;7078:12;;;:60;7025:218;;;7202:21;;-1:-1:-1;;;7202:21:23;;-1:-1:-1;;;;;;;;;;;7202:12:23;;;:21;;7215:7;;7202:21;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7202:21:23;;;;;;;;;;;;:::i;:::-;7187:12;;;:36;7025:218;7324:26;7460:10;7423:48;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7423:48:23;;;;;;;;;;7374:99;;;;;:::i;:::-;;;;-1:-1:-1;;7374:99:23;;;;;;;;;;;;;;;-1:-1:-1;;;;;7374:99:23;-1:-1:-1;;;7374:99:23;;;7524:14;;;;;;;;;7496:24;;;;;7374:99;;-1:-1:-1;7496:42:23;;;:77;;-1:-1:-1;7548:12:23;;;;7542:26;:31;7496:77;7492:272;;;7717:3;7711:10;7705:3;7701:2;7697:12;7690:32;7492:272;6905:874;;6880:899;6754:1025;;;6836:12;;;:27;6754:1025;-1:-1:-1;7807:5:23;6579:1241;;;;;:::o;187:384:31:-;282:14;;135:42;459:2;446:16;;258:21;;282:14;446:16;135:42;496:5;485:68;476:77;;411:153;;187:384;:::o;10456:311:23:-;10560:20;10583:5;:12;;;10560:35;;10635:6;10606:14;10621:10;10606:26;;;;;;:::i;:::-;;;;;;;;;;;;;:35;;;;;;:::i;:::-;-1:-1:-1;10652:17:23;;;;;;;;-1:-1:-1;10652:17:23;;:12;;;:17;10680:27;10689:10;10652:5;10680:8;:27::i;:::-;10718:12;;;;:21;-1:-1:-1;10456:311:23:o;5976:463::-;6035:13;6061:17;6087:3;6061:30;;6102:17;6132:4;:11;6122:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6122:22:23;;6102:42;;6160:9;6155:247;6179:4;:11;6175:1;:15;6155:247;;;6212:8;6223:4;6228:1;6223:7;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;6223:7:23;;-1:-1:-1;;;;6249:9:23;;;;;:22;;-1:-1:-1;;;;;;;;;;6262:9:23;;;;6249:22;6245:146;;;6309:13;6320:2;6309:8;;;;:13;:::i;:::-;6302:21;;6292:4;6297:1;6292:7;;;;;;;;:::i;:::-;;;;:31;-1:-1:-1;;;;;6292:31:23;;;;;;;;;6245:146;;;6374:1;6364:4;6369:1;6364:7;;;;;;;;:::i;:::-;;;;:11;-1:-1:-1;;;;;6364:11:23;;;;;;;;;6245:146;-1:-1:-1;6192:3:23;;;;:::i;:::-;;;;6155:247;;;-1:-1:-1;6426:4:23;5976:463;-1:-1:-1;;;5976:463:23:o;4494:1203::-;4618:10;4612:24;4640:1;4612:29;4590:156;;;;-1:-1:-1;;;4590:156:23;;20619:2:56;4590:156:23;;;20601:21:56;20658:2;20638:18;;;20631:30;20697:34;20677:18;;;20670:62;20768:34;20748:18;;;20741:62;-1:-1:-1;;;20819:19:56;;;20812:44;20873:19;;4590:156:23;20417:481:56;4590:156:23;4767:5;:13;;;4784:1;4767:18;4759:90;;;;-1:-1:-1;;;4759:90:23;;21105:2:56;4759:90:23;;;21087:21:56;21144:2;21124:18;;;21117:30;21183:34;21163:18;;;21156:62;21254:29;21234:18;;;21227:57;21301:19;;4759:90:23;20903:423:56;4759:90:23;4862:21;:19;:21::i;:::-;4931:13;;;;;4894:24;4921;;;:9;:24;;;;;;4894:51;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4986:10;4980:24;5008:1;4980:29;:93;;;;5061:10;5045:28;;;;;;5029:10;5013:28;;;;;;:60;4980:93;5236:13;;;;5224:26;;-1:-1:-1;;;5224:26:23;;;;;3675:25:56;;;;-1:-1:-1;;;;;;;;;;;5224:11:23;;;3648:18:56;;5224:26:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5224:26:23;;;;;;;;;;;;:::i;:::-;5317:10;5113:261;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4958:442;;;;;-1:-1:-1;;;4958:442:23;;;;;;;;:::i;:::-;;5413:18;5434:6;5441:10;5434:18;;;;;;:::i;:::-;;;;;;;;;;;;;:26;;;5413:47;;5478:9;:21;5488:10;5478:21;;;;;;;;;;;;5471:28;;;;:::i;:::-;5546:95;;;;;;;;5559:5;:10;;;5546:95;;;;5580:5;:13;;;5546:95;;;;5607:10;5546:95;;;;5627:5;:12;;;5546:95;;;5512:6;5519:10;5512:18;;;;;;:::i;:::-;;;;;;;;;;;;;;:129;;:18;;:129;;:18;:129;:::i;:::-;-1:-1:-1;5512:129:23;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5512:129:23;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;5662:13:23;;;;;5652:24;;;;:9;:24;;;;;;:37;5679:10;5652:24;:37;:::i;:::-;;4579:1118;;4494:1203;;:::o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:180:56:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:56;;14:180;-1:-1:-1;14:180:56:o;199:250::-;284:1;294:113;308:6;305:1;302:13;294:113;;;384:11;;;378:18;365:11;;;358:39;330:2;323:10;294:113;;;-1:-1:-1;;441:1:56;423:16;;416:27;199:250::o;454:271::-;496:3;534:5;528:12;561:6;556:3;549:19;577:76;646:6;639:4;634:3;630:14;623:4;616:5;612:16;577:76;:::i;:::-;707:2;686:15;-1:-1:-1;;682:29:56;673:39;;;;714:4;669:50;;454:271;-1:-1:-1;;454:271:56:o;730:317::-;907:2;896:9;889:21;870:4;927:45;968:2;957:9;953:18;945:6;927:45;:::i;:::-;919:53;;1037:1;1033;1028:3;1024:11;1020:19;1012:6;1008:32;1003:2;992:9;988:18;981:60;730:317;;;;;:::o;1052:793::-;1227:2;1216:9;1209:21;1190:4;1265:6;1259:13;1308:4;1303:2;1292:9;1288:18;1281:32;1336:52;1383:3;1372:9;1368:19;1354:12;1336:52;:::i;:::-;1322:66;;1442:2;1434:6;1430:15;1424:22;1419:2;1408:9;1404:18;1397:50;1496:2;1488:6;1484:15;1478:22;1523:2;1519:7;1590:2;1578:9;1570:6;1566:22;1562:31;1557:2;1546:9;1542:18;1535:59;1617:41;1651:6;1635:14;1617:41;:::i;:::-;1603:55;;1707:2;1699:6;1695:15;1689:22;1667:44;;1777:2;1765:9;1757:6;1753:22;1749:31;1742:4;1731:9;1727:20;1720:61;;1798:41;1832:6;1816:14;1798:41;:::i;:::-;1790:49;1052:793;-1:-1:-1;;;;;1052:793:56:o;1850:220::-;1999:2;1988:9;1981:21;1962:4;2019:45;2060:2;2049:9;2045:18;2037:6;2019:45;:::i;2267:380::-;2346:1;2342:12;;;;2389;;;2410:61;;2464:4;2456:6;2452:17;2442:27;;2410:61;2517:2;2509:6;2506:14;2486:18;2483:38;2480:161;;2563:10;2558:3;2554:20;2551:1;2544:31;2598:4;2595:1;2588:15;2626:4;2623:1;2616:15;2480:161;;2267:380;;;:::o;2998:184::-;3068:6;3121:2;3109:9;3100:7;3096:23;3092:32;3089:52;;;3137:1;3134;3127:12;3089:52;-1:-1:-1;3160:16:56;;2998:184;-1:-1:-1;2998:184:56:o;3711:290::-;3781:6;3834:2;3822:9;3813:7;3809:23;3805:32;3802:52;;;3850:1;3847;3840:12;3802:52;3876:16;;-1:-1:-1;;;;;3921:31:56;;3911:42;;3901:70;;3967:1;3964;3957:12;5155:127;5216:10;5211:3;5207:20;5204:1;5197:31;5247:4;5244:1;5237:15;5271:4;5268:1;5261:15;5287:251;5359:2;5353:9;;;5389:15;;5434:18;5419:34;;5455:22;;;5416:62;5413:88;;;5481:18;;:::i;:::-;5517:2;5510:22;5287:251;:::o;5543:253::-;5615:2;5609:9;5657:4;5645:17;;5692:18;5677:34;;5713:22;;;5674:62;5671:88;;;5739:18;;:::i;5801:275::-;5872:2;5866:9;5937:2;5918:13;;-1:-1:-1;;5914:27:56;5902:40;;5972:18;5957:34;;5993:22;;;5954:62;5951:88;;;6019:18;;:::i;:::-;6055:2;6048:22;5801:275;;-1:-1:-1;5801:275:56:o;6081:510::-;6135:5;6188:3;6181:4;6173:6;6169:17;6165:27;6155:55;;6206:1;6203;6196:12;6155:55;6235:6;6229:13;6261:18;6257:2;6254:26;6251:52;;;6283:18;;:::i;:::-;6327:55;6370:2;6351:13;;-1:-1:-1;;6347:27:56;6376:4;6343:38;6327:55;:::i;:::-;6407:2;6398:7;6391:19;6453:3;6446:4;6441:2;6433:6;6429:15;6425:26;6422:35;6419:55;;;6470:1;6467;6460:12;6419:55;6483:77;6557:2;6550:4;6541:7;6537:18;6530:4;6522:6;6518:17;6483:77;:::i;:::-;6578:7;6081:510;-1:-1:-1;;;;6081:510:56:o;6596:337::-;6676:6;6729:2;6717:9;6708:7;6704:23;6700:32;6697:52;;;6745:1;6742;6735:12;6697:52;6778:9;6772:16;6811:18;6803:6;6800:30;6797:50;;;6843:1;6840;6833:12;6797:50;6866:61;6919:7;6910:6;6899:9;6895:22;6866:61;:::i;6938:452::-;7190:32;7185:3;7178:45;7160:3;7252:6;7246:13;7268:75;7336:6;7331:2;7326:3;7322:12;7315:4;7307:6;7303:17;7268:75;:::i;:::-;7363:16;;;;7381:2;7359:25;;6938:452;-1:-1:-1;;6938:452:56:o;7395:449::-;7647:29;7642:3;7635:42;7617:3;7706:6;7700:13;7722:75;7790:6;7785:2;7780:3;7776:12;7769:4;7761:6;7757:17;7722:75;:::i;:::-;7817:16;;;;7835:2;7813:25;;7395:449;-1:-1:-1;;7395:449:56:o;7849:451::-;8101:31;8096:3;8089:44;8071:3;8162:6;8156:13;8178:75;8246:6;8241:2;8236:3;8232:12;8225:4;8217:6;8213:17;8178:75;:::i;:::-;8273:16;;;;8291:2;8269:25;;7849:451;-1:-1:-1;;7849:451:56:o;8305:1676::-;8433:6;8464:2;8507;8495:9;8486:7;8482:23;8478:32;8475:52;;;8523:1;8520;8513:12;8475:52;8556:9;8550:16;8585:18;8626:2;8618:6;8615:14;8612:34;;;8642:1;8639;8632:12;8612:34;8680:6;8669:9;8665:22;8655:32;;8725:7;8718:4;8714:2;8710:13;8706:27;8696:55;;8747:1;8744;8737:12;8696:55;8776:2;8770:9;8798:2;8794;8791:10;8788:36;;;8804:18;;:::i;:::-;8844:36;8876:2;8871;8868:1;8864:10;8860:19;8844:36;:::i;:::-;8914:15;;;8996:1;8992:10;;;;8984:19;;8980:28;;;8945:12;;;;9020:19;;;9017:39;;;9052:1;9049;9042:12;9017:39;9084:2;9080;9076:11;9096:855;9112:6;9107:3;9104:15;9096:855;;;9191:3;9185:10;9227:2;9214:11;9211:19;9208:39;;;9243:1;9240;9233:12;9208:39;9270:20;;9325:2;9317:11;;9313:25;-1:-1:-1;9303:53:56;;9352:1;9349;9342:12;9303:53;9382:22;;:::i;:::-;9430:5;9467:7;9462:2;9458;9454:11;9451:24;9448:44;;;9488:1;9485;9478:12;9448:44;9526:2;9522;9518:11;9542:336;9568:2;9564;9560:11;9553:5;9550:22;9542:336;;;9658:5;9652:12;9702:2;9687:13;9684:21;9681:41;;;9718:1;9715;9708:12;9681:41;9753:70;9815:7;9810:2;9794:13;9790:2;9786:22;9782:31;9753:70;:::i;:::-;9739:85;;-1:-1:-1;9850:14:56;;;;9584;;9542:336;;;-1:-1:-1;9891:18:56;;-1:-1:-1;;9929:12:56;;;;9129;;9096:855;;;-1:-1:-1;9970:5:56;8305:1676;-1:-1:-1;;;;;;;;8305:1676:56:o;9986:127::-;10047:10;10042:3;10038:20;10035:1;10028:31;10078:4;10075:1;10068:15;10102:4;10099:1;10092:15;10118:127;10179:10;10174:3;10170:20;10167:1;10160:31;10210:4;10207:1;10200:15;10234:4;10231:1;10224:15;10250:135;10289:3;10310:17;;;10307:43;;10330:18;;:::i;:::-;-1:-1:-1;10377:1:56;10366:13;;10250:135::o;10809:289::-;10940:3;10978:6;10972:13;10994:66;11053:6;11048:3;11041:4;11033:6;11029:17;10994:66;:::i;:::-;11076:16;;;;;10809:289;-1:-1:-1;;10809:289:56:o;11103:671::-;11466:34;11461:3;11454:47;-1:-1:-1;;;11526:2:56;11521:3;11517:12;11510:35;11436:3;11574:6;11568:13;11590:73;11656:6;11651:2;11646:3;11642:12;11637:2;11629:6;11625:15;11590:73;:::i;:::-;-1:-1:-1;;;11722:2:56;11682:16;;;;11714:11;;;11707:34;-1:-1:-1;11765:2:56;11757:11;;11103:671;-1:-1:-1;11103:671:56:o;11905:545::-;12007:2;12002:3;11999:11;11996:448;;;12043:1;12068:5;12064:2;12057:17;12113:4;12109:2;12099:19;12183:2;12171:10;12167:19;12164:1;12160:27;12154:4;12150:38;12219:4;12207:10;12204:20;12201:47;;;-1:-1:-1;12242:4:56;12201:47;12297:2;12292:3;12288:12;12285:1;12281:20;12275:4;12271:31;12261:41;;12352:82;12370:2;12363:5;12360:13;12352:82;;;12415:17;;;12396:1;12385:13;12352:82;;;12356:3;;;11996:448;11905:545;;;:::o;12626:1352::-;12752:3;12746:10;12779:18;12771:6;12768:30;12765:56;;;12801:18;;:::i;:::-;12830:97;12920:6;12880:38;12912:4;12906:11;12880:38;:::i;:::-;12874:4;12830:97;:::i;:::-;12982:4;;13046:2;13035:14;;13063:1;13058:663;;;;13765:1;13782:6;13779:89;;;-1:-1:-1;13834:19:56;;;13828:26;13779:89;-1:-1:-1;;12583:1:56;12579:11;;;12575:24;12571:29;12561:40;12607:1;12603:11;;;12558:57;13881:81;;13028:944;;13058:663;11852:1;11845:14;;;11889:4;11876:18;;-1:-1:-1;;13094:20:56;;;13212:236;13226:7;13223:1;13220:14;13212:236;;;13315:19;;;13309:26;13294:42;;13407:27;;;;13375:1;13363:14;;;;13242:19;;13212:236;;;13216:3;13476:6;13467:7;13464:19;13461:201;;;13537:19;;;13531:26;-1:-1:-1;;13620:1:56;13616:14;;;13632:3;13612:24;13608:37;13604:42;13589:58;13574:74;;13461:201;-1:-1:-1;;;;;13708:1:56;13692:14;;;13688:22;13675:36;;-1:-1:-1;12626:1352:56:o;13983:722::-;14033:3;14074:5;14068:12;14103:36;14129:9;14103:36;:::i;:::-;14158:1;14175:18;;;14202:133;;;;14349:1;14344:355;;;;14168:531;;14202:133;-1:-1:-1;;14235:24:56;;14223:37;;14308:14;;14301:22;14289:35;;14280:45;;;-1:-1:-1;14202:133:56;;14344:355;14375:5;14372:1;14365:16;14404:4;14449:2;14446:1;14436:16;14474:1;14488:165;14502:6;14499:1;14496:13;14488:165;;;14580:14;;14567:11;;;14560:35;14623:16;;;;14517:10;;14488:165;;;14492:3;;;14682:6;14677:3;14673:16;14666:23;;14168:531;;;;;13983:722;;;;:::o;14710:363::-;14929:3;14960:38;14994:3;14986:6;14960:38;:::i;:::-;-1:-1:-1;;;15007:30:56;;15064:2;15053:14;;14710:363;-1:-1:-1;;;14710:363:56:o;15078:445::-;15299:3;15337:6;15331:13;15353:66;15412:6;15407:3;15400:4;15392:6;15388:17;15353:66;:::i;:::-;-1:-1:-1;;;15441:16:56;;15466:22;;;-1:-1:-1;15515:1:56;15504:13;;15078:445;-1:-1:-1;15078:445:56:o;15528:389::-;15704:3;15732:38;15766:3;15758:6;15732:38;:::i;:::-;15799:6;15793:13;15815:65;15873:6;15869:2;15862:4;15854:6;15850:17;15815:65;:::i;:::-;15896:15;;15528:389;-1:-1:-1;;;;15528:389:56:o;15922:782::-;15982:3;16023:5;16017:12;16052:36;16078:9;16052:36;:::i;:::-;16097:19;;;16135:4;16158:1;16175:18;;;16202:146;;;;16362:1;16357:341;;;;16168:530;;16202:146;-1:-1:-1;;16244:24:56;;16230:12;;;16223:46;16316:14;;16309:22;16306:1;16302:30;16293:40;;16289:49;;;-1:-1:-1;16202:146:56;;16357:341;16388:5;16385:1;16378:16;16435:2;16432:1;16422:16;16460:1;16474:174;16488:6;16485:1;16482:13;16474:174;;;16575:14;;16557:11;;;16553:20;;16546:44;16618:16;;;;16503:10;;16474:174;;;16672:11;;16668:20;;;-1:-1:-1;;16168:530:56;;;;;;15922:782;;;;:::o;16709:561::-;16951:2;16940:9;16933:21;16914:4;16977:45;17018:2;17007:9;17003:18;16995:6;16977:45;:::i;:::-;17070:9;17062:6;17058:22;17053:2;17042:9;17038:18;17031:50;17104:33;17130:6;17122;17104:33;:::i;:::-;17090:47;;17185:9;17177:6;17173:22;17168:2;17157:9;17153:18;17146:50;17213:51;17257:6;17249;17213:51;:::i;:::-;17205:59;16709:561;-1:-1:-1;;;;;;16709:561:56:o;17275:1020::-;17368:6;17421:2;17409:9;17400:7;17396:23;17392:32;17389:52;;;17437:1;17434;17427:12;17389:52;17470:9;17464:16;17499:18;17540:2;17532:6;17529:14;17526:34;;;17556:1;17553;17546:12;17526:34;17579:22;;;;17635:4;17617:16;;;17613:27;17610:47;;;17653:1;17650;17643:12;17610:47;17679:22;;:::i;:::-;17732:2;17726:9;17760:2;17750:8;17747:16;17744:36;;;17776:1;17773;17766:12;17744:36;17803:56;17851:7;17840:8;17836:2;17832:17;17803:56;:::i;:::-;17796:5;17789:71;;17906:2;17902;17898:11;17892:18;17887:2;17880:5;17876:14;17869:42;17950:2;17946;17942:11;17936:18;17979:2;17969:8;17966:16;17963:36;;;17995:1;17992;17985:12;17963:36;18031:56;18079:7;18068:8;18064:2;18060:17;18031:56;:::i;:::-;18026:2;18019:5;18015:14;18008:80;;18127:2;18123;18119:11;18113:18;18156:2;18146:8;18143:16;18140:36;;;18172:1;18169;18162:12;18140:36;18208:56;18256:7;18245:8;18241:2;18237:17;18208:56;:::i;:::-;18203:2;18192:14;;18185:80;-1:-1:-1;18196:5:56;17275:1020;-1:-1:-1;;;;;17275:1020:56:o;18300:636::-;18598:2;18587:9;18580:21;18561:4;18624:45;18665:2;18654:9;18650:18;18642:6;18624:45;:::i;:::-;18700:9;18692:6;18688:22;18746:2;18741;18730:9;18726:18;18719:30;18773:2;18765:6;18758:18;-1:-1:-1;;;18804:2:56;18796:6;18792:15;18785:38;18867:2;18863;18859:11;18854:2;18843:9;18839:18;18832:39;;18888:42;18926:2;18918:6;18914:15;18906:6;18888:42;:::i;18941:398::-;19135:2;19124:9;19117:21;19098:4;19161:45;19202:2;19191:9;19187:18;19179:6;19161:45;:::i;:::-;19254:9;19246:6;19242:22;19237:2;19226:9;19222:18;19215:50;19282:51;19326:6;19318;19282:51;:::i;19344:459::-;19576:3;19614:6;19608:13;19630:66;19689:6;19684:3;19677:4;19669:6;19665:17;19630:66;:::i;:::-;-1:-1:-1;;;19718:16:56;;19743:25;;;-1:-1:-1;19795:1:56;19784:13;;19344:459;-1:-1:-1;19344:459:56:o;19808:448::-;-1:-1:-1;;;20065:3:56;20058:31;20040:3;20118:6;20112:13;20134:75;20202:6;20197:2;20192:3;20188:12;20181:4;20173:6;20169:17;20134:75;:::i;:::-;20229:16;;;;20247:2;20225:25;;19808:448;-1:-1:-1;;19808:448:56:o;20261:151::-;20351:4;20344:12;;;20330;;;20326:31;;20369:14;;20366:40;;;20386:18;;:::i;21331:1060::-;21843:34;21838:3;21831:47;-1:-1:-1;;;21903:2:56;21898:3;21894:12;21887:39;21813:3;21955:6;21949:13;21971:73;22037:6;22032:2;22027:3;22023:12;22018:2;22010:6;22006:15;21971:73;:::i;:::-;-1:-1:-1;;;22103:2:56;22063:16;;;22095:11;;;22088:69;22182:13;;22204:74;22182:13;22264:2;22256:11;;22251:2;22239:15;;22204:74;:::i;:::-;-1:-1:-1;;;22338:2:56;22297:17;;;;22330:11;;;22323:35;22382:2;22374:11;;21331:1060;-1:-1:-1;;;;21331:1060:56:o",
              "generatedSources": [
                {
                  "ast": {
                    "nativeSrc": "0:22393:56",
                    "nodeType": "YulBlock",
                    "src": "0:22393:56",
                    "statements": [
                      {
                        "nativeSrc": "6:3:56",
                        "nodeType": "YulBlock",
                        "src": "6:3:56",
                        "statements": []
                      },
                      {
                        "body": {
                          "nativeSrc": "84:110:56",
                          "nodeType": "YulBlock",
                          "src": "84:110:56",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "130:16:56",
                                "nodeType": "YulBlock",
                                "src": "130:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "139:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "139:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "142:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "142:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "132:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "132:6:56"
                                      },
                                      "nativeSrc": "132:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "132:12:56"
                                    },
                                    "nativeSrc": "132:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "132:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "105:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "105:7:56"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "114:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "114:9:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "101:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "101:3:56"
                                    },
                                    "nativeSrc": "101:23:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "101:23:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "126:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "126:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "97:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "97:3:56"
                                },
                                "nativeSrc": "97:32:56",
                                "nodeType": "YulFunctionCall",
                                "src": "97:32:56"
                              },
                              "nativeSrc": "94:52:56",
                              "nodeType": "YulIf",
                              "src": "94:52:56"
                            },
                            {
                              "nativeSrc": "155:33:56",
                              "nodeType": "YulAssignment",
                              "src": "155:33:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "178:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "178:9:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "165:12:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "165:12:56"
                                },
                                "nativeSrc": "165:23:56",
                                "nodeType": "YulFunctionCall",
                                "src": "165:23:56"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "155:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "155:6:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256",
                        "nativeSrc": "14:180:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "50:9:56",
                            "nodeType": "YulTypedName",
                            "src": "50:9:56",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "61:7:56",
                            "nodeType": "YulTypedName",
                            "src": "61:7:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "73:6:56",
                            "nodeType": "YulTypedName",
                            "src": "73:6:56",
                            "type": ""
                          }
                        ],
                        "src": "14:180:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "265:184:56",
                          "nodeType": "YulBlock",
                          "src": "265:184:56",
                          "statements": [
                            {
                              "nativeSrc": "275:10:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "275:10:56",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "284:1:56",
                                "nodeType": "YulLiteral",
                                "src": "284:1:56",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nativeSrc": "279:1:56",
                                  "nodeType": "YulTypedName",
                                  "src": "279:1:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "344:63:56",
                                "nodeType": "YulBlock",
                                "src": "344:63:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nativeSrc": "369:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "369:3:56"
                                            },
                                            {
                                              "name": "i",
                                              "nativeSrc": "374:1:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "374:1:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "365:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "365:3:56"
                                          },
                                          "nativeSrc": "365:11:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "365:11:56"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "src",
                                                  "nativeSrc": "388:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "388:3:56"
                                                },
                                                {
                                                  "name": "i",
                                                  "nativeSrc": "393:1:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "393:1:56"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "384:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "384:3:56"
                                              },
                                              "nativeSrc": "384:11:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "384:11:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nativeSrc": "378:5:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "378:5:56"
                                          },
                                          "nativeSrc": "378:18:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "378:18:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nativeSrc": "358:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "358:6:56"
                                      },
                                      "nativeSrc": "358:39:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "358:39:56"
                                    },
                                    "nativeSrc": "358:39:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "358:39:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "305:1:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "305:1:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "308:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "308:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "302:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "302:2:56"
                                },
                                "nativeSrc": "302:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "302:13:56"
                              },
                              "nativeSrc": "294:113:56",
                              "nodeType": "YulForLoop",
                              "post": {
                                "nativeSrc": "316:19:56",
                                "nodeType": "YulBlock",
                                "src": "316:19:56",
                                "statements": [
                                  {
                                    "nativeSrc": "318:15:56",
                                    "nodeType": "YulAssignment",
                                    "src": "318:15:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "327:1:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "327:1:56"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "330:2:56",
                                          "nodeType": "YulLiteral",
                                          "src": "330:2:56",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "323:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "323:3:56"
                                      },
                                      "nativeSrc": "323:10:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "323:10:56"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "318:1:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "318:1:56"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nativeSrc": "298:3:56",
                                "nodeType": "YulBlock",
                                "src": "298:3:56",
                                "statements": []
                              },
                              "src": "294:113:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dst",
                                        "nativeSrc": "427:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "427:3:56"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "432:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "432:6:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "423:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "423:3:56"
                                    },
                                    "nativeSrc": "423:16:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "423:16:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "441:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "441:1:56",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "416:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "416:6:56"
                                },
                                "nativeSrc": "416:27:56",
                                "nodeType": "YulFunctionCall",
                                "src": "416:27:56"
                              },
                              "nativeSrc": "416:27:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "416:27:56"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory_with_cleanup",
                        "nativeSrc": "199:250:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "src",
                            "nativeSrc": "243:3:56",
                            "nodeType": "YulTypedName",
                            "src": "243:3:56",
                            "type": ""
                          },
                          {
                            "name": "dst",
                            "nativeSrc": "248:3:56",
                            "nodeType": "YulTypedName",
                            "src": "248:3:56",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nativeSrc": "253:6:56",
                            "nodeType": "YulTypedName",
                            "src": "253:6:56",
                            "type": ""
                          }
                        ],
                        "src": "199:250:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "504:221:56",
                          "nodeType": "YulBlock",
                          "src": "504:221:56",
                          "statements": [
                            {
                              "nativeSrc": "514:26:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "514:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "534:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "534:5:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "528:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "528:5:56"
                                },
                                "nativeSrc": "528:12:56",
                                "nodeType": "YulFunctionCall",
                                "src": "528:12:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "518:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "518:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "556:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "556:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "561:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "561:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "549:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "549:6:56"
                                },
                                "nativeSrc": "549:19:56",
                                "nodeType": "YulFunctionCall",
                                "src": "549:19:56"
                              },
                              "nativeSrc": "549:19:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "549:19:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "616:5:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "616:5:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "623:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "623:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "612:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "612:3:56"
                                    },
                                    "nativeSrc": "612:16:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "612:16:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "634:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "634:3:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "639:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "639:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "630:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "630:3:56"
                                    },
                                    "nativeSrc": "630:14:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "630:14:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "646:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "646:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "577:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "577:34:56"
                                },
                                "nativeSrc": "577:76:56",
                                "nodeType": "YulFunctionCall",
                                "src": "577:76:56"
                              },
                              "nativeSrc": "577:76:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "577:76:56"
                            },
                            {
                              "nativeSrc": "662:57:56",
                              "nodeType": "YulAssignment",
                              "src": "662:57:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "677:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "677:3:56"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "length",
                                                "nativeSrc": "690:6:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "690:6:56"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "698:2:56",
                                                "nodeType": "YulLiteral",
                                                "src": "698:2:56",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "686:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "686:3:56"
                                            },
                                            "nativeSrc": "686:15:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "686:15:56"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "707:2:56",
                                                "nodeType": "YulLiteral",
                                                "src": "707:2:56",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nativeSrc": "703:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "703:3:56"
                                            },
                                            "nativeSrc": "703:7:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "703:7:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nativeSrc": "682:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "682:3:56"
                                        },
                                        "nativeSrc": "682:29:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "682:29:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "673:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "673:3:56"
                                    },
                                    "nativeSrc": "673:39:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "673:39:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "714:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "714:4:56",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "669:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "669:3:56"
                                },
                                "nativeSrc": "669:50:56",
                                "nodeType": "YulFunctionCall",
                                "src": "669:50:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "662:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "662:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_string",
                        "nativeSrc": "454:271:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nativeSrc": "481:5:56",
                            "nodeType": "YulTypedName",
                            "src": "481:5:56",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nativeSrc": "488:3:56",
                            "nodeType": "YulTypedName",
                            "src": "488:3:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "496:3:56",
                            "nodeType": "YulTypedName",
                            "src": "496:3:56",
                            "type": ""
                          }
                        ],
                        "src": "454:271:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "879:168:56",
                          "nodeType": "YulBlock",
                          "src": "879:168:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "896:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "896:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "907:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "907:2:56",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "889:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "889:6:56"
                                },
                                "nativeSrc": "889:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "889:21:56"
                              },
                              "nativeSrc": "889:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "889:21:56"
                            },
                            {
                              "nativeSrc": "919:53:56",
                              "nodeType": "YulAssignment",
                              "src": "919:53:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "945:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "945:6:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "957:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "957:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "968:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "968:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "953:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "953:3:56"
                                    },
                                    "nativeSrc": "953:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "953:18:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "927:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "927:17:56"
                                },
                                "nativeSrc": "927:45:56",
                                "nodeType": "YulFunctionCall",
                                "src": "927:45:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "919:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "919:4:56"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "992:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "992:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1003:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "1003:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "988:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "988:3:56"
                                    },
                                    "nativeSrc": "988:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "988:18:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "1012:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1012:6:56"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1028:3:56",
                                                "nodeType": "YulLiteral",
                                                "src": "1028:3:56",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1033:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "1033:1:56",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "1024:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "1024:3:56"
                                            },
                                            "nativeSrc": "1024:11:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "1024:11:56"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "1037:1:56",
                                            "nodeType": "YulLiteral",
                                            "src": "1037:1:56",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nativeSrc": "1020:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "1020:3:56"
                                        },
                                        "nativeSrc": "1020:19:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1020:19:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "1008:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1008:3:56"
                                    },
                                    "nativeSrc": "1008:32:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1008:32:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "981:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "981:6:56"
                                },
                                "nativeSrc": "981:60:56",
                                "nodeType": "YulFunctionCall",
                                "src": "981:60:56"
                              },
                              "nativeSrc": "981:60:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "981:60:56"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed",
                        "nativeSrc": "730:317:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "840:9:56",
                            "nodeType": "YulTypedName",
                            "src": "840:9:56",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "851:6:56",
                            "nodeType": "YulTypedName",
                            "src": "851:6:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "859:6:56",
                            "nodeType": "YulTypedName",
                            "src": "859:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "870:4:56",
                            "nodeType": "YulTypedName",
                            "src": "870:4:56",
                            "type": ""
                          }
                        ],
                        "src": "730:317:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "1199:646:56",
                          "nodeType": "YulBlock",
                          "src": "1199:646:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1216:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "1216:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1227:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "1227:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1209:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1209:6:56"
                                },
                                "nativeSrc": "1209:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1209:21:56"
                              },
                              "nativeSrc": "1209:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "1209:21:56"
                            },
                            {
                              "nativeSrc": "1239:33:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1239:33:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "1265:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "1265:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "1259:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1259:5:56"
                                },
                                "nativeSrc": "1259:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1259:13:56"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0",
                                  "nativeSrc": "1243:12:56",
                                  "nodeType": "YulTypedName",
                                  "src": "1243:12:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1292:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1292:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1303:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "1303:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1288:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1288:3:56"
                                    },
                                    "nativeSrc": "1288:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1288:18:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1308:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "1308:4:56",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1281:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1281:6:56"
                                },
                                "nativeSrc": "1281:32:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1281:32:56"
                              },
                              "nativeSrc": "1281:32:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "1281:32:56"
                            },
                            {
                              "nativeSrc": "1322:66:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1322:66:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "1354:12:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "1354:12:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1372:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1372:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1383:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "1383:3:56",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1368:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1368:3:56"
                                    },
                                    "nativeSrc": "1368:19:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1368:19:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "1336:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1336:17:56"
                                },
                                "nativeSrc": "1336:52:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1336:52:56"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "1326:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "1326:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1408:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1408:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1419:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "1419:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1404:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1404:3:56"
                                    },
                                    "nativeSrc": "1404:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1404:18:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nativeSrc": "1434:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "1434:6:56"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "1442:2:56",
                                            "nodeType": "YulLiteral",
                                            "src": "1442:2:56",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "1430:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "1430:3:56"
                                        },
                                        "nativeSrc": "1430:15:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1430:15:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nativeSrc": "1424:5:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1424:5:56"
                                    },
                                    "nativeSrc": "1424:22:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1424:22:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1397:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1397:6:56"
                                },
                                "nativeSrc": "1397:50:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1397:50:56"
                              },
                              "nativeSrc": "1397:50:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "1397:50:56"
                            },
                            {
                              "nativeSrc": "1456:44:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1456:44:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "1488:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1488:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1496:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "1496:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1484:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1484:3:56"
                                    },
                                    "nativeSrc": "1484:15:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1484:15:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "1478:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1478:5:56"
                                },
                                "nativeSrc": "1478:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1478:22:56"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0_1",
                                  "nativeSrc": "1460:14:56",
                                  "nodeType": "YulTypedName",
                                  "src": "1460:14:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1509:17:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1509:17:56",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1523:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "1523:2:56",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "1519:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1519:3:56"
                                },
                                "nativeSrc": "1519:7:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1519:7:56"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "1513:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "1513:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1546:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1546:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1557:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "1557:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1542:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1542:3:56"
                                    },
                                    "nativeSrc": "1542:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1542:18:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "tail_1",
                                            "nativeSrc": "1570:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "1570:6:56"
                                          },
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "1578:9:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "1578:9:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nativeSrc": "1566:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "1566:3:56"
                                        },
                                        "nativeSrc": "1566:22:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1566:22:56"
                                      },
                                      {
                                        "name": "_1",
                                        "nativeSrc": "1590:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1590:2:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1562:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1562:3:56"
                                    },
                                    "nativeSrc": "1562:31:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1562:31:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1535:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1535:6:56"
                                },
                                "nativeSrc": "1535:59:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1535:59:56"
                              },
                              "nativeSrc": "1535:59:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "1535:59:56"
                            },
                            {
                              "nativeSrc": "1603:55:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1603:55:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memberValue0_1",
                                    "nativeSrc": "1635:14:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "1635:14:56"
                                  },
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "1651:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "1651:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "1617:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1617:17:56"
                                },
                                "nativeSrc": "1617:41:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1617:41:56"
                              },
                              "variables": [
                                {
                                  "name": "tail_2",
                                  "nativeSrc": "1607:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "1607:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1667:44:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1667:44:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "1699:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1699:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1707:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "1707:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1695:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1695:3:56"
                                    },
                                    "nativeSrc": "1695:15:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1695:15:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "1689:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1689:5:56"
                                },
                                "nativeSrc": "1689:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1689:22:56"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0_2",
                                  "nativeSrc": "1671:14:56",
                                  "nodeType": "YulTypedName",
                                  "src": "1671:14:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1731:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1731:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1742:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "1742:4:56",
                                        "type": "",
                                        "value": "0x80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1727:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1727:3:56"
                                    },
                                    "nativeSrc": "1727:20:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1727:20:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "tail_2",
                                            "nativeSrc": "1757:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "1757:6:56"
                                          },
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "1765:9:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "1765:9:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nativeSrc": "1753:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "1753:3:56"
                                        },
                                        "nativeSrc": "1753:22:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1753:22:56"
                                      },
                                      {
                                        "name": "_1",
                                        "nativeSrc": "1777:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "1777:2:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1749:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "1749:3:56"
                                    },
                                    "nativeSrc": "1749:31:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1749:31:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1720:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1720:6:56"
                                },
                                "nativeSrc": "1720:61:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1720:61:56"
                              },
                              "nativeSrc": "1720:61:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "1720:61:56"
                            },
                            {
                              "nativeSrc": "1790:49:56",
                              "nodeType": "YulAssignment",
                              "src": "1790:49:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memberValue0_2",
                                    "nativeSrc": "1816:14:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "1816:14:56"
                                  },
                                  {
                                    "name": "tail_2",
                                    "nativeSrc": "1832:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "1832:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "1798:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1798:17:56"
                                },
                                "nativeSrc": "1798:41:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1798:41:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "1790:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1790:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_struct$_Chain_$7844_memory_ptr__to_t_struct$_Chain_$7844_memory_ptr__fromStack_reversed",
                        "nativeSrc": "1052:793:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "1168:9:56",
                            "nodeType": "YulTypedName",
                            "src": "1168:9:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "1179:6:56",
                            "nodeType": "YulTypedName",
                            "src": "1179:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "1190:4:56",
                            "nodeType": "YulTypedName",
                            "src": "1190:4:56",
                            "type": ""
                          }
                        ],
                        "src": "1052:793:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "1971:99:56",
                          "nodeType": "YulBlock",
                          "src": "1971:99:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1988:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "1988:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1999:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "1999:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1981:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "1981:6:56"
                                },
                                "nativeSrc": "1981:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "1981:21:56"
                              },
                              "nativeSrc": "1981:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "1981:21:56"
                            },
                            {
                              "nativeSrc": "2011:53:56",
                              "nodeType": "YulAssignment",
                              "src": "2011:53:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "2037:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "2037:6:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2049:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "2049:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2060:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "2060:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2045:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "2045:3:56"
                                    },
                                    "nativeSrc": "2045:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2045:18:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "2019:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2019:17:56"
                                },
                                "nativeSrc": "2019:45:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2019:45:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "2011:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2011:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "1850:220:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "1940:9:56",
                            "nodeType": "YulTypedName",
                            "src": "1940:9:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "1951:6:56",
                            "nodeType": "YulTypedName",
                            "src": "1951:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "1962:4:56",
                            "nodeType": "YulTypedName",
                            "src": "1962:4:56",
                            "type": ""
                          }
                        ],
                        "src": "1850:220:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "2170:92:56",
                          "nodeType": "YulBlock",
                          "src": "2170:92:56",
                          "statements": [
                            {
                              "nativeSrc": "2180:26:56",
                              "nodeType": "YulAssignment",
                              "src": "2180:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2192:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "2192:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2203:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "2203:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2188:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2188:3:56"
                                },
                                "nativeSrc": "2188:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2188:18:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "2180:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2180:4:56"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2222:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "2222:9:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nativeSrc": "2247:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "2247:6:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nativeSrc": "2240:6:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "2240:6:56"
                                        },
                                        "nativeSrc": "2240:14:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2240:14:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "2233:6:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "2233:6:56"
                                    },
                                    "nativeSrc": "2233:22:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2233:22:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2215:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2215:6:56"
                                },
                                "nativeSrc": "2215:41:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2215:41:56"
                              },
                              "nativeSrc": "2215:41:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "2215:41:56"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nativeSrc": "2075:187:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "2139:9:56",
                            "nodeType": "YulTypedName",
                            "src": "2139:9:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "2150:6:56",
                            "nodeType": "YulTypedName",
                            "src": "2150:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "2161:4:56",
                            "nodeType": "YulTypedName",
                            "src": "2161:4:56",
                            "type": ""
                          }
                        ],
                        "src": "2075:187:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "2322:325:56",
                          "nodeType": "YulBlock",
                          "src": "2322:325:56",
                          "statements": [
                            {
                              "nativeSrc": "2332:22:56",
                              "nodeType": "YulAssignment",
                              "src": "2332:22:56",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2346:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "2346:1:56",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "data",
                                    "nativeSrc": "2349:4:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "2349:4:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "shr",
                                  "nativeSrc": "2342:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2342:3:56"
                                },
                                "nativeSrc": "2342:12:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2342:12:56"
                              },
                              "variableNames": [
                                {
                                  "name": "length",
                                  "nativeSrc": "2332:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2332:6:56"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "2363:38:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "2363:38:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nativeSrc": "2393:4:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "2393:4:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2399:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "2399:1:56",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "2389:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2389:3:56"
                                },
                                "nativeSrc": "2389:12:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2389:12:56"
                              },
                              "variables": [
                                {
                                  "name": "outOfPlaceEncoding",
                                  "nativeSrc": "2367:18:56",
                                  "nodeType": "YulTypedName",
                                  "src": "2367:18:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "2440:31:56",
                                "nodeType": "YulBlock",
                                "src": "2440:31:56",
                                "statements": [
                                  {
                                    "nativeSrc": "2442:27:56",
                                    "nodeType": "YulAssignment",
                                    "src": "2442:27:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "length",
                                          "nativeSrc": "2456:6:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "2456:6:56"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2464:4:56",
                                          "nodeType": "YulLiteral",
                                          "src": "2464:4:56",
                                          "type": "",
                                          "value": "0x7f"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "2452:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "2452:3:56"
                                      },
                                      "nativeSrc": "2452:17:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2452:17:56"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "length",
                                        "nativeSrc": "2442:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "2442:6:56"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "outOfPlaceEncoding",
                                    "nativeSrc": "2420:18:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "2420:18:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "2413:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2413:6:56"
                                },
                                "nativeSrc": "2413:26:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2413:26:56"
                              },
                              "nativeSrc": "2410:61:56",
                              "nodeType": "YulIf",
                              "src": "2410:61:56"
                            },
                            {
                              "body": {
                                "nativeSrc": "2530:111:56",
                                "nodeType": "YulBlock",
                                "src": "2530:111:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2551:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "2551:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "2558:3:56",
                                              "nodeType": "YulLiteral",
                                              "src": "2558:3:56",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "2563:10:56",
                                              "nodeType": "YulLiteral",
                                              "src": "2563:10:56",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nativeSrc": "2554:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "2554:3:56"
                                          },
                                          "nativeSrc": "2554:20:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "2554:20:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nativeSrc": "2544:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "2544:6:56"
                                      },
                                      "nativeSrc": "2544:31:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2544:31:56"
                                    },
                                    "nativeSrc": "2544:31:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2544:31:56"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2595:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "2595:1:56",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2598:4:56",
                                          "nodeType": "YulLiteral",
                                          "src": "2598:4:56",
                                          "type": "",
                                          "value": "0x22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nativeSrc": "2588:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "2588:6:56"
                                      },
                                      "nativeSrc": "2588:15:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2588:15:56"
                                    },
                                    "nativeSrc": "2588:15:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2588:15:56"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2623:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "2623:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2626:4:56",
                                          "nodeType": "YulLiteral",
                                          "src": "2626:4:56",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "2616:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "2616:6:56"
                                      },
                                      "nativeSrc": "2616:15:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2616:15:56"
                                    },
                                    "nativeSrc": "2616:15:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2616:15:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "outOfPlaceEncoding",
                                    "nativeSrc": "2486:18:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "2486:18:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nativeSrc": "2509:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "2509:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2517:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "2517:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "2506:2:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "2506:2:56"
                                    },
                                    "nativeSrc": "2506:14:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2506:14:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "2483:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2483:2:56"
                                },
                                "nativeSrc": "2483:38:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2483:38:56"
                              },
                              "nativeSrc": "2480:161:56",
                              "nodeType": "YulIf",
                              "src": "2480:161:56"
                            }
                          ]
                        },
                        "name": "extract_byte_array_length",
                        "nativeSrc": "2267:380:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "data",
                            "nativeSrc": "2302:4:56",
                            "nodeType": "YulTypedName",
                            "src": "2302:4:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "length",
                            "nativeSrc": "2311:6:56",
                            "nodeType": "YulTypedName",
                            "src": "2311:6:56",
                            "type": ""
                          }
                        ],
                        "src": "2267:380:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "2826:167:56",
                          "nodeType": "YulBlock",
                          "src": "2826:167:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2843:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "2843:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2854:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "2854:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2836:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2836:6:56"
                                },
                                "nativeSrc": "2836:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2836:21:56"
                              },
                              "nativeSrc": "2836:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "2836:21:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2877:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "2877:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2888:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "2888:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2873:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "2873:3:56"
                                    },
                                    "nativeSrc": "2873:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2873:18:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2893:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "2893:2:56",
                                    "type": "",
                                    "value": "17"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2866:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2866:6:56"
                                },
                                "nativeSrc": "2866:30:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2866:30:56"
                              },
                              "nativeSrc": "2866:30:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "2866:30:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2916:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "2916:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2927:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "2927:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2912:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "2912:3:56"
                                    },
                                    "nativeSrc": "2912:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2912:18:56"
                                  },
                                  {
                                    "hexValue": "41444d494e5f505249564154455f4b4559",
                                    "kind": "string",
                                    "nativeSrc": "2932:19:56",
                                    "nodeType": "YulLiteral",
                                    "src": "2932:19:56",
                                    "type": "",
                                    "value": "ADMIN_PRIVATE_KEY"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2905:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2905:6:56"
                                },
                                "nativeSrc": "2905:47:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2905:47:56"
                              },
                              "nativeSrc": "2905:47:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "2905:47:56"
                            },
                            {
                              "nativeSrc": "2961:26:56",
                              "nodeType": "YulAssignment",
                              "src": "2961:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2973:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "2973:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2984:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "2984:2:56",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2969:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2969:3:56"
                                },
                                "nativeSrc": "2969:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "2969:18:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "2961:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "2961:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_0f9b2418403e0efe0b594cd5a0bbad664afce7e82ee227d7bdd13366fe6c27b1__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "2652:341:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "2803:9:56",
                            "nodeType": "YulTypedName",
                            "src": "2803:9:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "2817:4:56",
                            "nodeType": "YulTypedName",
                            "src": "2817:4:56",
                            "type": ""
                          }
                        ],
                        "src": "2652:341:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "3079:103:56",
                          "nodeType": "YulBlock",
                          "src": "3079:103:56",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "3125:16:56",
                                "nodeType": "YulBlock",
                                "src": "3125:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3134:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "3134:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3137:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "3137:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "3127:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3127:6:56"
                                      },
                                      "nativeSrc": "3127:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3127:12:56"
                                    },
                                    "nativeSrc": "3127:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3127:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "3100:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3100:7:56"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "3109:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3109:9:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "3096:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "3096:3:56"
                                    },
                                    "nativeSrc": "3096:23:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3096:23:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3121:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "3121:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "3092:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3092:3:56"
                                },
                                "nativeSrc": "3092:32:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3092:32:56"
                              },
                              "nativeSrc": "3089:52:56",
                              "nodeType": "YulIf",
                              "src": "3089:52:56"
                            },
                            {
                              "nativeSrc": "3150:26:56",
                              "nodeType": "YulAssignment",
                              "src": "3150:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3166:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "3166:9:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "3160:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3160:5:56"
                                },
                                "nativeSrc": "3160:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3160:16:56"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "3150:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3150:6:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nativeSrc": "2998:184:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "3045:9:56",
                            "nodeType": "YulTypedName",
                            "src": "3045:9:56",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "3056:7:56",
                            "nodeType": "YulTypedName",
                            "src": "3056:7:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "3068:6:56",
                            "nodeType": "YulTypedName",
                            "src": "3068:6:56",
                            "type": ""
                          }
                        ],
                        "src": "2998:184:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "3361:163:56",
                          "nodeType": "YulBlock",
                          "src": "3361:163:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3378:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "3378:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3389:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "3389:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "3371:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3371:6:56"
                                },
                                "nativeSrc": "3371:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3371:21:56"
                              },
                              "nativeSrc": "3371:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "3371:21:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "3412:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3412:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3423:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "3423:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3408:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "3408:3:56"
                                    },
                                    "nativeSrc": "3408:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3408:18:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3428:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "3428:2:56",
                                    "type": "",
                                    "value": "13"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "3401:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3401:6:56"
                                },
                                "nativeSrc": "3401:30:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3401:30:56"
                              },
                              "nativeSrc": "3401:30:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "3401:30:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "3451:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3451:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3462:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "3462:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3447:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "3447:3:56"
                                    },
                                    "nativeSrc": "3447:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3447:18:56"
                                  },
                                  {
                                    "hexValue": "4f574e45525f41444452455353",
                                    "kind": "string",
                                    "nativeSrc": "3467:15:56",
                                    "nodeType": "YulLiteral",
                                    "src": "3467:15:56",
                                    "type": "",
                                    "value": "OWNER_ADDRESS"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "3440:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3440:6:56"
                                },
                                "nativeSrc": "3440:43:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3440:43:56"
                              },
                              "nativeSrc": "3440:43:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "3440:43:56"
                            },
                            {
                              "nativeSrc": "3492:26:56",
                              "nodeType": "YulAssignment",
                              "src": "3492:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3504:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "3504:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3515:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "3515:2:56",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3500:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3500:3:56"
                                },
                                "nativeSrc": "3500:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3500:18:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "3492:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3492:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_126dc7d4763b2b2c23a60aa98a5d472584b4ae417eca2b2710f81792900a6ecc__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "3187:337:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "3338:9:56",
                            "nodeType": "YulTypedName",
                            "src": "3338:9:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "3352:4:56",
                            "nodeType": "YulTypedName",
                            "src": "3352:4:56",
                            "type": ""
                          }
                        ],
                        "src": "3187:337:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "3630:76:56",
                          "nodeType": "YulBlock",
                          "src": "3630:76:56",
                          "statements": [
                            {
                              "nativeSrc": "3640:26:56",
                              "nodeType": "YulAssignment",
                              "src": "3640:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3652:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "3652:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3663:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "3663:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3648:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3648:3:56"
                                },
                                "nativeSrc": "3648:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3648:18:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "3640:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3640:4:56"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3682:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "3682:9:56"
                                  },
                                  {
                                    "name": "value0",
                                    "nativeSrc": "3693:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "3693:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "3675:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3675:6:56"
                                },
                                "nativeSrc": "3675:25:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3675:25:56"
                              },
                              "nativeSrc": "3675:25:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "3675:25:56"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nativeSrc": "3529:177:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "3599:9:56",
                            "nodeType": "YulTypedName",
                            "src": "3599:9:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "3610:6:56",
                            "nodeType": "YulTypedName",
                            "src": "3610:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "3621:4:56",
                            "nodeType": "YulTypedName",
                            "src": "3621:4:56",
                            "type": ""
                          }
                        ],
                        "src": "3529:177:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "3792:209:56",
                          "nodeType": "YulBlock",
                          "src": "3792:209:56",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "3838:16:56",
                                "nodeType": "YulBlock",
                                "src": "3838:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3847:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "3847:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3850:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "3850:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "3840:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3840:6:56"
                                      },
                                      "nativeSrc": "3840:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3840:12:56"
                                    },
                                    "nativeSrc": "3840:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3840:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "3813:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3813:7:56"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "3822:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3822:9:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "3809:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "3809:3:56"
                                    },
                                    "nativeSrc": "3809:23:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3809:23:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3834:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "3834:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "3805:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3805:3:56"
                                },
                                "nativeSrc": "3805:32:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3805:32:56"
                              },
                              "nativeSrc": "3802:52:56",
                              "nodeType": "YulIf",
                              "src": "3802:52:56"
                            },
                            {
                              "nativeSrc": "3863:29:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "3863:29:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3882:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "3882:9:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "3876:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3876:5:56"
                                },
                                "nativeSrc": "3876:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3876:16:56"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nativeSrc": "3867:5:56",
                                  "nodeType": "YulTypedName",
                                  "src": "3867:5:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "3955:16:56",
                                "nodeType": "YulBlock",
                                "src": "3955:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3964:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "3964:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3967:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "3967:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "3957:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3957:6:56"
                                      },
                                      "nativeSrc": "3957:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3957:12:56"
                                    },
                                    "nativeSrc": "3957:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3957:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "3914:5:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "3914:5:56"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nativeSrc": "3925:5:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "3925:5:56"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nativeSrc": "3940:3:56",
                                                    "nodeType": "YulLiteral",
                                                    "src": "3940:3:56",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nativeSrc": "3945:1:56",
                                                    "nodeType": "YulLiteral",
                                                    "src": "3945:1:56",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nativeSrc": "3936:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3936:3:56"
                                                },
                                                "nativeSrc": "3936:11:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "3936:11:56"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "3949:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "3949:1:56",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nativeSrc": "3932:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "3932:3:56"
                                            },
                                            "nativeSrc": "3932:19:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "3932:19:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nativeSrc": "3921:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "3921:3:56"
                                        },
                                        "nativeSrc": "3921:31:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3921:31:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nativeSrc": "3911:2:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "3911:2:56"
                                    },
                                    "nativeSrc": "3911:42:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3911:42:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "3904:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3904:6:56"
                                },
                                "nativeSrc": "3904:50:56",
                                "nodeType": "YulFunctionCall",
                                "src": "3904:50:56"
                              },
                              "nativeSrc": "3901:70:56",
                              "nodeType": "YulIf",
                              "src": "3901:70:56"
                            },
                            {
                              "nativeSrc": "3980:15:56",
                              "nodeType": "YulAssignment",
                              "src": "3980:15:56",
                              "value": {
                                "name": "value",
                                "nativeSrc": "3990:5:56",
                                "nodeType": "YulIdentifier",
                                "src": "3990:5:56"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "3980:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "3980:6:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address_fromMemory",
                        "nativeSrc": "3711:290:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "3758:9:56",
                            "nodeType": "YulTypedName",
                            "src": "3758:9:56",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "3769:7:56",
                            "nodeType": "YulTypedName",
                            "src": "3769:7:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "3781:6:56",
                            "nodeType": "YulTypedName",
                            "src": "3781:6:56",
                            "type": ""
                          }
                        ],
                        "src": "3711:290:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "4180:453:56",
                          "nodeType": "YulBlock",
                          "src": "4180:453:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4197:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "4197:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4208:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "4208:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "4190:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4190:6:56"
                                },
                                "nativeSrc": "4190:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4190:21:56"
                              },
                              "nativeSrc": "4190:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "4190:21:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4231:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "4231:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4242:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "4242:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4227:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "4227:3:56"
                                    },
                                    "nativeSrc": "4227:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4227:18:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4247:3:56",
                                    "nodeType": "YulLiteral",
                                    "src": "4247:3:56",
                                    "type": "",
                                    "value": "142"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "4220:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4220:6:56"
                                },
                                "nativeSrc": "4220:31:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4220:31:56"
                              },
                              "nativeSrc": "4220:31:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "4220:31:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4271:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "4271:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4282:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "4282:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4267:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "4267:3:56"
                                    },
                                    "nativeSrc": "4267:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4267:18:56"
                                  },
                                  {
                                    "hexValue": "596f7520646f6e277420686176652061206465706c6f796572206163636f756e",
                                    "kind": "string",
                                    "nativeSrc": "4287:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "4287:34:56",
                                    "type": "",
                                    "value": "You don't have a deployer accoun"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "4260:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4260:6:56"
                                },
                                "nativeSrc": "4260:62:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4260:62:56"
                              },
                              "nativeSrc": "4260:62:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "4260:62:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4342:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "4342:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4353:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "4353:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4338:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "4338:3:56"
                                    },
                                    "nativeSrc": "4338:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4338:18:56"
                                  },
                                  {
                                    "hexValue": "742e204d616b65207375726520796f75206861766520736574204445504c4f59",
                                    "kind": "string",
                                    "nativeSrc": "4358:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "4358:34:56",
                                    "type": "",
                                    "value": "t. Make sure you have set DEPLOY"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "4331:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4331:6:56"
                                },
                                "nativeSrc": "4331:62:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4331:62:56"
                              },
                              "nativeSrc": "4331:62:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "4331:62:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4413:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "4413:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4424:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "4424:3:56",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4409:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "4409:3:56"
                                    },
                                    "nativeSrc": "4409:19:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4409:19:56"
                                  },
                                  {
                                    "hexValue": "45525f505249564154455f4b455920696e202e656e76206f7220757365206079",
                                    "kind": "string",
                                    "nativeSrc": "4430:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "4430:34:56",
                                    "type": "",
                                    "value": "ER_PRIVATE_KEY in .env or use `y"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "4402:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4402:6:56"
                                },
                                "nativeSrc": "4402:63:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4402:63:56"
                              },
                              "nativeSrc": "4402:63:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "4402:63:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4485:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "4485:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4496:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "4496:3:56",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4481:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "4481:3:56"
                                    },
                                    "nativeSrc": "4481:19:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4481:19:56"
                                  },
                                  {
                                    "hexValue": "61726e2067656e65726174656020746f2067656e65726174652061206e657720",
                                    "kind": "string",
                                    "nativeSrc": "4502:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "4502:34:56",
                                    "type": "",
                                    "value": "arn generate` to generate a new "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "4474:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4474:6:56"
                                },
                                "nativeSrc": "4474:63:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4474:63:56"
                              },
                              "nativeSrc": "4474:63:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "4474:63:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4557:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "4557:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4568:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "4568:3:56",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4553:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "4553:3:56"
                                    },
                                    "nativeSrc": "4553:19:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4553:19:56"
                                  },
                                  {
                                    "hexValue": "72616e646f6d206163636f756e74",
                                    "kind": "string",
                                    "nativeSrc": "4574:16:56",
                                    "nodeType": "YulLiteral",
                                    "src": "4574:16:56",
                                    "type": "",
                                    "value": "random account"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "4546:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4546:6:56"
                                },
                                "nativeSrc": "4546:45:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4546:45:56"
                              },
                              "nativeSrc": "4546:45:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "4546:45:56"
                            },
                            {
                              "nativeSrc": "4600:27:56",
                              "nodeType": "YulAssignment",
                              "src": "4600:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4612:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "4612:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4623:3:56",
                                    "nodeType": "YulLiteral",
                                    "src": "4623:3:56",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4608:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4608:3:56"
                                },
                                "nativeSrc": "4608:19:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4608:19:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "4600:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4600:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2016869337567cea9dbdd5c3e7389f812a72b7d8339efb4f14ead7b7cb06dc46__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "4006:627:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "4157:9:56",
                            "nodeType": "YulTypedName",
                            "src": "4157:9:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "4171:4:56",
                            "nodeType": "YulTypedName",
                            "src": "4171:4:56",
                            "type": ""
                          }
                        ],
                        "src": "4006:627:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "4739:102:56",
                          "nodeType": "YulBlock",
                          "src": "4739:102:56",
                          "statements": [
                            {
                              "nativeSrc": "4749:26:56",
                              "nodeType": "YulAssignment",
                              "src": "4749:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4761:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "4761:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4772:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "4772:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4757:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4757:3:56"
                                },
                                "nativeSrc": "4757:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4757:18:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "4749:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4749:4:56"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4791:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "4791:9:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "4806:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "4806:6:56"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "4822:3:56",
                                                "nodeType": "YulLiteral",
                                                "src": "4822:3:56",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "4827:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "4827:1:56",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "4818:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "4818:3:56"
                                            },
                                            "nativeSrc": "4818:11:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "4818:11:56"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "4831:1:56",
                                            "nodeType": "YulLiteral",
                                            "src": "4831:1:56",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nativeSrc": "4814:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "4814:3:56"
                                        },
                                        "nativeSrc": "4814:19:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "4814:19:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "4802:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "4802:3:56"
                                    },
                                    "nativeSrc": "4802:32:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4802:32:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "4784:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4784:6:56"
                                },
                                "nativeSrc": "4784:51:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4784:51:56"
                              },
                              "nativeSrc": "4784:51:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "4784:51:56"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nativeSrc": "4638:203:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "4708:9:56",
                            "nodeType": "YulTypedName",
                            "src": "4708:9:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "4719:6:56",
                            "nodeType": "YulTypedName",
                            "src": "4719:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "4730:4:56",
                            "nodeType": "YulTypedName",
                            "src": "4730:4:56",
                            "type": ""
                          }
                        ],
                        "src": "4638:203:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "4975:175:56",
                          "nodeType": "YulBlock",
                          "src": "4975:175:56",
                          "statements": [
                            {
                              "nativeSrc": "4985:26:56",
                              "nodeType": "YulAssignment",
                              "src": "4985:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4997:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "4997:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5008:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5008:2:56",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4993:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4993:3:56"
                                },
                                "nativeSrc": "4993:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "4993:18:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "4985:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "4985:4:56"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5020:29:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5020:29:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5038:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "5038:3:56",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5043:1:56",
                                        "nodeType": "YulLiteral",
                                        "src": "5043:1:56",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "5034:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5034:3:56"
                                    },
                                    "nativeSrc": "5034:11:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5034:11:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5047:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5047:1:56",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "5030:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5030:3:56"
                                },
                                "nativeSrc": "5030:19:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5030:19:56"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "5024:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "5024:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5065:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "5065:9:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "5080:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5080:6:56"
                                      },
                                      {
                                        "name": "_1",
                                        "nativeSrc": "5088:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5088:2:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "5076:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5076:3:56"
                                    },
                                    "nativeSrc": "5076:15:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5076:15:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "5058:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5058:6:56"
                                },
                                "nativeSrc": "5058:34:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5058:34:56"
                              },
                              "nativeSrc": "5058:34:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "5058:34:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "5112:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5112:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5123:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "5123:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5108:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5108:3:56"
                                    },
                                    "nativeSrc": "5108:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5108:18:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "5132:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5132:6:56"
                                      },
                                      {
                                        "name": "_1",
                                        "nativeSrc": "5140:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5140:2:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "5128:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5128:3:56"
                                    },
                                    "nativeSrc": "5128:15:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5128:15:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "5101:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5101:6:56"
                                },
                                "nativeSrc": "5101:43:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5101:43:56"
                              },
                              "nativeSrc": "5101:43:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "5101:43:56"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                        "nativeSrc": "4846:304:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "4936:9:56",
                            "nodeType": "YulTypedName",
                            "src": "4936:9:56",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "4947:6:56",
                            "nodeType": "YulTypedName",
                            "src": "4947:6:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "4955:6:56",
                            "nodeType": "YulTypedName",
                            "src": "4955:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "4966:4:56",
                            "nodeType": "YulTypedName",
                            "src": "4966:4:56",
                            "type": ""
                          }
                        ],
                        "src": "4846:304:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "5187:95:56",
                          "nodeType": "YulBlock",
                          "src": "5187:95:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5204:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5204:1:56",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5211:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "5211:3:56",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5216:10:56",
                                        "nodeType": "YulLiteral",
                                        "src": "5216:10:56",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "5207:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5207:3:56"
                                    },
                                    "nativeSrc": "5207:20:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5207:20:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "5197:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5197:6:56"
                                },
                                "nativeSrc": "5197:31:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5197:31:56"
                              },
                              "nativeSrc": "5197:31:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "5197:31:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5244:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5244:1:56",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5247:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5247:4:56",
                                    "type": "",
                                    "value": "0x41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "5237:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5237:6:56"
                                },
                                "nativeSrc": "5237:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5237:15:56"
                              },
                              "nativeSrc": "5237:15:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "5237:15:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5268:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5268:1:56",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5271:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5271:4:56",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "5261:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5261:6:56"
                                },
                                "nativeSrc": "5261:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5261:15:56"
                              },
                              "nativeSrc": "5261:15:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "5261:15:56"
                            }
                          ]
                        },
                        "name": "panic_error_0x41",
                        "nativeSrc": "5155:127:56",
                        "nodeType": "YulFunctionDefinition",
                        "src": "5155:127:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "5333:205:56",
                          "nodeType": "YulBlock",
                          "src": "5333:205:56",
                          "statements": [
                            {
                              "nativeSrc": "5343:19:56",
                              "nodeType": "YulAssignment",
                              "src": "5343:19:56",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5359:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5359:2:56",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "5353:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5353:5:56"
                                },
                                "nativeSrc": "5353:9:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5353:9:56"
                              },
                              "variableNames": [
                                {
                                  "name": "memPtr",
                                  "nativeSrc": "5343:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5343:6:56"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5371:33:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5371:33:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "5393:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "5393:6:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5401:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5401:2:56",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5389:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5389:3:56"
                                },
                                "nativeSrc": "5389:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5389:15:56"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nativeSrc": "5375:10:56",
                                  "nodeType": "YulTypedName",
                                  "src": "5375:10:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "5479:22:56",
                                "nodeType": "YulBlock",
                                "src": "5479:22:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nativeSrc": "5481:16:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5481:16:56"
                                      },
                                      "nativeSrc": "5481:18:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5481:18:56"
                                    },
                                    "nativeSrc": "5481:18:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5481:18:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "5422:10:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5422:10:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5434:18:56",
                                        "nodeType": "YulLiteral",
                                        "src": "5434:18:56",
                                        "type": "",
                                        "value": "0xffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nativeSrc": "5419:2:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5419:2:56"
                                    },
                                    "nativeSrc": "5419:34:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5419:34:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "5458:10:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5458:10:56"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nativeSrc": "5470:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5470:6:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "5455:2:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5455:2:56"
                                    },
                                    "nativeSrc": "5455:22:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5455:22:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nativeSrc": "5416:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5416:2:56"
                                },
                                "nativeSrc": "5416:62:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5416:62:56"
                              },
                              "nativeSrc": "5413:88:56",
                              "nodeType": "YulIf",
                              "src": "5413:88:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5517:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5517:2:56",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "5521:10:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "5521:10:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "5510:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5510:6:56"
                                },
                                "nativeSrc": "5510:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5510:22:56"
                              },
                              "nativeSrc": "5510:22:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "5510:22:56"
                            }
                          ]
                        },
                        "name": "allocate_memory_3055",
                        "nativeSrc": "5287:251:56",
                        "nodeType": "YulFunctionDefinition",
                        "returnVariables": [
                          {
                            "name": "memPtr",
                            "nativeSrc": "5322:6:56",
                            "nodeType": "YulTypedName",
                            "src": "5322:6:56",
                            "type": ""
                          }
                        ],
                        "src": "5287:251:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "5589:207:56",
                          "nodeType": "YulBlock",
                          "src": "5589:207:56",
                          "statements": [
                            {
                              "nativeSrc": "5599:19:56",
                              "nodeType": "YulAssignment",
                              "src": "5599:19:56",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5615:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5615:2:56",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "5609:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5609:5:56"
                                },
                                "nativeSrc": "5609:9:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5609:9:56"
                              },
                              "variableNames": [
                                {
                                  "name": "memPtr",
                                  "nativeSrc": "5599:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5599:6:56"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5627:35:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5627:35:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "5649:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "5649:6:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5657:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5657:4:56",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5645:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5645:3:56"
                                },
                                "nativeSrc": "5645:17:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5645:17:56"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nativeSrc": "5631:10:56",
                                  "nodeType": "YulTypedName",
                                  "src": "5631:10:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "5737:22:56",
                                "nodeType": "YulBlock",
                                "src": "5737:22:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nativeSrc": "5739:16:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5739:16:56"
                                      },
                                      "nativeSrc": "5739:18:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5739:18:56"
                                    },
                                    "nativeSrc": "5739:18:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5739:18:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "5680:10:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5680:10:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5692:18:56",
                                        "nodeType": "YulLiteral",
                                        "src": "5692:18:56",
                                        "type": "",
                                        "value": "0xffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nativeSrc": "5677:2:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5677:2:56"
                                    },
                                    "nativeSrc": "5677:34:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5677:34:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "5716:10:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5716:10:56"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nativeSrc": "5728:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5728:6:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "5713:2:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5713:2:56"
                                    },
                                    "nativeSrc": "5713:22:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5713:22:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nativeSrc": "5674:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5674:2:56"
                                },
                                "nativeSrc": "5674:62:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5674:62:56"
                              },
                              "nativeSrc": "5671:88:56",
                              "nodeType": "YulIf",
                              "src": "5671:88:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5775:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5775:2:56",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "5779:10:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "5779:10:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "5768:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5768:6:56"
                                },
                                "nativeSrc": "5768:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5768:22:56"
                              },
                              "nativeSrc": "5768:22:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "5768:22:56"
                            }
                          ]
                        },
                        "name": "allocate_memory_3057",
                        "nativeSrc": "5543:253:56",
                        "nodeType": "YulFunctionDefinition",
                        "returnVariables": [
                          {
                            "name": "memPtr",
                            "nativeSrc": "5578:6:56",
                            "nodeType": "YulTypedName",
                            "src": "5578:6:56",
                            "type": ""
                          }
                        ],
                        "src": "5543:253:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "5846:230:56",
                          "nodeType": "YulBlock",
                          "src": "5846:230:56",
                          "statements": [
                            {
                              "nativeSrc": "5856:19:56",
                              "nodeType": "YulAssignment",
                              "src": "5856:19:56",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5872:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "5872:2:56",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "5866:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5866:5:56"
                                },
                                "nativeSrc": "5866:9:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5866:9:56"
                              },
                              "variableNames": [
                                {
                                  "name": "memPtr",
                                  "nativeSrc": "5856:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5856:6:56"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5884:58:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5884:58:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "5906:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "5906:6:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "size",
                                            "nativeSrc": "5922:4:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "5922:4:56"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "5928:2:56",
                                            "nodeType": "YulLiteral",
                                            "src": "5928:2:56",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "5918:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "5918:3:56"
                                        },
                                        "nativeSrc": "5918:13:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "5918:13:56"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "5937:2:56",
                                            "nodeType": "YulLiteral",
                                            "src": "5937:2:56",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nativeSrc": "5933:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "5933:3:56"
                                        },
                                        "nativeSrc": "5933:7:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "5933:7:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "5914:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5914:3:56"
                                    },
                                    "nativeSrc": "5914:27:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5914:27:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5902:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5902:3:56"
                                },
                                "nativeSrc": "5902:40:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5902:40:56"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nativeSrc": "5888:10:56",
                                  "nodeType": "YulTypedName",
                                  "src": "5888:10:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "6017:22:56",
                                "nodeType": "YulBlock",
                                "src": "6017:22:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nativeSrc": "6019:16:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6019:16:56"
                                      },
                                      "nativeSrc": "6019:18:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6019:18:56"
                                    },
                                    "nativeSrc": "6019:18:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6019:18:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "5960:10:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5960:10:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5972:18:56",
                                        "nodeType": "YulLiteral",
                                        "src": "5972:18:56",
                                        "type": "",
                                        "value": "0xffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nativeSrc": "5957:2:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5957:2:56"
                                    },
                                    "nativeSrc": "5957:34:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5957:34:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "5996:10:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "5996:10:56"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nativeSrc": "6008:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6008:6:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "5993:2:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "5993:2:56"
                                    },
                                    "nativeSrc": "5993:22:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5993:22:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nativeSrc": "5954:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "5954:2:56"
                                },
                                "nativeSrc": "5954:62:56",
                                "nodeType": "YulFunctionCall",
                                "src": "5954:62:56"
                              },
                              "nativeSrc": "5951:88:56",
                              "nodeType": "YulIf",
                              "src": "5951:88:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6055:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "6055:2:56",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "6059:10:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6059:10:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "6048:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6048:6:56"
                                },
                                "nativeSrc": "6048:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6048:22:56"
                              },
                              "nativeSrc": "6048:22:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "6048:22:56"
                            }
                          ]
                        },
                        "name": "allocate_memory",
                        "nativeSrc": "5801:275:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "size",
                            "nativeSrc": "5826:4:56",
                            "nodeType": "YulTypedName",
                            "src": "5826:4:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "memPtr",
                            "nativeSrc": "5835:6:56",
                            "nodeType": "YulTypedName",
                            "src": "5835:6:56",
                            "type": ""
                          }
                        ],
                        "src": "5801:275:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "6145:446:56",
                          "nodeType": "YulBlock",
                          "src": "6145:446:56",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "6194:16:56",
                                "nodeType": "YulBlock",
                                "src": "6194:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "6203:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "6203:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "6206:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "6206:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "6196:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6196:6:56"
                                      },
                                      "nativeSrc": "6196:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6196:12:56"
                                    },
                                    "nativeSrc": "6196:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6196:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "offset",
                                            "nativeSrc": "6173:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "6173:6:56"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "6181:4:56",
                                            "nodeType": "YulLiteral",
                                            "src": "6181:4:56",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "6169:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "6169:3:56"
                                        },
                                        "nativeSrc": "6169:17:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "6169:17:56"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "6188:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6188:3:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nativeSrc": "6165:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "6165:3:56"
                                    },
                                    "nativeSrc": "6165:27:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6165:27:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "6158:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6158:6:56"
                                },
                                "nativeSrc": "6158:35:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6158:35:56"
                              },
                              "nativeSrc": "6155:55:56",
                              "nodeType": "YulIf",
                              "src": "6155:55:56"
                            },
                            {
                              "nativeSrc": "6219:23:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6219:23:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "6235:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6235:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "6229:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6229:5:56"
                                },
                                "nativeSrc": "6229:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6229:13:56"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "6223:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "6223:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "6281:22:56",
                                "nodeType": "YulBlock",
                                "src": "6281:22:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nativeSrc": "6283:16:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6283:16:56"
                                      },
                                      "nativeSrc": "6283:18:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6283:18:56"
                                    },
                                    "nativeSrc": "6283:18:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6283:18:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "6257:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6257:2:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6261:18:56",
                                    "nodeType": "YulLiteral",
                                    "src": "6261:18:56",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "6254:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6254:2:56"
                                },
                                "nativeSrc": "6254:26:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6254:26:56"
                              },
                              "nativeSrc": "6251:52:56",
                              "nodeType": "YulIf",
                              "src": "6251:52:56"
                            },
                            {
                              "nativeSrc": "6312:70:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6312:70:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_1",
                                                "nativeSrc": "6355:2:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "6355:2:56"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "6359:4:56",
                                                "nodeType": "YulLiteral",
                                                "src": "6359:4:56",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "6351:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "6351:3:56"
                                            },
                                            "nativeSrc": "6351:13:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6351:13:56"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "6370:2:56",
                                                "nodeType": "YulLiteral",
                                                "src": "6370:2:56",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nativeSrc": "6366:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "6366:3:56"
                                            },
                                            "nativeSrc": "6366:7:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "6366:7:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nativeSrc": "6347:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "6347:3:56"
                                        },
                                        "nativeSrc": "6347:27:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "6347:27:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6376:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "6376:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6343:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "6343:3:56"
                                    },
                                    "nativeSrc": "6343:38:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6343:38:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "allocate_memory",
                                  "nativeSrc": "6327:15:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6327:15:56"
                                },
                                "nativeSrc": "6327:55:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6327:55:56"
                              },
                              "variables": [
                                {
                                  "name": "array_1",
                                  "nativeSrc": "6316:7:56",
                                  "nodeType": "YulTypedName",
                                  "src": "6316:7:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nativeSrc": "6398:7:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6398:7:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "6407:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6407:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "6391:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6391:6:56"
                                },
                                "nativeSrc": "6391:19:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6391:19:56"
                              },
                              "nativeSrc": "6391:19:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "6391:19:56"
                            },
                            {
                              "body": {
                                "nativeSrc": "6458:16:56",
                                "nodeType": "YulBlock",
                                "src": "6458:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "6467:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "6467:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "6470:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "6470:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "6460:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6460:6:56"
                                      },
                                      "nativeSrc": "6460:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6460:12:56"
                                    },
                                    "nativeSrc": "6460:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6460:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "offset",
                                            "nativeSrc": "6433:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "6433:6:56"
                                          },
                                          {
                                            "name": "_1",
                                            "nativeSrc": "6441:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "6441:2:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "6429:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "6429:3:56"
                                        },
                                        "nativeSrc": "6429:15:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "6429:15:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6446:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "6446:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6425:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "6425:3:56"
                                    },
                                    "nativeSrc": "6425:26:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6425:26:56"
                                  },
                                  {
                                    "name": "end",
                                    "nativeSrc": "6453:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6453:3:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "6422:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6422:2:56"
                                },
                                "nativeSrc": "6422:35:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6422:35:56"
                              },
                              "nativeSrc": "6419:55:56",
                              "nodeType": "YulIf",
                              "src": "6419:55:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nativeSrc": "6522:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6522:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6530:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "6530:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6518:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "6518:3:56"
                                    },
                                    "nativeSrc": "6518:17:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6518:17:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "array_1",
                                        "nativeSrc": "6541:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6541:7:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6550:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "6550:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6537:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "6537:3:56"
                                    },
                                    "nativeSrc": "6537:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6537:18:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "6557:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6557:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "6483:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6483:34:56"
                                },
                                "nativeSrc": "6483:77:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6483:77:56"
                              },
                              "nativeSrc": "6483:77:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "6483:77:56"
                            },
                            {
                              "nativeSrc": "6569:16:56",
                              "nodeType": "YulAssignment",
                              "src": "6569:16:56",
                              "value": {
                                "name": "array_1",
                                "nativeSrc": "6578:7:56",
                                "nodeType": "YulIdentifier",
                                "src": "6578:7:56"
                              },
                              "variableNames": [
                                {
                                  "name": "array",
                                  "nativeSrc": "6569:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6569:5:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_string_fromMemory",
                        "nativeSrc": "6081:510:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nativeSrc": "6119:6:56",
                            "nodeType": "YulTypedName",
                            "src": "6119:6:56",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nativeSrc": "6127:3:56",
                            "nodeType": "YulTypedName",
                            "src": "6127:3:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "array",
                            "nativeSrc": "6135:5:56",
                            "nodeType": "YulTypedName",
                            "src": "6135:5:56",
                            "type": ""
                          }
                        ],
                        "src": "6081:510:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "6687:246:56",
                          "nodeType": "YulBlock",
                          "src": "6687:246:56",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "6733:16:56",
                                "nodeType": "YulBlock",
                                "src": "6733:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "6742:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "6742:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "6745:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "6745:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "6735:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6735:6:56"
                                      },
                                      "nativeSrc": "6735:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6735:12:56"
                                    },
                                    "nativeSrc": "6735:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6735:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "6708:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6708:7:56"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "6717:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6717:9:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "6704:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "6704:3:56"
                                    },
                                    "nativeSrc": "6704:23:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6704:23:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6729:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "6729:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "6700:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6700:3:56"
                                },
                                "nativeSrc": "6700:32:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6700:32:56"
                              },
                              "nativeSrc": "6697:52:56",
                              "nodeType": "YulIf",
                              "src": "6697:52:56"
                            },
                            {
                              "nativeSrc": "6758:30:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6758:30:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6778:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6778:9:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "6772:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6772:5:56"
                                },
                                "nativeSrc": "6772:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6772:16:56"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "6762:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "6762:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "6831:16:56",
                                "nodeType": "YulBlock",
                                "src": "6831:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "6840:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "6840:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "6843:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "6843:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "6833:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6833:6:56"
                                      },
                                      "nativeSrc": "6833:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6833:12:56"
                                    },
                                    "nativeSrc": "6833:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6833:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "6803:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6803:6:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6811:18:56",
                                    "nodeType": "YulLiteral",
                                    "src": "6811:18:56",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "6800:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6800:2:56"
                                },
                                "nativeSrc": "6800:30:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6800:30:56"
                              },
                              "nativeSrc": "6797:50:56",
                              "nodeType": "YulIf",
                              "src": "6797:50:56"
                            },
                            {
                              "nativeSrc": "6856:71:56",
                              "nodeType": "YulAssignment",
                              "src": "6856:71:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "6899:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6899:9:56"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "6910:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "6910:6:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6895:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "6895:3:56"
                                    },
                                    "nativeSrc": "6895:22:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6895:22:56"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "6919:7:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "6919:7:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string_fromMemory",
                                  "nativeSrc": "6866:28:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6866:28:56"
                                },
                                "nativeSrc": "6866:61:56",
                                "nodeType": "YulFunctionCall",
                                "src": "6866:61:56"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "6856:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "6856:6:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
                        "nativeSrc": "6596:337:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "6653:9:56",
                            "nodeType": "YulTypedName",
                            "src": "6653:9:56",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "6664:7:56",
                            "nodeType": "YulTypedName",
                            "src": "6664:7:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "6676:6:56",
                            "nodeType": "YulTypedName",
                            "src": "6676:6:56",
                            "type": ""
                          }
                        ],
                        "src": "6596:337:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "7168:222:56",
                          "nodeType": "YulBlock",
                          "src": "7168:222:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "7185:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "7185:3:56"
                                  },
                                  {
                                    "hexValue": "666163746f727920636f6e7472616374206465706c6f7965642061743a20",
                                    "kind": "string",
                                    "nativeSrc": "7190:32:56",
                                    "nodeType": "YulLiteral",
                                    "src": "7190:32:56",
                                    "type": "",
                                    "value": "factory contract deployed at: "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "7178:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7178:6:56"
                                },
                                "nativeSrc": "7178:45:56",
                                "nodeType": "YulFunctionCall",
                                "src": "7178:45:56"
                              },
                              "nativeSrc": "7178:45:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "7178:45:56"
                            },
                            {
                              "nativeSrc": "7232:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "7232:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "7252:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "7252:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "7246:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7246:5:56"
                                },
                                "nativeSrc": "7246:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "7246:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "7236:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "7236:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "7307:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "7307:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7315:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "7315:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7303:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "7303:3:56"
                                    },
                                    "nativeSrc": "7303:17:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7303:17:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7326:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "7326:3:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7331:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "7331:2:56",
                                        "type": "",
                                        "value": "30"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7322:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "7322:3:56"
                                    },
                                    "nativeSrc": "7322:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7322:12:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "7336:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "7336:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "7268:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7268:34:56"
                                },
                                "nativeSrc": "7268:75:56",
                                "nodeType": "YulFunctionCall",
                                "src": "7268:75:56"
                              },
                              "nativeSrc": "7268:75:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "7268:75:56"
                            },
                            {
                              "nativeSrc": "7352:32:56",
                              "nodeType": "YulAssignment",
                              "src": "7352:32:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7367:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "7367:3:56"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "7372:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "7372:6:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7363:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "7363:3:56"
                                    },
                                    "nativeSrc": "7363:16:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7363:16:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7381:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "7381:2:56",
                                    "type": "",
                                    "value": "30"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7359:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7359:3:56"
                                },
                                "nativeSrc": "7359:25:56",
                                "nodeType": "YulFunctionCall",
                                "src": "7359:25:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "7352:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7352:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_47f4e387a3e3a1bf5441a11471d96bb40e79f7cd37d0651a9e52162fbbec1fcf_t_string_memory_ptr__to_t_bytes30_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "6938:452:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "7144:3:56",
                            "nodeType": "YulTypedName",
                            "src": "7144:3:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "7149:6:56",
                            "nodeType": "YulTypedName",
                            "src": "7149:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "7160:3:56",
                            "nodeType": "YulTypedName",
                            "src": "7160:3:56",
                            "type": ""
                          }
                        ],
                        "src": "6938:452:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "7625:219:56",
                          "nodeType": "YulBlock",
                          "src": "7625:219:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "7642:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "7642:3:56"
                                  },
                                  {
                                    "hexValue": "776e726b20636f6e7472616374206465706c6f7965642061743a20",
                                    "kind": "string",
                                    "nativeSrc": "7647:29:56",
                                    "nodeType": "YulLiteral",
                                    "src": "7647:29:56",
                                    "type": "",
                                    "value": "wnrk contract deployed at: "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "7635:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7635:6:56"
                                },
                                "nativeSrc": "7635:42:56",
                                "nodeType": "YulFunctionCall",
                                "src": "7635:42:56"
                              },
                              "nativeSrc": "7635:42:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "7635:42:56"
                            },
                            {
                              "nativeSrc": "7686:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "7686:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "7706:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "7706:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "7700:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7700:5:56"
                                },
                                "nativeSrc": "7700:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "7700:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "7690:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "7690:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "7761:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "7761:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7769:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "7769:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7757:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "7757:3:56"
                                    },
                                    "nativeSrc": "7757:17:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7757:17:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7780:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "7780:3:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7785:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "7785:2:56",
                                        "type": "",
                                        "value": "27"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7776:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "7776:3:56"
                                    },
                                    "nativeSrc": "7776:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7776:12:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "7790:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "7790:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "7722:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7722:34:56"
                                },
                                "nativeSrc": "7722:75:56",
                                "nodeType": "YulFunctionCall",
                                "src": "7722:75:56"
                              },
                              "nativeSrc": "7722:75:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "7722:75:56"
                            },
                            {
                              "nativeSrc": "7806:32:56",
                              "nodeType": "YulAssignment",
                              "src": "7806:32:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7821:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "7821:3:56"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "7826:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "7826:6:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7817:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "7817:3:56"
                                    },
                                    "nativeSrc": "7817:16:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7817:16:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7835:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "7835:2:56",
                                    "type": "",
                                    "value": "27"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7813:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7813:3:56"
                                },
                                "nativeSrc": "7813:25:56",
                                "nodeType": "YulFunctionCall",
                                "src": "7813:25:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "7806:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "7806:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_06bc3ef3eee4fdcce3195cef9d74d258aba0896341bc2c935480fe386e382b3e_t_string_memory_ptr__to_t_bytes27_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "7395:449:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "7601:3:56",
                            "nodeType": "YulTypedName",
                            "src": "7601:3:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "7606:6:56",
                            "nodeType": "YulTypedName",
                            "src": "7606:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "7617:3:56",
                            "nodeType": "YulTypedName",
                            "src": "7617:3:56",
                            "type": ""
                          }
                        ],
                        "src": "7395:449:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "8079:221:56",
                          "nodeType": "YulBlock",
                          "src": "8079:221:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "8096:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8096:3:56"
                                  },
                                  {
                                    "hexValue": "726f7574657220636f6e7472616374206465706c6f7965642061743a20",
                                    "kind": "string",
                                    "nativeSrc": "8101:31:56",
                                    "nodeType": "YulLiteral",
                                    "src": "8101:31:56",
                                    "type": "",
                                    "value": "router contract deployed at: "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "8089:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8089:6:56"
                                },
                                "nativeSrc": "8089:44:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8089:44:56"
                              },
                              "nativeSrc": "8089:44:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "8089:44:56"
                            },
                            {
                              "nativeSrc": "8142:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8142:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "8162:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8162:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "8156:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8156:5:56"
                                },
                                "nativeSrc": "8156:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8156:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "8146:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "8146:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "8217:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8217:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8225:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "8225:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8213:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "8213:3:56"
                                    },
                                    "nativeSrc": "8213:17:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8213:17:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "8236:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8236:3:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8241:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "8241:2:56",
                                        "type": "",
                                        "value": "29"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8232:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "8232:3:56"
                                    },
                                    "nativeSrc": "8232:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8232:12:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "8246:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8246:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "8178:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8178:34:56"
                                },
                                "nativeSrc": "8178:75:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8178:75:56"
                              },
                              "nativeSrc": "8178:75:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "8178:75:56"
                            },
                            {
                              "nativeSrc": "8262:32:56",
                              "nodeType": "YulAssignment",
                              "src": "8262:32:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "8277:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8277:3:56"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "8282:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8282:6:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8273:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "8273:3:56"
                                    },
                                    "nativeSrc": "8273:16:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8273:16:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8291:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "8291:2:56",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8269:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8269:3:56"
                                },
                                "nativeSrc": "8269:25:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8269:25:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "8262:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8262:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_5d7c56fcc4e141be4faeb6cfd4880f29589549ce44f76d87ef22b113d79741ad_t_string_memory_ptr__to_t_bytes29_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "7849:451:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "8055:3:56",
                            "nodeType": "YulTypedName",
                            "src": "8055:3:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "8060:6:56",
                            "nodeType": "YulTypedName",
                            "src": "8060:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "8071:3:56",
                            "nodeType": "YulTypedName",
                            "src": "8071:3:56",
                            "type": ""
                          }
                        ],
                        "src": "7849:451:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "8444:1537:56",
                          "nodeType": "YulBlock",
                          "src": "8444:1537:56",
                          "statements": [
                            {
                              "nativeSrc": "8454:12:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8454:12:56",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "8464:2:56",
                                "nodeType": "YulLiteral",
                                "src": "8464:2:56",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "8458:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "8458:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "8511:16:56",
                                "nodeType": "YulBlock",
                                "src": "8511:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8520:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "8520:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8523:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "8523:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "8513:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8513:6:56"
                                      },
                                      "nativeSrc": "8513:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8513:12:56"
                                    },
                                    "nativeSrc": "8513:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8513:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "8486:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8486:7:56"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8495:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8495:9:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "8482:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "8482:3:56"
                                    },
                                    "nativeSrc": "8482:23:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8482:23:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "8507:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8507:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "8478:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8478:3:56"
                                },
                                "nativeSrc": "8478:32:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8478:32:56"
                              },
                              "nativeSrc": "8475:52:56",
                              "nodeType": "YulIf",
                              "src": "8475:52:56"
                            },
                            {
                              "nativeSrc": "8536:30:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8536:30:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "8556:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8556:9:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "8550:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8550:5:56"
                                },
                                "nativeSrc": "8550:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8550:16:56"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "8540:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "8540:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "8575:28:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8575:28:56",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "8585:18:56",
                                "nodeType": "YulLiteral",
                                "src": "8585:18:56",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nativeSrc": "8579:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "8579:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "8630:16:56",
                                "nodeType": "YulBlock",
                                "src": "8630:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8639:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "8639:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8642:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "8642:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "8632:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8632:6:56"
                                      },
                                      "nativeSrc": "8632:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8632:12:56"
                                    },
                                    "nativeSrc": "8632:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8632:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "8618:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8618:6:56"
                                  },
                                  {
                                    "name": "_2",
                                    "nativeSrc": "8626:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8626:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "8615:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8615:2:56"
                                },
                                "nativeSrc": "8615:14:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8615:14:56"
                              },
                              "nativeSrc": "8612:34:56",
                              "nodeType": "YulIf",
                              "src": "8612:34:56"
                            },
                            {
                              "nativeSrc": "8655:32:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8655:32:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "8669:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8669:9:56"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "8680:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8680:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8665:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8665:3:56"
                                },
                                "nativeSrc": "8665:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8665:22:56"
                              },
                              "variables": [
                                {
                                  "name": "_3",
                                  "nativeSrc": "8659:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "8659:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "8735:16:56",
                                "nodeType": "YulBlock",
                                "src": "8735:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8744:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "8744:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8747:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "8747:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "8737:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8737:6:56"
                                      },
                                      "nativeSrc": "8737:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8737:12:56"
                                    },
                                    "nativeSrc": "8737:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8737:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nativeSrc": "8714:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "8714:2:56"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "8718:4:56",
                                            "nodeType": "YulLiteral",
                                            "src": "8718:4:56",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "8710:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "8710:3:56"
                                        },
                                        "nativeSrc": "8710:13:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "8710:13:56"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "8725:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8725:7:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nativeSrc": "8706:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "8706:3:56"
                                    },
                                    "nativeSrc": "8706:27:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8706:27:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "8699:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8699:6:56"
                                },
                                "nativeSrc": "8699:35:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8699:35:56"
                              },
                              "nativeSrc": "8696:55:56",
                              "nodeType": "YulIf",
                              "src": "8696:55:56"
                            },
                            {
                              "nativeSrc": "8760:19:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8760:19:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nativeSrc": "8776:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8776:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "8770:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8770:5:56"
                                },
                                "nativeSrc": "8770:9:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8770:9:56"
                              },
                              "variables": [
                                {
                                  "name": "_4",
                                  "nativeSrc": "8764:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "8764:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "8802:22:56",
                                "nodeType": "YulBlock",
                                "src": "8802:22:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nativeSrc": "8804:16:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8804:16:56"
                                      },
                                      "nativeSrc": "8804:18:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8804:18:56"
                                    },
                                    "nativeSrc": "8804:18:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8804:18:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "_4",
                                    "nativeSrc": "8794:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8794:2:56"
                                  },
                                  {
                                    "name": "_2",
                                    "nativeSrc": "8798:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8798:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "8791:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8791:2:56"
                                },
                                "nativeSrc": "8791:10:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8791:10:56"
                              },
                              "nativeSrc": "8788:36:56",
                              "nodeType": "YulIf",
                              "src": "8788:36:56"
                            },
                            {
                              "nativeSrc": "8833:47:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8833:47:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "8868:1:56",
                                            "nodeType": "YulLiteral",
                                            "src": "8868:1:56",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "_4",
                                            "nativeSrc": "8871:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "8871:2:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "8864:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "8864:3:56"
                                        },
                                        "nativeSrc": "8864:10:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "8864:10:56"
                                      },
                                      {
                                        "name": "_1",
                                        "nativeSrc": "8876:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8876:2:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8860:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "8860:3:56"
                                    },
                                    "nativeSrc": "8860:19:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8860:19:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "allocate_memory",
                                  "nativeSrc": "8844:15:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8844:15:56"
                                },
                                "nativeSrc": "8844:36:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8844:36:56"
                              },
                              "variables": [
                                {
                                  "name": "dst",
                                  "nativeSrc": "8837:3:56",
                                  "nodeType": "YulTypedName",
                                  "src": "8837:3:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "8889:16:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8889:16:56",
                              "value": {
                                "name": "dst",
                                "nativeSrc": "8902:3:56",
                                "nodeType": "YulIdentifier",
                                "src": "8902:3:56"
                              },
                              "variables": [
                                {
                                  "name": "dst_1",
                                  "nativeSrc": "8893:5:56",
                                  "nodeType": "YulTypedName",
                                  "src": "8893:5:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "8921:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8921:3:56"
                                  },
                                  {
                                    "name": "_4",
                                    "nativeSrc": "8926:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8926:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "8914:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8914:6:56"
                                },
                                "nativeSrc": "8914:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8914:15:56"
                              },
                              "nativeSrc": "8914:15:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "8914:15:56"
                            },
                            {
                              "nativeSrc": "8938:19:56",
                              "nodeType": "YulAssignment",
                              "src": "8938:19:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "8949:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8949:3:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "8954:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "8954:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8945:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8945:3:56"
                                },
                                "nativeSrc": "8945:12:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8945:12:56"
                              },
                              "variableNames": [
                                {
                                  "name": "dst",
                                  "nativeSrc": "8938:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8938:3:56"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "8966:42:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8966:42:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nativeSrc": "8988:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "8988:2:56"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "8996:1:56",
                                            "nodeType": "YulLiteral",
                                            "src": "8996:1:56",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "_4",
                                            "nativeSrc": "8999:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "8999:2:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "8992:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "8992:3:56"
                                        },
                                        "nativeSrc": "8992:10:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "8992:10:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8984:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "8984:3:56"
                                    },
                                    "nativeSrc": "8984:19:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8984:19:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "9005:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "9005:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8980:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "8980:3:56"
                                },
                                "nativeSrc": "8980:28:56",
                                "nodeType": "YulFunctionCall",
                                "src": "8980:28:56"
                              },
                              "variables": [
                                {
                                  "name": "srcEnd",
                                  "nativeSrc": "8970:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "8970:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "9040:16:56",
                                "nodeType": "YulBlock",
                                "src": "9040:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "9049:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "9049:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "9052:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "9052:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "9042:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9042:6:56"
                                      },
                                      "nativeSrc": "9042:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9042:12:56"
                                    },
                                    "nativeSrc": "9042:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9042:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "srcEnd",
                                    "nativeSrc": "9023:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "9023:6:56"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9031:7:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "9031:7:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "9020:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "9020:2:56"
                                },
                                "nativeSrc": "9020:19:56",
                                "nodeType": "YulFunctionCall",
                                "src": "9020:19:56"
                              },
                              "nativeSrc": "9017:39:56",
                              "nodeType": "YulIf",
                              "src": "9017:39:56"
                            },
                            {
                              "nativeSrc": "9065:22:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9065:22:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nativeSrc": "9080:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "9080:2:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "9084:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "9084:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9076:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "9076:3:56"
                                },
                                "nativeSrc": "9076:11:56",
                                "nodeType": "YulFunctionCall",
                                "src": "9076:11:56"
                              },
                              "variables": [
                                {
                                  "name": "src",
                                  "nativeSrc": "9069:3:56",
                                  "nodeType": "YulTypedName",
                                  "src": "9069:3:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "9152:799:56",
                                "nodeType": "YulBlock",
                                "src": "9152:799:56",
                                "statements": [
                                  {
                                    "nativeSrc": "9166:29:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "9166:29:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nativeSrc": "9191:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9191:3:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nativeSrc": "9185:5:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9185:5:56"
                                      },
                                      "nativeSrc": "9185:10:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9185:10:56"
                                    },
                                    "variables": [
                                      {
                                        "name": "innerOffset",
                                        "nativeSrc": "9170:11:56",
                                        "nodeType": "YulTypedName",
                                        "src": "9170:11:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "9231:16:56",
                                      "nodeType": "YulBlock",
                                      "src": "9231:16:56",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "9240:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "9240:1:56",
                                                "type": "",
                                                "value": "0"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "9243:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "9243:1:56",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nativeSrc": "9233:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9233:6:56"
                                            },
                                            "nativeSrc": "9233:12:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "9233:12:56"
                                          },
                                          "nativeSrc": "9233:12:56",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "9233:12:56"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "innerOffset",
                                          "nativeSrc": "9214:11:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9214:11:56"
                                        },
                                        {
                                          "name": "_2",
                                          "nativeSrc": "9227:2:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9227:2:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nativeSrc": "9211:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9211:2:56"
                                      },
                                      "nativeSrc": "9211:19:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9211:19:56"
                                    },
                                    "nativeSrc": "9208:39:56",
                                    "nodeType": "YulIf",
                                    "src": "9208:39:56"
                                  },
                                  {
                                    "nativeSrc": "9260:30:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "9260:30:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nativeSrc": "9274:2:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9274:2:56"
                                        },
                                        {
                                          "name": "innerOffset",
                                          "nativeSrc": "9278:11:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9278:11:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "9270:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9270:3:56"
                                      },
                                      "nativeSrc": "9270:20:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9270:20:56"
                                    },
                                    "variables": [
                                      {
                                        "name": "_5",
                                        "nativeSrc": "9264:2:56",
                                        "nodeType": "YulTypedName",
                                        "src": "9264:2:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "9340:16:56",
                                      "nodeType": "YulBlock",
                                      "src": "9340:16:56",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "9349:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "9349:1:56",
                                                "type": "",
                                                "value": "0"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "9352:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "9352:1:56",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nativeSrc": "9342:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9342:6:56"
                                            },
                                            "nativeSrc": "9342:12:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "9342:12:56"
                                          },
                                          "nativeSrc": "9342:12:56",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "9342:12:56"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "_5",
                                                  "nativeSrc": "9321:2:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "9321:2:56"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "9325:2:56",
                                                  "nodeType": "YulLiteral",
                                                  "src": "9325:2:56",
                                                  "type": "",
                                                  "value": "63"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "9317:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "9317:3:56"
                                              },
                                              "nativeSrc": "9317:11:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "9317:11:56"
                                            },
                                            {
                                              "name": "dataEnd",
                                              "nativeSrc": "9330:7:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9330:7:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "slt",
                                            "nativeSrc": "9313:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "9313:3:56"
                                          },
                                          "nativeSrc": "9313:25:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "9313:25:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "iszero",
                                        "nativeSrc": "9306:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9306:6:56"
                                      },
                                      "nativeSrc": "9306:33:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9306:33:56"
                                    },
                                    "nativeSrc": "9303:53:56",
                                    "nodeType": "YulIf",
                                    "src": "9303:53:56"
                                  },
                                  {
                                    "nativeSrc": "9369:35:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "9369:35:56",
                                    "value": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "allocate_memory_3055",
                                        "nativeSrc": "9382:20:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9382:20:56"
                                      },
                                      "nativeSrc": "9382:22:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9382:22:56"
                                    },
                                    "variables": [
                                      {
                                        "name": "dst_2",
                                        "nativeSrc": "9373:5:56",
                                        "nodeType": "YulTypedName",
                                        "src": "9373:5:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "9417:18:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "9417:18:56",
                                    "value": {
                                      "name": "dst_2",
                                      "nativeSrc": "9430:5:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "9430:5:56"
                                    },
                                    "variables": [
                                      {
                                        "name": "dst_3",
                                        "nativeSrc": "9421:5:56",
                                        "nodeType": "YulTypedName",
                                        "src": "9421:5:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "9476:16:56",
                                      "nodeType": "YulBlock",
                                      "src": "9476:16:56",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "9485:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "9485:1:56",
                                                "type": "",
                                                "value": "0"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "9488:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "9488:1:56",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nativeSrc": "9478:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9478:6:56"
                                            },
                                            "nativeSrc": "9478:12:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "9478:12:56"
                                          },
                                          "nativeSrc": "9478:12:56",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "9478:12:56"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_5",
                                              "nativeSrc": "9458:2:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9458:2:56"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "9462:2:56",
                                              "nodeType": "YulLiteral",
                                              "src": "9462:2:56",
                                              "type": "",
                                              "value": "96"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "9454:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "9454:3:56"
                                          },
                                          "nativeSrc": "9454:11:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "9454:11:56"
                                        },
                                        {
                                          "name": "dataEnd",
                                          "nativeSrc": "9467:7:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9467:7:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nativeSrc": "9451:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9451:2:56"
                                      },
                                      "nativeSrc": "9451:24:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9451:24:56"
                                    },
                                    "nativeSrc": "9448:44:56",
                                    "nodeType": "YulIf",
                                    "src": "9448:44:56"
                                  },
                                  {
                                    "nativeSrc": "9505:24:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "9505:24:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "_5",
                                          "nativeSrc": "9522:2:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9522:2:56"
                                        },
                                        {
                                          "name": "_1",
                                          "nativeSrc": "9526:2:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9526:2:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "9518:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9518:3:56"
                                      },
                                      "nativeSrc": "9518:11:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9518:11:56"
                                    },
                                    "variables": [
                                      {
                                        "name": "src_1",
                                        "nativeSrc": "9509:5:56",
                                        "nodeType": "YulTypedName",
                                        "src": "9509:5:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "9613:265:56",
                                      "nodeType": "YulBlock",
                                      "src": "9613:265:56",
                                      "statements": [
                                        {
                                          "nativeSrc": "9631:33:56",
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "9631:33:56",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "src_1",
                                                "nativeSrc": "9658:5:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "9658:5:56"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "9652:5:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9652:5:56"
                                            },
                                            "nativeSrc": "9652:12:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "9652:12:56"
                                          },
                                          "variables": [
                                            {
                                              "name": "innerOffset_1",
                                              "nativeSrc": "9635:13:56",
                                              "nodeType": "YulTypedName",
                                              "src": "9635:13:56",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "body": {
                                            "nativeSrc": "9706:16:56",
                                            "nodeType": "YulBlock",
                                            "src": "9706:16:56",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nativeSrc": "9715:1:56",
                                                      "nodeType": "YulLiteral",
                                                      "src": "9715:1:56",
                                                      "type": "",
                                                      "value": "0"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nativeSrc": "9718:1:56",
                                                      "nodeType": "YulLiteral",
                                                      "src": "9718:1:56",
                                                      "type": "",
                                                      "value": "0"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "revert",
                                                    "nativeSrc": "9708:6:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "9708:6:56"
                                                  },
                                                  "nativeSrc": "9708:12:56",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "9708:12:56"
                                                },
                                                "nativeSrc": "9708:12:56",
                                                "nodeType": "YulExpressionStatement",
                                                "src": "9708:12:56"
                                              }
                                            ]
                                          },
                                          "condition": {
                                            "arguments": [
                                              {
                                                "name": "innerOffset_1",
                                                "nativeSrc": "9687:13:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "9687:13:56"
                                              },
                                              {
                                                "name": "_2",
                                                "nativeSrc": "9702:2:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "9702:2:56"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "gt",
                                              "nativeSrc": "9684:2:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9684:2:56"
                                            },
                                            "nativeSrc": "9684:21:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "9684:21:56"
                                          },
                                          "nativeSrc": "9681:41:56",
                                          "nodeType": "YulIf",
                                          "src": "9681:41:56"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dst_2",
                                                "nativeSrc": "9746:5:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "9746:5:56"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "name": "_5",
                                                            "nativeSrc": "9790:2:56",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "9790:2:56"
                                                          },
                                                          {
                                                            "name": "innerOffset_1",
                                                            "nativeSrc": "9794:13:56",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "9794:13:56"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "add",
                                                          "nativeSrc": "9786:3:56",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "9786:3:56"
                                                        },
                                                        "nativeSrc": "9786:22:56",
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "9786:22:56"
                                                      },
                                                      {
                                                        "name": "_1",
                                                        "nativeSrc": "9810:2:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "9810:2:56"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "9782:3:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "9782:3:56"
                                                    },
                                                    "nativeSrc": "9782:31:56",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "9782:31:56"
                                                  },
                                                  {
                                                    "name": "dataEnd",
                                                    "nativeSrc": "9815:7:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "9815:7:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "abi_decode_string_fromMemory",
                                                  "nativeSrc": "9753:28:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "9753:28:56"
                                                },
                                                "nativeSrc": "9753:70:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "9753:70:56"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nativeSrc": "9739:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9739:6:56"
                                            },
                                            "nativeSrc": "9739:85:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "9739:85:56"
                                          },
                                          "nativeSrc": "9739:85:56",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "9739:85:56"
                                        },
                                        {
                                          "nativeSrc": "9841:23:56",
                                          "nodeType": "YulAssignment",
                                          "src": "9841:23:56",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dst_2",
                                                "nativeSrc": "9854:5:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "9854:5:56"
                                              },
                                              {
                                                "name": "_1",
                                                "nativeSrc": "9861:2:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "9861:2:56"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "9850:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9850:3:56"
                                            },
                                            "nativeSrc": "9850:14:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "9850:14:56"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dst_2",
                                              "nativeSrc": "9841:5:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9841:5:56"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "src_1",
                                          "nativeSrc": "9553:5:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9553:5:56"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "_5",
                                              "nativeSrc": "9564:2:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9564:2:56"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "9568:2:56",
                                              "nodeType": "YulLiteral",
                                              "src": "9568:2:56",
                                              "type": "",
                                              "value": "96"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "9560:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "9560:3:56"
                                          },
                                          "nativeSrc": "9560:11:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "9560:11:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "9550:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9550:2:56"
                                      },
                                      "nativeSrc": "9550:22:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9550:22:56"
                                    },
                                    "nativeSrc": "9542:336:56",
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nativeSrc": "9573:27:56",
                                      "nodeType": "YulBlock",
                                      "src": "9573:27:56",
                                      "statements": [
                                        {
                                          "nativeSrc": "9575:23:56",
                                          "nodeType": "YulAssignment",
                                          "src": "9575:23:56",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "src_1",
                                                "nativeSrc": "9588:5:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "9588:5:56"
                                              },
                                              {
                                                "name": "_1",
                                                "nativeSrc": "9595:2:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "9595:2:56"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "9584:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9584:3:56"
                                            },
                                            "nativeSrc": "9584:14:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "9584:14:56"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "src_1",
                                              "nativeSrc": "9575:5:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "9575:5:56"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nativeSrc": "9546:3:56",
                                      "nodeType": "YulBlock",
                                      "src": "9546:3:56",
                                      "statements": []
                                    },
                                    "src": "9542:336:56"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nativeSrc": "9898:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9898:3:56"
                                        },
                                        {
                                          "name": "dst_3",
                                          "nativeSrc": "9903:5:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9903:5:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nativeSrc": "9891:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9891:6:56"
                                      },
                                      "nativeSrc": "9891:18:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9891:18:56"
                                    },
                                    "nativeSrc": "9891:18:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9891:18:56"
                                  },
                                  {
                                    "nativeSrc": "9922:19:56",
                                    "nodeType": "YulAssignment",
                                    "src": "9922:19:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nativeSrc": "9933:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9933:3:56"
                                        },
                                        {
                                          "name": "_1",
                                          "nativeSrc": "9938:2:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9938:2:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "9929:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9929:3:56"
                                      },
                                      "nativeSrc": "9929:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9929:12:56"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "dst",
                                        "nativeSrc": "9922:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9922:3:56"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "9107:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "9107:3:56"
                                  },
                                  {
                                    "name": "srcEnd",
                                    "nativeSrc": "9112:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "9112:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "9104:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "9104:2:56"
                                },
                                "nativeSrc": "9104:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "9104:15:56"
                              },
                              "nativeSrc": "9096:855:56",
                              "nodeType": "YulForLoop",
                              "post": {
                                "nativeSrc": "9120:23:56",
                                "nodeType": "YulBlock",
                                "src": "9120:23:56",
                                "statements": [
                                  {
                                    "nativeSrc": "9122:19:56",
                                    "nodeType": "YulAssignment",
                                    "src": "9122:19:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nativeSrc": "9133:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9133:3:56"
                                        },
                                        {
                                          "name": "_1",
                                          "nativeSrc": "9138:2:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "9138:2:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "9129:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9129:3:56"
                                      },
                                      "nativeSrc": "9129:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9129:12:56"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "src",
                                        "nativeSrc": "9122:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "9122:3:56"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nativeSrc": "9100:3:56",
                                "nodeType": "YulBlock",
                                "src": "9100:3:56",
                                "statements": []
                              },
                              "src": "9096:855:56"
                            },
                            {
                              "nativeSrc": "9960:15:56",
                              "nodeType": "YulAssignment",
                              "src": "9960:15:56",
                              "value": {
                                "name": "dst_1",
                                "nativeSrc": "9970:5:56",
                                "nodeType": "YulIdentifier",
                                "src": "9970:5:56"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "9960:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "9960:6:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_array$_t_string_memory_ptr_$2_memory_ptr_$dyn_memory_ptr_fromMemory",
                        "nativeSrc": "8305:1676:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "8410:9:56",
                            "nodeType": "YulTypedName",
                            "src": "8410:9:56",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "8421:7:56",
                            "nodeType": "YulTypedName",
                            "src": "8421:7:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "8433:6:56",
                            "nodeType": "YulTypedName",
                            "src": "8433:6:56",
                            "type": ""
                          }
                        ],
                        "src": "8305:1676:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "10018:95:56",
                          "nodeType": "YulBlock",
                          "src": "10018:95:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10035:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10035:1:56",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10042:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "10042:3:56",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10047:10:56",
                                        "nodeType": "YulLiteral",
                                        "src": "10047:10:56",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "10038:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "10038:3:56"
                                    },
                                    "nativeSrc": "10038:20:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10038:20:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10028:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10028:6:56"
                                },
                                "nativeSrc": "10028:31:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10028:31:56"
                              },
                              "nativeSrc": "10028:31:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10028:31:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10075:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10075:1:56",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10078:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10078:4:56",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10068:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10068:6:56"
                                },
                                "nativeSrc": "10068:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10068:15:56"
                              },
                              "nativeSrc": "10068:15:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10068:15:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10099:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10099:1:56",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10102:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10102:4:56",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "10092:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10092:6:56"
                                },
                                "nativeSrc": "10092:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10092:15:56"
                              },
                              "nativeSrc": "10092:15:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10092:15:56"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nativeSrc": "9986:127:56",
                        "nodeType": "YulFunctionDefinition",
                        "src": "9986:127:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "10150:95:56",
                          "nodeType": "YulBlock",
                          "src": "10150:95:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10167:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10167:1:56",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10174:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "10174:3:56",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10179:10:56",
                                        "nodeType": "YulLiteral",
                                        "src": "10179:10:56",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "10170:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "10170:3:56"
                                    },
                                    "nativeSrc": "10170:20:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10170:20:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10160:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10160:6:56"
                                },
                                "nativeSrc": "10160:31:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10160:31:56"
                              },
                              "nativeSrc": "10160:31:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10160:31:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10207:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10207:1:56",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10210:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10210:4:56",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10200:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10200:6:56"
                                },
                                "nativeSrc": "10200:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10200:15:56"
                              },
                              "nativeSrc": "10200:15:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10200:15:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10231:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10231:1:56",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10234:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10234:4:56",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "10224:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10224:6:56"
                                },
                                "nativeSrc": "10224:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10224:15:56"
                              },
                              "nativeSrc": "10224:15:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10224:15:56"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nativeSrc": "10118:127:56",
                        "nodeType": "YulFunctionDefinition",
                        "src": "10118:127:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "10297:88:56",
                          "nodeType": "YulBlock",
                          "src": "10297:88:56",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "10328:22:56",
                                "nodeType": "YulBlock",
                                "src": "10328:22:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nativeSrc": "10330:16:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "10330:16:56"
                                      },
                                      "nativeSrc": "10330:18:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "10330:18:56"
                                    },
                                    "nativeSrc": "10330:18:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10330:18:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "10313:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "10313:5:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10324:1:56",
                                        "nodeType": "YulLiteral",
                                        "src": "10324:1:56",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "10320:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "10320:3:56"
                                    },
                                    "nativeSrc": "10320:6:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10320:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "10310:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10310:2:56"
                                },
                                "nativeSrc": "10310:17:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10310:17:56"
                              },
                              "nativeSrc": "10307:43:56",
                              "nodeType": "YulIf",
                              "src": "10307:43:56"
                            },
                            {
                              "nativeSrc": "10359:20:56",
                              "nodeType": "YulAssignment",
                              "src": "10359:20:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "10370:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "10370:5:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10377:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10377:1:56",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10366:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10366:3:56"
                                },
                                "nativeSrc": "10366:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10366:13:56"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nativeSrc": "10359:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10359:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nativeSrc": "10250:135:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nativeSrc": "10279:5:56",
                            "nodeType": "YulTypedName",
                            "src": "10279:5:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nativeSrc": "10289:3:56",
                            "nodeType": "YulTypedName",
                            "src": "10289:3:56",
                            "type": ""
                          }
                        ],
                        "src": "10250:135:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "10564:240:56",
                          "nodeType": "YulBlock",
                          "src": "10564:240:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10581:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "10581:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10592:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10592:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10574:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10574:6:56"
                                },
                                "nativeSrc": "10574:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10574:21:56"
                              },
                              "nativeSrc": "10574:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10574:21:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10615:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "10615:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10626:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "10626:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10611:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "10611:3:56"
                                    },
                                    "nativeSrc": "10611:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10611:18:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10631:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10631:2:56",
                                    "type": "",
                                    "value": "50"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10604:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10604:6:56"
                                },
                                "nativeSrc": "10604:30:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10604:30:56"
                              },
                              "nativeSrc": "10604:30:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10604:30:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10654:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "10654:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10665:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "10665:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10650:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "10650:3:56"
                                    },
                                    "nativeSrc": "10650:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10650:18:56"
                                  },
                                  {
                                    "hexValue": "537464436861696e7320676574436861696e2875696e74323536293a20436861",
                                    "kind": "string",
                                    "nativeSrc": "10670:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10670:34:56",
                                    "type": "",
                                    "value": "StdChains getChain(uint256): Cha"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10643:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10643:6:56"
                                },
                                "nativeSrc": "10643:62:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10643:62:56"
                              },
                              "nativeSrc": "10643:62:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10643:62:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10725:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "10725:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10736:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "10736:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10721:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "10721:3:56"
                                    },
                                    "nativeSrc": "10721:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10721:18:56"
                                  },
                                  {
                                    "hexValue": "696e2049442063616e6e6f7420626520302e",
                                    "kind": "string",
                                    "nativeSrc": "10741:20:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10741:20:56",
                                    "type": "",
                                    "value": "in ID cannot be 0."
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10714:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10714:6:56"
                                },
                                "nativeSrc": "10714:48:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10714:48:56"
                              },
                              "nativeSrc": "10714:48:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10714:48:56"
                            },
                            {
                              "nativeSrc": "10771:27:56",
                              "nodeType": "YulAssignment",
                              "src": "10771:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10783:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "10783:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10794:3:56",
                                    "nodeType": "YulLiteral",
                                    "src": "10794:3:56",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10779:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10779:3:56"
                                },
                                "nativeSrc": "10779:19:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10779:19:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "10771:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10771:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_64f1cd082b277ed92a70b6890cc1e3b6ebd77bc6c9299e7ce82305de04926a4a__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "10390:414:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "10541:9:56",
                            "nodeType": "YulTypedName",
                            "src": "10541:9:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "10555:4:56",
                            "nodeType": "YulTypedName",
                            "src": "10555:4:56",
                            "type": ""
                          }
                        ],
                        "src": "10390:414:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "10948:150:56",
                          "nodeType": "YulBlock",
                          "src": "10948:150:56",
                          "statements": [
                            {
                              "nativeSrc": "10958:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "10958:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "10978:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "10978:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "10972:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10972:5:56"
                                },
                                "nativeSrc": "10972:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10972:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "10962:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "10962:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "11033:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "11033:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11041:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "11041:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11029:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "11029:3:56"
                                    },
                                    "nativeSrc": "11029:17:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11029:17:56"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "11048:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11048:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "11053:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11053:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "10994:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "10994:34:56"
                                },
                                "nativeSrc": "10994:66:56",
                                "nodeType": "YulFunctionCall",
                                "src": "10994:66:56"
                              },
                              "nativeSrc": "10994:66:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "10994:66:56"
                            },
                            {
                              "nativeSrc": "11069:23:56",
                              "nodeType": "YulAssignment",
                              "src": "11069:23:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "11080:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11080:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "11085:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11085:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11076:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11076:3:56"
                                },
                                "nativeSrc": "11076:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11076:16:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "11069:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11069:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "10809:289:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "10924:3:56",
                            "nodeType": "YulTypedName",
                            "src": "10924:3:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "10929:6:56",
                            "nodeType": "YulTypedName",
                            "src": "10929:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "10940:3:56",
                            "nodeType": "YulTypedName",
                            "src": "10940:3:56",
                            "type": ""
                          }
                        ],
                        "src": "10809:289:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "11444:330:56",
                          "nodeType": "YulBlock",
                          "src": "11444:330:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "11461:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11461:3:56"
                                  },
                                  {
                                    "hexValue": "537464436861696e7320676574436861696e2875696e74323536293a20436861",
                                    "kind": "string",
                                    "nativeSrc": "11466:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "11466:34:56",
                                    "type": "",
                                    "value": "StdChains getChain(uint256): Cha"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11454:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11454:6:56"
                                },
                                "nativeSrc": "11454:47:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11454:47:56"
                              },
                              "nativeSrc": "11454:47:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "11454:47:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "11521:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "11521:3:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11526:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "11526:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11517:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "11517:3:56"
                                    },
                                    "nativeSrc": "11517:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11517:12:56"
                                  },
                                  {
                                    "hexValue": "696e207769746820494420",
                                    "kind": "string",
                                    "nativeSrc": "11531:13:56",
                                    "nodeType": "YulLiteral",
                                    "src": "11531:13:56",
                                    "type": "",
                                    "value": "in with ID "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11510:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11510:6:56"
                                },
                                "nativeSrc": "11510:35:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11510:35:56"
                              },
                              "nativeSrc": "11510:35:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "11510:35:56"
                            },
                            {
                              "nativeSrc": "11554:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "11554:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "11574:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11574:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "11568:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11568:5:56"
                                },
                                "nativeSrc": "11568:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11568:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "11558:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "11558:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "11629:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "11629:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11637:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "11637:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11625:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "11625:3:56"
                                    },
                                    "nativeSrc": "11625:15:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11625:15:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "11646:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "11646:3:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11651:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "11651:2:56",
                                        "type": "",
                                        "value": "43"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11642:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "11642:3:56"
                                    },
                                    "nativeSrc": "11642:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11642:12:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "11656:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11656:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "11590:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11590:34:56"
                                },
                                "nativeSrc": "11590:73:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11590:73:56"
                              },
                              "nativeSrc": "11590:73:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "11590:73:56"
                            },
                            {
                              "nativeSrc": "11672:26:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "11672:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "11686:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11686:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "11691:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11691:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11682:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11682:3:56"
                                },
                                "nativeSrc": "11682:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11682:16:56"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "11676:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "11676:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "11718:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "11718:2:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11722:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "11722:2:56",
                                        "type": "",
                                        "value": "43"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11714:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "11714:3:56"
                                    },
                                    "nativeSrc": "11714:11:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11714:11:56"
                                  },
                                  {
                                    "hexValue": "206e6f7420666f756e642e",
                                    "kind": "string",
                                    "nativeSrc": "11727:13:56",
                                    "nodeType": "YulLiteral",
                                    "src": "11727:13:56",
                                    "type": "",
                                    "value": " not found."
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11707:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11707:6:56"
                                },
                                "nativeSrc": "11707:34:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11707:34:56"
                              },
                              "nativeSrc": "11707:34:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "11707:34:56"
                            },
                            {
                              "nativeSrc": "11750:18:56",
                              "nodeType": "YulAssignment",
                              "src": "11750:18:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "11761:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11761:2:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11765:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "11765:2:56",
                                    "type": "",
                                    "value": "54"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11757:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11757:3:56"
                                },
                                "nativeSrc": "11757:11:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11757:11:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "11750:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11750:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_ce7b2cad45f1a6d0b9b7bb125e9a8742fce8fed7d742c83265d4a2da4caf457d_t_string_memory_ptr_t_stringliteral_f310d2efb88747fac959fa7567a0a1a161dd43a77ba9af074f6191cf5bcf4f8b__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "11103:671:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "11420:3:56",
                            "nodeType": "YulTypedName",
                            "src": "11420:3:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "11425:6:56",
                            "nodeType": "YulTypedName",
                            "src": "11425:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "11436:3:56",
                            "nodeType": "YulTypedName",
                            "src": "11436:3:56",
                            "type": ""
                          }
                        ],
                        "src": "11103:671:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "11835:65:56",
                          "nodeType": "YulBlock",
                          "src": "11835:65:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11852:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "11852:1:56",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "name": "ptr",
                                    "nativeSrc": "11855:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "11855:3:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11845:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11845:6:56"
                                },
                                "nativeSrc": "11845:14:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11845:14:56"
                              },
                              "nativeSrc": "11845:14:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "11845:14:56"
                            },
                            {
                              "nativeSrc": "11868:26:56",
                              "nodeType": "YulAssignment",
                              "src": "11868:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11886:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "11886:1:56",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11889:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "11889:4:56",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "keccak256",
                                  "nativeSrc": "11876:9:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11876:9:56"
                                },
                                "nativeSrc": "11876:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11876:18:56"
                              },
                              "variableNames": [
                                {
                                  "name": "data",
                                  "nativeSrc": "11868:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11868:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "array_dataslot_string_storage",
                        "nativeSrc": "11779:121:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "ptr",
                            "nativeSrc": "11818:3:56",
                            "nodeType": "YulTypedName",
                            "src": "11818:3:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "data",
                            "nativeSrc": "11826:4:56",
                            "nodeType": "YulTypedName",
                            "src": "11826:4:56",
                            "type": ""
                          }
                        ],
                        "src": "11779:121:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "11986:464:56",
                          "nodeType": "YulBlock",
                          "src": "11986:464:56",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "12019:425:56",
                                "nodeType": "YulBlock",
                                "src": "12019:425:56",
                                "statements": [
                                  {
                                    "nativeSrc": "12033:11:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "12033:11:56",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "12043:1:56",
                                      "nodeType": "YulLiteral",
                                      "src": "12043:1:56",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "12037:2:56",
                                        "nodeType": "YulTypedName",
                                        "src": "12037:2:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "_1",
                                          "nativeSrc": "12064:2:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12064:2:56"
                                        },
                                        {
                                          "name": "array",
                                          "nativeSrc": "12068:5:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12068:5:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nativeSrc": "12057:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "12057:6:56"
                                      },
                                      "nativeSrc": "12057:17:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "12057:17:56"
                                    },
                                    "nativeSrc": "12057:17:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12057:17:56"
                                  },
                                  {
                                    "nativeSrc": "12087:31:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "12087:31:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "_1",
                                          "nativeSrc": "12109:2:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12109:2:56"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "12113:4:56",
                                          "nodeType": "YulLiteral",
                                          "src": "12113:4:56",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "keccak256",
                                        "nativeSrc": "12099:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "12099:9:56"
                                      },
                                      "nativeSrc": "12099:19:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "12099:19:56"
                                    },
                                    "variables": [
                                      {
                                        "name": "data",
                                        "nativeSrc": "12091:4:56",
                                        "nodeType": "YulTypedName",
                                        "src": "12091:4:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "12131:57:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "12131:57:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "data",
                                          "nativeSrc": "12154:4:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12154:4:56"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "12164:1:56",
                                              "nodeType": "YulLiteral",
                                              "src": "12164:1:56",
                                              "type": "",
                                              "value": "5"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "name": "startIndex",
                                                  "nativeSrc": "12171:10:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "12171:10:56"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "12183:2:56",
                                                  "nodeType": "YulLiteral",
                                                  "src": "12183:2:56",
                                                  "type": "",
                                                  "value": "31"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "12167:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "12167:3:56"
                                              },
                                              "nativeSrc": "12167:19:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "12167:19:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shr",
                                            "nativeSrc": "12160:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "12160:3:56"
                                          },
                                          "nativeSrc": "12160:27:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "12160:27:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "12150:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "12150:3:56"
                                      },
                                      "nativeSrc": "12150:38:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "12150:38:56"
                                    },
                                    "variables": [
                                      {
                                        "name": "deleteStart",
                                        "nativeSrc": "12135:11:56",
                                        "nodeType": "YulTypedName",
                                        "src": "12135:11:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "12225:23:56",
                                      "nodeType": "YulBlock",
                                      "src": "12225:23:56",
                                      "statements": [
                                        {
                                          "nativeSrc": "12227:19:56",
                                          "nodeType": "YulAssignment",
                                          "src": "12227:19:56",
                                          "value": {
                                            "name": "data",
                                            "nativeSrc": "12242:4:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "12242:4:56"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "deleteStart",
                                              "nativeSrc": "12227:11:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "12227:11:56"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "startIndex",
                                          "nativeSrc": "12207:10:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12207:10:56"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "12219:4:56",
                                          "nodeType": "YulLiteral",
                                          "src": "12219:4:56",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "12204:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "12204:2:56"
                                      },
                                      "nativeSrc": "12204:20:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "12204:20:56"
                                    },
                                    "nativeSrc": "12201:47:56",
                                    "nodeType": "YulIf",
                                    "src": "12201:47:56"
                                  },
                                  {
                                    "nativeSrc": "12261:41:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "12261:41:56",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "data",
                                          "nativeSrc": "12275:4:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12275:4:56"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "12285:1:56",
                                              "nodeType": "YulLiteral",
                                              "src": "12285:1:56",
                                              "type": "",
                                              "value": "5"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "name": "len",
                                                  "nativeSrc": "12292:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "12292:3:56"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "12297:2:56",
                                                  "nodeType": "YulLiteral",
                                                  "src": "12297:2:56",
                                                  "type": "",
                                                  "value": "31"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "12288:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "12288:3:56"
                                              },
                                              "nativeSrc": "12288:12:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "12288:12:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shr",
                                            "nativeSrc": "12281:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "12281:3:56"
                                          },
                                          "nativeSrc": "12281:20:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "12281:20:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "12271:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "12271:3:56"
                                      },
                                      "nativeSrc": "12271:31:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "12271:31:56"
                                    },
                                    "variables": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "12265:2:56",
                                        "nodeType": "YulTypedName",
                                        "src": "12265:2:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "12315:24:56",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "12315:24:56",
                                    "value": {
                                      "name": "deleteStart",
                                      "nativeSrc": "12328:11:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "12328:11:56"
                                    },
                                    "variables": [
                                      {
                                        "name": "start",
                                        "nativeSrc": "12319:5:56",
                                        "nodeType": "YulTypedName",
                                        "src": "12319:5:56",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "12413:21:56",
                                      "nodeType": "YulBlock",
                                      "src": "12413:21:56",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "start",
                                                "nativeSrc": "12422:5:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "12422:5:56"
                                              },
                                              {
                                                "name": "_1",
                                                "nativeSrc": "12429:2:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "12429:2:56"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "12415:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "12415:6:56"
                                            },
                                            "nativeSrc": "12415:17:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "12415:17:56"
                                          },
                                          "nativeSrc": "12415:17:56",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "12415:17:56"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "start",
                                          "nativeSrc": "12363:5:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12363:5:56"
                                        },
                                        {
                                          "name": "_2",
                                          "nativeSrc": "12370:2:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12370:2:56"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "12360:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "12360:2:56"
                                      },
                                      "nativeSrc": "12360:13:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "12360:13:56"
                                    },
                                    "nativeSrc": "12352:82:56",
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nativeSrc": "12374:26:56",
                                      "nodeType": "YulBlock",
                                      "src": "12374:26:56",
                                      "statements": [
                                        {
                                          "nativeSrc": "12376:22:56",
                                          "nodeType": "YulAssignment",
                                          "src": "12376:22:56",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "start",
                                                "nativeSrc": "12389:5:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "12389:5:56"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "12396:1:56",
                                                "nodeType": "YulLiteral",
                                                "src": "12396:1:56",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "12385:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "12385:3:56"
                                            },
                                            "nativeSrc": "12385:13:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "12385:13:56"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "start",
                                              "nativeSrc": "12376:5:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "12376:5:56"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nativeSrc": "12356:3:56",
                                      "nodeType": "YulBlock",
                                      "src": "12356:3:56",
                                      "statements": []
                                    },
                                    "src": "12352:82:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "len",
                                    "nativeSrc": "12002:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "12002:3:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12007:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "12007:2:56",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "11999:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "11999:2:56"
                                },
                                "nativeSrc": "11999:11:56",
                                "nodeType": "YulFunctionCall",
                                "src": "11999:11:56"
                              },
                              "nativeSrc": "11996:448:56",
                              "nodeType": "YulIf",
                              "src": "11996:448:56"
                            }
                          ]
                        },
                        "name": "clean_up_bytearray_end_slots_string_storage",
                        "nativeSrc": "11905:545:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "array",
                            "nativeSrc": "11958:5:56",
                            "nodeType": "YulTypedName",
                            "src": "11958:5:56",
                            "type": ""
                          },
                          {
                            "name": "len",
                            "nativeSrc": "11965:3:56",
                            "nodeType": "YulTypedName",
                            "src": "11965:3:56",
                            "type": ""
                          },
                          {
                            "name": "startIndex",
                            "nativeSrc": "11970:10:56",
                            "nodeType": "YulTypedName",
                            "src": "11970:10:56",
                            "type": ""
                          }
                        ],
                        "src": "11905:545:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "12540:81:56",
                          "nodeType": "YulBlock",
                          "src": "12540:81:56",
                          "statements": [
                            {
                              "nativeSrc": "12550:65:56",
                              "nodeType": "YulAssignment",
                              "src": "12550:65:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "data",
                                        "nativeSrc": "12565:4:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "12565:4:56"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nativeSrc": "12583:1:56",
                                                    "nodeType": "YulLiteral",
                                                    "src": "12583:1:56",
                                                    "type": "",
                                                    "value": "3"
                                                  },
                                                  {
                                                    "name": "len",
                                                    "nativeSrc": "12586:3:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "12586:3:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nativeSrc": "12579:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "12579:3:56"
                                                },
                                                "nativeSrc": "12579:11:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "12579:11:56"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nativeSrc": "12596:1:56",
                                                    "nodeType": "YulLiteral",
                                                    "src": "12596:1:56",
                                                    "type": "",
                                                    "value": "0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "not",
                                                  "nativeSrc": "12592:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "12592:3:56"
                                                },
                                                "nativeSrc": "12592:6:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "12592:6:56"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shr",
                                              "nativeSrc": "12575:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "12575:3:56"
                                            },
                                            "nativeSrc": "12575:24:56",
                                            "nodeType": "YulFunctionCall",
                                            "src": "12575:24:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nativeSrc": "12571:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12571:3:56"
                                        },
                                        "nativeSrc": "12571:29:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "12571:29:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "12561:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "12561:3:56"
                                    },
                                    "nativeSrc": "12561:40:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12561:40:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "12607:1:56",
                                        "nodeType": "YulLiteral",
                                        "src": "12607:1:56",
                                        "type": "",
                                        "value": "1"
                                      },
                                      {
                                        "name": "len",
                                        "nativeSrc": "12610:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "12610:3:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "12603:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "12603:3:56"
                                    },
                                    "nativeSrc": "12603:11:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12603:11:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nativeSrc": "12558:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "12558:2:56"
                                },
                                "nativeSrc": "12558:57:56",
                                "nodeType": "YulFunctionCall",
                                "src": "12558:57:56"
                              },
                              "variableNames": [
                                {
                                  "name": "used",
                                  "nativeSrc": "12550:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "12550:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "extract_used_part_and_set_length_of_short_byte_array",
                        "nativeSrc": "12455:166:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "data",
                            "nativeSrc": "12517:4:56",
                            "nodeType": "YulTypedName",
                            "src": "12517:4:56",
                            "type": ""
                          },
                          {
                            "name": "len",
                            "nativeSrc": "12523:3:56",
                            "nodeType": "YulTypedName",
                            "src": "12523:3:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "used",
                            "nativeSrc": "12531:4:56",
                            "nodeType": "YulTypedName",
                            "src": "12531:4:56",
                            "type": ""
                          }
                        ],
                        "src": "12455:166:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "12722:1256:56",
                          "nodeType": "YulBlock",
                          "src": "12722:1256:56",
                          "statements": [
                            {
                              "nativeSrc": "12732:24:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "12732:24:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "12752:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "12752:3:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "12746:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "12746:5:56"
                                },
                                "nativeSrc": "12746:10:56",
                                "nodeType": "YulFunctionCall",
                                "src": "12746:10:56"
                              },
                              "variables": [
                                {
                                  "name": "newLen",
                                  "nativeSrc": "12736:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "12736:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "12799:22:56",
                                "nodeType": "YulBlock",
                                "src": "12799:22:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nativeSrc": "12801:16:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "12801:16:56"
                                      },
                                      "nativeSrc": "12801:18:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "12801:18:56"
                                    },
                                    "nativeSrc": "12801:18:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12801:18:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "newLen",
                                    "nativeSrc": "12771:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "12771:6:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12779:18:56",
                                    "nodeType": "YulLiteral",
                                    "src": "12779:18:56",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "12768:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "12768:2:56"
                                },
                                "nativeSrc": "12768:30:56",
                                "nodeType": "YulFunctionCall",
                                "src": "12768:30:56"
                              },
                              "nativeSrc": "12765:56:56",
                              "nodeType": "YulIf",
                              "src": "12765:56:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "slot",
                                    "nativeSrc": "12874:4:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "12874:4:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "slot",
                                            "nativeSrc": "12912:4:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "12912:4:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sload",
                                          "nativeSrc": "12906:5:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "12906:5:56"
                                        },
                                        "nativeSrc": "12906:11:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "12906:11:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "extract_byte_array_length",
                                      "nativeSrc": "12880:25:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "12880:25:56"
                                    },
                                    "nativeSrc": "12880:38:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12880:38:56"
                                  },
                                  {
                                    "name": "newLen",
                                    "nativeSrc": "12920:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "12920:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "clean_up_bytearray_end_slots_string_storage",
                                  "nativeSrc": "12830:43:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "12830:43:56"
                                },
                                "nativeSrc": "12830:97:56",
                                "nodeType": "YulFunctionCall",
                                "src": "12830:97:56"
                              },
                              "nativeSrc": "12830:97:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "12830:97:56"
                            },
                            {
                              "nativeSrc": "12936:18:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "12936:18:56",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "12953:1:56",
                                "nodeType": "YulLiteral",
                                "src": "12953:1:56",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "srcOffset",
                                  "nativeSrc": "12940:9:56",
                                  "nodeType": "YulTypedName",
                                  "src": "12940:9:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "12963:23:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "12963:23:56",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "12982:4:56",
                                "nodeType": "YulLiteral",
                                "src": "12982:4:56",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                {
                                  "name": "srcOffset_1",
                                  "nativeSrc": "12967:11:56",
                                  "nodeType": "YulTypedName",
                                  "src": "12967:11:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "12995:24:56",
                              "nodeType": "YulAssignment",
                              "src": "12995:24:56",
                              "value": {
                                "name": "srcOffset_1",
                                "nativeSrc": "13008:11:56",
                                "nodeType": "YulIdentifier",
                                "src": "13008:11:56"
                              },
                              "variableNames": [
                                {
                                  "name": "srcOffset",
                                  "nativeSrc": "12995:9:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "12995:9:56"
                                }
                              ]
                            },
                            {
                              "cases": [
                                {
                                  "body": {
                                    "nativeSrc": "13065:656:56",
                                    "nodeType": "YulBlock",
                                    "src": "13065:656:56",
                                    "statements": [
                                      {
                                        "nativeSrc": "13079:35:56",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "13079:35:56",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "newLen",
                                              "nativeSrc": "13098:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "13098:6:56"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "13110:2:56",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13110:2:56",
                                                  "type": "",
                                                  "value": "31"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nativeSrc": "13106:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "13106:3:56"
                                              },
                                              "nativeSrc": "13106:7:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "13106:7:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nativeSrc": "13094:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "13094:3:56"
                                          },
                                          "nativeSrc": "13094:20:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "13094:20:56"
                                        },
                                        "variables": [
                                          {
                                            "name": "loopEnd",
                                            "nativeSrc": "13083:7:56",
                                            "nodeType": "YulTypedName",
                                            "src": "13083:7:56",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "nativeSrc": "13127:49:56",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "13127:49:56",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "slot",
                                              "nativeSrc": "13171:4:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "13171:4:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "array_dataslot_string_storage",
                                            "nativeSrc": "13141:29:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "13141:29:56"
                                          },
                                          "nativeSrc": "13141:35:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "13141:35:56"
                                        },
                                        "variables": [
                                          {
                                            "name": "dstPtr",
                                            "nativeSrc": "13131:6:56",
                                            "nodeType": "YulTypedName",
                                            "src": "13131:6:56",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "nativeSrc": "13189:10:56",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "13189:10:56",
                                        "value": {
                                          "kind": "number",
                                          "nativeSrc": "13198:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "13198:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        "variables": [
                                          {
                                            "name": "i",
                                            "nativeSrc": "13193:1:56",
                                            "nodeType": "YulTypedName",
                                            "src": "13193:1:56",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "body": {
                                          "nativeSrc": "13276:172:56",
                                          "nodeType": "YulBlock",
                                          "src": "13276:172:56",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "name": "dstPtr",
                                                    "nativeSrc": "13301:6:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13301:6:56"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "name": "src",
                                                            "nativeSrc": "13319:3:56",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "13319:3:56"
                                                          },
                                                          {
                                                            "name": "srcOffset",
                                                            "nativeSrc": "13324:9:56",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "13324:9:56"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "add",
                                                          "nativeSrc": "13315:3:56",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "13315:3:56"
                                                        },
                                                        "nativeSrc": "13315:19:56",
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "13315:19:56"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "mload",
                                                      "nativeSrc": "13309:5:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13309:5:56"
                                                    },
                                                    "nativeSrc": "13309:26:56",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13309:26:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sstore",
                                                  "nativeSrc": "13294:6:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13294:6:56"
                                                },
                                                "nativeSrc": "13294:42:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13294:42:56"
                                              },
                                              "nativeSrc": "13294:42:56",
                                              "nodeType": "YulExpressionStatement",
                                              "src": "13294:42:56"
                                            },
                                            {
                                              "nativeSrc": "13353:24:56",
                                              "nodeType": "YulAssignment",
                                              "src": "13353:24:56",
                                              "value": {
                                                "arguments": [
                                                  {
                                                    "name": "dstPtr",
                                                    "nativeSrc": "13367:6:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13367:6:56"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nativeSrc": "13375:1:56",
                                                    "nodeType": "YulLiteral",
                                                    "src": "13375:1:56",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "13363:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13363:3:56"
                                                },
                                                "nativeSrc": "13363:14:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13363:14:56"
                                              },
                                              "variableNames": [
                                                {
                                                  "name": "dstPtr",
                                                  "nativeSrc": "13353:6:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13353:6:56"
                                                }
                                              ]
                                            },
                                            {
                                              "nativeSrc": "13394:40:56",
                                              "nodeType": "YulAssignment",
                                              "src": "13394:40:56",
                                              "value": {
                                                "arguments": [
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "13411:9:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13411:9:56"
                                                  },
                                                  {
                                                    "name": "srcOffset_1",
                                                    "nativeSrc": "13422:11:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13422:11:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "13407:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13407:3:56"
                                                },
                                                "nativeSrc": "13407:27:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13407:27:56"
                                              },
                                              "variableNames": [
                                                {
                                                  "name": "srcOffset",
                                                  "nativeSrc": "13394:9:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13394:9:56"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        "condition": {
                                          "arguments": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "13223:1:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "13223:1:56"
                                            },
                                            {
                                              "name": "loopEnd",
                                              "nativeSrc": "13226:7:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "13226:7:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "lt",
                                            "nativeSrc": "13220:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "13220:2:56"
                                          },
                                          "nativeSrc": "13220:14:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "13220:14:56"
                                        },
                                        "nativeSrc": "13212:236:56",
                                        "nodeType": "YulForLoop",
                                        "post": {
                                          "nativeSrc": "13235:28:56",
                                          "nodeType": "YulBlock",
                                          "src": "13235:28:56",
                                          "statements": [
                                            {
                                              "nativeSrc": "13237:24:56",
                                              "nodeType": "YulAssignment",
                                              "src": "13237:24:56",
                                              "value": {
                                                "arguments": [
                                                  {
                                                    "name": "i",
                                                    "nativeSrc": "13246:1:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13246:1:56"
                                                  },
                                                  {
                                                    "name": "srcOffset_1",
                                                    "nativeSrc": "13249:11:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13249:11:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "13242:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13242:3:56"
                                                },
                                                "nativeSrc": "13242:19:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13242:19:56"
                                              },
                                              "variableNames": [
                                                {
                                                  "name": "i",
                                                  "nativeSrc": "13237:1:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13237:1:56"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        "pre": {
                                          "nativeSrc": "13216:3:56",
                                          "nodeType": "YulBlock",
                                          "src": "13216:3:56",
                                          "statements": []
                                        },
                                        "src": "13212:236:56"
                                      },
                                      {
                                        "body": {
                                          "nativeSrc": "13496:166:56",
                                          "nodeType": "YulBlock",
                                          "src": "13496:166:56",
                                          "statements": [
                                            {
                                              "nativeSrc": "13514:43:56",
                                              "nodeType": "YulVariableDeclaration",
                                              "src": "13514:43:56",
                                              "value": {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nativeSrc": "13541:3:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13541:3:56"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nativeSrc": "13546:9:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13546:9:56"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "13537:3:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13537:3:56"
                                                    },
                                                    "nativeSrc": "13537:19:56",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13537:19:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nativeSrc": "13531:5:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13531:5:56"
                                                },
                                                "nativeSrc": "13531:26:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13531:26:56"
                                              },
                                              "variables": [
                                                {
                                                  "name": "lastValue",
                                                  "nativeSrc": "13518:9:56",
                                                  "nodeType": "YulTypedName",
                                                  "src": "13518:9:56",
                                                  "type": ""
                                                }
                                              ]
                                            },
                                            {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "name": "dstPtr",
                                                    "nativeSrc": "13581:6:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13581:6:56"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "lastValue",
                                                        "nativeSrc": "13593:9:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13593:9:56"
                                                      },
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "arguments": [
                                                                      {
                                                                        "kind": "number",
                                                                        "nativeSrc": "13620:1:56",
                                                                        "nodeType": "YulLiteral",
                                                                        "src": "13620:1:56",
                                                                        "type": "",
                                                                        "value": "3"
                                                                      },
                                                                      {
                                                                        "name": "newLen",
                                                                        "nativeSrc": "13623:6:56",
                                                                        "nodeType": "YulIdentifier",
                                                                        "src": "13623:6:56"
                                                                      }
                                                                    ],
                                                                    "functionName": {
                                                                      "name": "shl",
                                                                      "nativeSrc": "13616:3:56",
                                                                      "nodeType": "YulIdentifier",
                                                                      "src": "13616:3:56"
                                                                    },
                                                                    "nativeSrc": "13616:14:56",
                                                                    "nodeType": "YulFunctionCall",
                                                                    "src": "13616:14:56"
                                                                  },
                                                                  {
                                                                    "kind": "number",
                                                                    "nativeSrc": "13632:3:56",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "13632:3:56",
                                                                    "type": "",
                                                                    "value": "248"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "and",
                                                                  "nativeSrc": "13612:3:56",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "13612:3:56"
                                                                },
                                                                "nativeSrc": "13612:24:56",
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "13612:24:56"
                                                              },
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nativeSrc": "13642:1:56",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "13642:1:56",
                                                                    "type": "",
                                                                    "value": "0"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "not",
                                                                  "nativeSrc": "13638:3:56",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "13638:3:56"
                                                                },
                                                                "nativeSrc": "13638:6:56",
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "13638:6:56"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "shr",
                                                              "nativeSrc": "13608:3:56",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "13608:3:56"
                                                            },
                                                            "nativeSrc": "13608:37:56",
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "13608:37:56"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "not",
                                                          "nativeSrc": "13604:3:56",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "13604:3:56"
                                                        },
                                                        "nativeSrc": "13604:42:56",
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "13604:42:56"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "and",
                                                      "nativeSrc": "13589:3:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13589:3:56"
                                                    },
                                                    "nativeSrc": "13589:58:56",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13589:58:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sstore",
                                                  "nativeSrc": "13574:6:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13574:6:56"
                                                },
                                                "nativeSrc": "13574:74:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13574:74:56"
                                              },
                                              "nativeSrc": "13574:74:56",
                                              "nodeType": "YulExpressionStatement",
                                              "src": "13574:74:56"
                                            }
                                          ]
                                        },
                                        "condition": {
                                          "arguments": [
                                            {
                                              "name": "loopEnd",
                                              "nativeSrc": "13467:7:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "13467:7:56"
                                            },
                                            {
                                              "name": "newLen",
                                              "nativeSrc": "13476:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "13476:6:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "lt",
                                            "nativeSrc": "13464:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "13464:2:56"
                                          },
                                          "nativeSrc": "13464:19:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "13464:19:56"
                                        },
                                        "nativeSrc": "13461:201:56",
                                        "nodeType": "YulIf",
                                        "src": "13461:201:56"
                                      },
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "name": "slot",
                                              "nativeSrc": "13682:4:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "13682:4:56"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nativeSrc": "13696:1:56",
                                                      "nodeType": "YulLiteral",
                                                      "src": "13696:1:56",
                                                      "type": "",
                                                      "value": "1"
                                                    },
                                                    {
                                                      "name": "newLen",
                                                      "nativeSrc": "13699:6:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13699:6:56"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "shl",
                                                    "nativeSrc": "13692:3:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13692:3:56"
                                                  },
                                                  "nativeSrc": "13692:14:56",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "13692:14:56"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "13708:1:56",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13708:1:56",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "13688:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "13688:3:56"
                                              },
                                              "nativeSrc": "13688:22:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "13688:22:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sstore",
                                            "nativeSrc": "13675:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "13675:6:56"
                                          },
                                          "nativeSrc": "13675:36:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "13675:36:56"
                                        },
                                        "nativeSrc": "13675:36:56",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "13675:36:56"
                                      }
                                    ]
                                  },
                                  "nativeSrc": "13058:663:56",
                                  "nodeType": "YulCase",
                                  "src": "13058:663:56",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "13063:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "13063:1:56",
                                    "type": "",
                                    "value": "1"
                                  }
                                },
                                {
                                  "body": {
                                    "nativeSrc": "13738:234:56",
                                    "nodeType": "YulBlock",
                                    "src": "13738:234:56",
                                    "statements": [
                                      {
                                        "nativeSrc": "13752:14:56",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "13752:14:56",
                                        "value": {
                                          "kind": "number",
                                          "nativeSrc": "13765:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "13765:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        "variables": [
                                          {
                                            "name": "value",
                                            "nativeSrc": "13756:5:56",
                                            "nodeType": "YulTypedName",
                                            "src": "13756:5:56",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "body": {
                                          "nativeSrc": "13801:67:56",
                                          "nodeType": "YulBlock",
                                          "src": "13801:67:56",
                                          "statements": [
                                            {
                                              "nativeSrc": "13819:35:56",
                                              "nodeType": "YulAssignment",
                                              "src": "13819:35:56",
                                              "value": {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nativeSrc": "13838:3:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13838:3:56"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nativeSrc": "13843:9:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13843:9:56"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "13834:3:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "13834:3:56"
                                                    },
                                                    "nativeSrc": "13834:19:56",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "13834:19:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nativeSrc": "13828:5:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13828:5:56"
                                                },
                                                "nativeSrc": "13828:26:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "13828:26:56"
                                              },
                                              "variableNames": [
                                                {
                                                  "name": "value",
                                                  "nativeSrc": "13819:5:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13819:5:56"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        "condition": {
                                          "name": "newLen",
                                          "nativeSrc": "13782:6:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "13782:6:56"
                                        },
                                        "nativeSrc": "13779:89:56",
                                        "nodeType": "YulIf",
                                        "src": "13779:89:56"
                                      },
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "name": "slot",
                                              "nativeSrc": "13888:4:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "13888:4:56"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value",
                                                  "nativeSrc": "13947:5:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13947:5:56"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nativeSrc": "13954:6:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13954:6:56"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "extract_used_part_and_set_length_of_short_byte_array",
                                                "nativeSrc": "13894:52:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "13894:52:56"
                                              },
                                              "nativeSrc": "13894:67:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "13894:67:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sstore",
                                            "nativeSrc": "13881:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "13881:6:56"
                                          },
                                          "nativeSrc": "13881:81:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "13881:81:56"
                                        },
                                        "nativeSrc": "13881:81:56",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "13881:81:56"
                                      }
                                    ]
                                  },
                                  "nativeSrc": "13730:242:56",
                                  "nodeType": "YulCase",
                                  "src": "13730:242:56",
                                  "value": "default"
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "newLen",
                                    "nativeSrc": "13038:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "13038:6:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13046:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "13046:2:56",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "13035:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "13035:2:56"
                                },
                                "nativeSrc": "13035:14:56",
                                "nodeType": "YulFunctionCall",
                                "src": "13035:14:56"
                              },
                              "nativeSrc": "13028:944:56",
                              "nodeType": "YulSwitch",
                              "src": "13028:944:56"
                            }
                          ]
                        },
                        "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                        "nativeSrc": "12626:1352:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "slot",
                            "nativeSrc": "12707:4:56",
                            "nodeType": "YulTypedName",
                            "src": "12707:4:56",
                            "type": ""
                          },
                          {
                            "name": "src",
                            "nativeSrc": "12713:3:56",
                            "nodeType": "YulTypedName",
                            "src": "12713:3:56",
                            "type": ""
                          }
                        ],
                        "src": "12626:1352:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "14041:664:56",
                          "nodeType": "YulBlock",
                          "src": "14041:664:56",
                          "statements": [
                            {
                              "nativeSrc": "14051:29:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "14051:29:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "14074:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "14074:5:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nativeSrc": "14068:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "14068:5:56"
                                },
                                "nativeSrc": "14068:12:56",
                                "nodeType": "YulFunctionCall",
                                "src": "14068:12:56"
                              },
                              "variables": [
                                {
                                  "name": "slotValue",
                                  "nativeSrc": "14055:9:56",
                                  "nodeType": "YulTypedName",
                                  "src": "14055:9:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "14089:50:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "14089:50:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "slotValue",
                                    "nativeSrc": "14129:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "14129:9:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nativeSrc": "14103:25:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "14103:25:56"
                                },
                                "nativeSrc": "14103:36:56",
                                "nodeType": "YulFunctionCall",
                                "src": "14103:36:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "14093:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "14093:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "14148:11:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "14148:11:56",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "14158:1:56",
                                "nodeType": "YulLiteral",
                                "src": "14158:1:56",
                                "type": "",
                                "value": "1"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "14152:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "14152:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "cases": [
                                {
                                  "body": {
                                    "nativeSrc": "14209:126:56",
                                    "nodeType": "YulBlock",
                                    "src": "14209:126:56",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nativeSrc": "14230:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "14230:3:56"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "name": "slotValue",
                                                  "nativeSrc": "14239:9:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14239:9:56"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nativeSrc": "14254:3:56",
                                                      "nodeType": "YulLiteral",
                                                      "src": "14254:3:56",
                                                      "type": "",
                                                      "value": "255"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "not",
                                                    "nativeSrc": "14250:3:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14250:3:56"
                                                  },
                                                  "nativeSrc": "14250:8:56",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "14250:8:56"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "and",
                                                "nativeSrc": "14235:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "14235:3:56"
                                              },
                                              "nativeSrc": "14235:24:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "14235:24:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore",
                                            "nativeSrc": "14223:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "14223:6:56"
                                          },
                                          "nativeSrc": "14223:37:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "14223:37:56"
                                        },
                                        "nativeSrc": "14223:37:56",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "14223:37:56"
                                      },
                                      {
                                        "nativeSrc": "14273:52:56",
                                        "nodeType": "YulAssignment",
                                        "src": "14273:52:56",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nativeSrc": "14284:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "14284:3:56"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "name": "length",
                                                  "nativeSrc": "14293:6:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14293:6:56"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "name": "length",
                                                          "nativeSrc": "14315:6:56",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "14315:6:56"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "iszero",
                                                        "nativeSrc": "14308:6:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "14308:6:56"
                                                      },
                                                      "nativeSrc": "14308:14:56",
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "14308:14:56"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "iszero",
                                                    "nativeSrc": "14301:6:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14301:6:56"
                                                  },
                                                  "nativeSrc": "14301:22:56",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "14301:22:56"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mul",
                                                "nativeSrc": "14289:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "14289:3:56"
                                              },
                                              "nativeSrc": "14289:35:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "14289:35:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "14280:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "14280:3:56"
                                          },
                                          "nativeSrc": "14280:45:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "14280:45:56"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "ret",
                                            "nativeSrc": "14273:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "14273:3:56"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "nativeSrc": "14202:133:56",
                                  "nodeType": "YulCase",
                                  "src": "14202:133:56",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "14207:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "14207:1:56",
                                    "type": "",
                                    "value": "0"
                                  }
                                },
                                {
                                  "body": {
                                    "nativeSrc": "14351:348:56",
                                    "nodeType": "YulBlock",
                                    "src": "14351:348:56",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "14372:1:56",
                                              "nodeType": "YulLiteral",
                                              "src": "14372:1:56",
                                              "type": "",
                                              "value": "0"
                                            },
                                            {
                                              "name": "value",
                                              "nativeSrc": "14375:5:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "14375:5:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore",
                                            "nativeSrc": "14365:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "14365:6:56"
                                          },
                                          "nativeSrc": "14365:16:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "14365:16:56"
                                        },
                                        "nativeSrc": "14365:16:56",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "14365:16:56"
                                      },
                                      {
                                        "nativeSrc": "14394:14:56",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "14394:14:56",
                                        "value": {
                                          "kind": "number",
                                          "nativeSrc": "14404:4:56",
                                          "nodeType": "YulLiteral",
                                          "src": "14404:4:56",
                                          "type": "",
                                          "value": "0x20"
                                        },
                                        "variables": [
                                          {
                                            "name": "_2",
                                            "nativeSrc": "14398:2:56",
                                            "nodeType": "YulTypedName",
                                            "src": "14398:2:56",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "nativeSrc": "14421:31:56",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "14421:31:56",
                                        "value": {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "14446:1:56",
                                              "nodeType": "YulLiteral",
                                              "src": "14446:1:56",
                                              "type": "",
                                              "value": "0"
                                            },
                                            {
                                              "name": "_2",
                                              "nativeSrc": "14449:2:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "14449:2:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "keccak256",
                                            "nativeSrc": "14436:9:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "14436:9:56"
                                          },
                                          "nativeSrc": "14436:16:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "14436:16:56"
                                        },
                                        "variables": [
                                          {
                                            "name": "dataPos",
                                            "nativeSrc": "14425:7:56",
                                            "nodeType": "YulTypedName",
                                            "src": "14425:7:56",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "nativeSrc": "14465:10:56",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "14465:10:56",
                                        "value": {
                                          "kind": "number",
                                          "nativeSrc": "14474:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "14474:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        "variables": [
                                          {
                                            "name": "i",
                                            "nativeSrc": "14469:1:56",
                                            "nodeType": "YulTypedName",
                                            "src": "14469:1:56",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "body": {
                                          "nativeSrc": "14542:111:56",
                                          "nodeType": "YulBlock",
                                          "src": "14542:111:56",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "pos",
                                                        "nativeSrc": "14571:3:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "14571:3:56"
                                                      },
                                                      {
                                                        "name": "i",
                                                        "nativeSrc": "14576:1:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "14576:1:56"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "14567:3:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "14567:3:56"
                                                    },
                                                    "nativeSrc": "14567:11:56",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "14567:11:56"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "dataPos",
                                                        "nativeSrc": "14586:7:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "14586:7:56"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "sload",
                                                      "nativeSrc": "14580:5:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "14580:5:56"
                                                    },
                                                    "nativeSrc": "14580:14:56",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "14580:14:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mstore",
                                                  "nativeSrc": "14560:6:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14560:6:56"
                                                },
                                                "nativeSrc": "14560:35:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "14560:35:56"
                                              },
                                              "nativeSrc": "14560:35:56",
                                              "nodeType": "YulExpressionStatement",
                                              "src": "14560:35:56"
                                            },
                                            {
                                              "nativeSrc": "14612:27:56",
                                              "nodeType": "YulAssignment",
                                              "src": "14612:27:56",
                                              "value": {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nativeSrc": "14627:7:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14627:7:56"
                                                  },
                                                  {
                                                    "name": "_1",
                                                    "nativeSrc": "14636:2:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14636:2:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "14623:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14623:3:56"
                                                },
                                                "nativeSrc": "14623:16:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "14623:16:56"
                                              },
                                              "variableNames": [
                                                {
                                                  "name": "dataPos",
                                                  "nativeSrc": "14612:7:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14612:7:56"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        "condition": {
                                          "arguments": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "14499:1:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "14499:1:56"
                                            },
                                            {
                                              "name": "length",
                                              "nativeSrc": "14502:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "14502:6:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "lt",
                                            "nativeSrc": "14496:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "14496:2:56"
                                          },
                                          "nativeSrc": "14496:13:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "14496:13:56"
                                        },
                                        "nativeSrc": "14488:165:56",
                                        "nodeType": "YulForLoop",
                                        "post": {
                                          "nativeSrc": "14510:19:56",
                                          "nodeType": "YulBlock",
                                          "src": "14510:19:56",
                                          "statements": [
                                            {
                                              "nativeSrc": "14512:15:56",
                                              "nodeType": "YulAssignment",
                                              "src": "14512:15:56",
                                              "value": {
                                                "arguments": [
                                                  {
                                                    "name": "i",
                                                    "nativeSrc": "14521:1:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14521:1:56"
                                                  },
                                                  {
                                                    "name": "_2",
                                                    "nativeSrc": "14524:2:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "14524:2:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "14517:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14517:3:56"
                                                },
                                                "nativeSrc": "14517:10:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "14517:10:56"
                                              },
                                              "variableNames": [
                                                {
                                                  "name": "i",
                                                  "nativeSrc": "14512:1:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "14512:1:56"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        "pre": {
                                          "nativeSrc": "14492:3:56",
                                          "nodeType": "YulBlock",
                                          "src": "14492:3:56",
                                          "statements": []
                                        },
                                        "src": "14488:165:56"
                                      },
                                      {
                                        "nativeSrc": "14666:23:56",
                                        "nodeType": "YulAssignment",
                                        "src": "14666:23:56",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nativeSrc": "14677:3:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "14677:3:56"
                                            },
                                            {
                                              "name": "length",
                                              "nativeSrc": "14682:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "14682:6:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "14673:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "14673:3:56"
                                          },
                                          "nativeSrc": "14673:16:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "14673:16:56"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "ret",
                                            "nativeSrc": "14666:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "14666:3:56"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "nativeSrc": "14344:355:56",
                                  "nodeType": "YulCase",
                                  "src": "14344:355:56",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "14349:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "14349:1:56",
                                    "type": "",
                                    "value": "1"
                                  }
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "slotValue",
                                    "nativeSrc": "14179:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "14179:9:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "14190:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "14190:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "14175:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "14175:3:56"
                                },
                                "nativeSrc": "14175:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "14175:18:56"
                              },
                              "nativeSrc": "14168:531:56",
                              "nodeType": "YulSwitch",
                              "src": "14168:531:56"
                            }
                          ]
                        },
                        "name": "abi_encode_string_storage",
                        "nativeSrc": "13983:722:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nativeSrc": "14018:5:56",
                            "nodeType": "YulTypedName",
                            "src": "14018:5:56",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nativeSrc": "14025:3:56",
                            "nodeType": "YulTypedName",
                            "src": "14025:3:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nativeSrc": "14033:3:56",
                            "nodeType": "YulTypedName",
                            "src": "14033:3:56",
                            "type": ""
                          }
                        ],
                        "src": "13983:722:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "14937:136:56",
                          "nodeType": "YulBlock",
                          "src": "14937:136:56",
                          "statements": [
                            {
                              "nativeSrc": "14947:51:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "14947:51:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "14986:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "14986:6:56"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "14994:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "14994:3:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string_storage",
                                  "nativeSrc": "14960:25:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "14960:25:56"
                                },
                                "nativeSrc": "14960:38:56",
                                "nodeType": "YulFunctionCall",
                                "src": "14960:38:56"
                              },
                              "variables": [
                                {
                                  "name": "pos_1",
                                  "nativeSrc": "14951:5:56",
                                  "nodeType": "YulTypedName",
                                  "src": "14951:5:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos_1",
                                    "nativeSrc": "15014:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15014:5:56"
                                  },
                                  {
                                    "hexValue": "2f6465706c6f796d656e74732f",
                                    "kind": "string",
                                    "nativeSrc": "15021:15:56",
                                    "nodeType": "YulLiteral",
                                    "src": "15021:15:56",
                                    "type": "",
                                    "value": "/deployments/"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "15007:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15007:6:56"
                                },
                                "nativeSrc": "15007:30:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15007:30:56"
                              },
                              "nativeSrc": "15007:30:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "15007:30:56"
                            },
                            {
                              "nativeSrc": "15046:21:56",
                              "nodeType": "YulAssignment",
                              "src": "15046:21:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos_1",
                                    "nativeSrc": "15057:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15057:5:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15064:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "15064:2:56",
                                    "type": "",
                                    "value": "13"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "15053:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15053:3:56"
                                },
                                "nativeSrc": "15053:14:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15053:14:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "15046:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15046:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_storage_t_stringliteral_9b849f40317fba7d532c0bb5a0048fc588a330868a6212ac1ddf9bd048284b1c__to_t_string_memory_ptr_t_bytes13__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "14710:363:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "14913:3:56",
                            "nodeType": "YulTypedName",
                            "src": "14913:3:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "14918:6:56",
                            "nodeType": "YulTypedName",
                            "src": "14918:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "14929:3:56",
                            "nodeType": "YulTypedName",
                            "src": "14929:3:56",
                            "type": ""
                          }
                        ],
                        "src": "14710:363:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "15307:216:56",
                          "nodeType": "YulBlock",
                          "src": "15307:216:56",
                          "statements": [
                            {
                              "nativeSrc": "15317:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "15317:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "15337:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15337:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "15331:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15331:5:56"
                                },
                                "nativeSrc": "15331:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15331:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "15321:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "15321:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "15392:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "15392:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "15400:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "15400:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "15388:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "15388:3:56"
                                    },
                                    "nativeSrc": "15388:17:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "15388:17:56"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "15407:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15407:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "15412:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15412:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "15353:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15353:34:56"
                                },
                                "nativeSrc": "15353:66:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15353:66:56"
                              },
                              "nativeSrc": "15353:66:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "15353:66:56"
                            },
                            {
                              "nativeSrc": "15428:29:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "15428:29:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "15445:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15445:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "15450:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15450:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "15441:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15441:3:56"
                                },
                                "nativeSrc": "15441:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15441:16:56"
                              },
                              "variables": [
                                {
                                  "name": "end_1",
                                  "nativeSrc": "15432:5:56",
                                  "nodeType": "YulTypedName",
                                  "src": "15432:5:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "15473:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15473:5:56"
                                  },
                                  {
                                    "hexValue": "2e6a736f6e",
                                    "kind": "string",
                                    "nativeSrc": "15480:7:56",
                                    "nodeType": "YulLiteral",
                                    "src": "15480:7:56",
                                    "type": "",
                                    "value": ".json"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "15466:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15466:6:56"
                                },
                                "nativeSrc": "15466:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15466:22:56"
                              },
                              "nativeSrc": "15466:22:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "15466:22:56"
                            },
                            {
                              "nativeSrc": "15497:20:56",
                              "nodeType": "YulAssignment",
                              "src": "15497:20:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "15508:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15508:5:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15515:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "15515:1:56",
                                    "type": "",
                                    "value": "5"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "15504:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15504:3:56"
                                },
                                "nativeSrc": "15504:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15504:13:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "15497:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15497:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_bytes5__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "15078:445:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "15283:3:56",
                            "nodeType": "YulTypedName",
                            "src": "15283:3:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "15288:6:56",
                            "nodeType": "YulTypedName",
                            "src": "15288:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "15299:3:56",
                            "nodeType": "YulTypedName",
                            "src": "15299:3:56",
                            "type": ""
                          }
                        ],
                        "src": "15078:445:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "15712:205:56",
                          "nodeType": "YulBlock",
                          "src": "15712:205:56",
                          "statements": [
                            {
                              "nativeSrc": "15722:48:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "15722:48:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "15758:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15758:6:56"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "15766:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15766:3:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string_storage",
                                  "nativeSrc": "15732:25:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15732:25:56"
                                },
                                "nativeSrc": "15732:38:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15732:38:56"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "15726:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "15726:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "15779:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "15779:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "15799:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15799:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "15793:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15793:5:56"
                                },
                                "nativeSrc": "15793:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15793:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "15783:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "15783:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "15854:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "15854:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "15862:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "15862:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "15850:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "15850:3:56"
                                    },
                                    "nativeSrc": "15850:17:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "15850:17:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "15869:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15869:2:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "15873:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15873:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "15815:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15815:34:56"
                                },
                                "nativeSrc": "15815:65:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15815:65:56"
                              },
                              "nativeSrc": "15815:65:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "15815:65:56"
                            },
                            {
                              "nativeSrc": "15889:22:56",
                              "nodeType": "YulAssignment",
                              "src": "15889:22:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "15900:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15900:2:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "15904:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "15904:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "15896:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15896:3:56"
                                },
                                "nativeSrc": "15896:15:56",
                                "nodeType": "YulFunctionCall",
                                "src": "15896:15:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "15889:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "15889:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "15528:389:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "15680:3:56",
                            "nodeType": "YulTypedName",
                            "src": "15680:3:56",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "15685:6:56",
                            "nodeType": "YulTypedName",
                            "src": "15685:6:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "15693:6:56",
                            "nodeType": "YulTypedName",
                            "src": "15693:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "15704:3:56",
                            "nodeType": "YulTypedName",
                            "src": "15704:3:56",
                            "type": ""
                          }
                        ],
                        "src": "15528:389:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "15990:714:56",
                          "nodeType": "YulBlock",
                          "src": "15990:714:56",
                          "statements": [
                            {
                              "nativeSrc": "16000:29:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "16000:29:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "16023:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "16023:5:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nativeSrc": "16017:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "16017:5:56"
                                },
                                "nativeSrc": "16017:12:56",
                                "nodeType": "YulFunctionCall",
                                "src": "16017:12:56"
                              },
                              "variables": [
                                {
                                  "name": "slotValue",
                                  "nativeSrc": "16004:9:56",
                                  "nodeType": "YulTypedName",
                                  "src": "16004:9:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "16038:50:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "16038:50:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "slotValue",
                                    "nativeSrc": "16078:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "16078:9:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nativeSrc": "16052:25:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "16052:25:56"
                                },
                                "nativeSrc": "16052:36:56",
                                "nodeType": "YulFunctionCall",
                                "src": "16052:36:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "16042:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "16042:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "16104:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "16104:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "16109:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "16109:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "16097:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "16097:6:56"
                                },
                                "nativeSrc": "16097:19:56",
                                "nodeType": "YulFunctionCall",
                                "src": "16097:19:56"
                              },
                              "nativeSrc": "16097:19:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "16097:19:56"
                            },
                            {
                              "nativeSrc": "16125:14:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "16125:14:56",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "16135:4:56",
                                "nodeType": "YulLiteral",
                                "src": "16135:4:56",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "16129:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "16129:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "16148:11:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "16148:11:56",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "16158:1:56",
                                "nodeType": "YulLiteral",
                                "src": "16158:1:56",
                                "type": "",
                                "value": "1"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nativeSrc": "16152:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "16152:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "cases": [
                                {
                                  "body": {
                                    "nativeSrc": "16209:139:56",
                                    "nodeType": "YulBlock",
                                    "src": "16209:139:56",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "pos",
                                                  "nativeSrc": "16234:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16234:3:56"
                                                },
                                                {
                                                  "name": "_1",
                                                  "nativeSrc": "16239:2:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16239:2:56"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "16230:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "16230:3:56"
                                              },
                                              "nativeSrc": "16230:12:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "16230:12:56"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "name": "slotValue",
                                                  "nativeSrc": "16248:9:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16248:9:56"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nativeSrc": "16263:3:56",
                                                      "nodeType": "YulLiteral",
                                                      "src": "16263:3:56",
                                                      "type": "",
                                                      "value": "255"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "not",
                                                    "nativeSrc": "16259:3:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16259:3:56"
                                                  },
                                                  "nativeSrc": "16259:8:56",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "16259:8:56"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "and",
                                                "nativeSrc": "16244:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "16244:3:56"
                                              },
                                              "nativeSrc": "16244:24:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "16244:24:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore",
                                            "nativeSrc": "16223:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "16223:6:56"
                                          },
                                          "nativeSrc": "16223:46:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "16223:46:56"
                                        },
                                        "nativeSrc": "16223:46:56",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "16223:46:56"
                                      },
                                      {
                                        "nativeSrc": "16282:56:56",
                                        "nodeType": "YulAssignment",
                                        "src": "16282:56:56",
                                        "value": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "pos",
                                                  "nativeSrc": "16297:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16297:3:56"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nativeSrc": "16306:1:56",
                                                      "nodeType": "YulLiteral",
                                                      "src": "16306:1:56",
                                                      "type": "",
                                                      "value": "5"
                                                    },
                                                    {
                                                      "arguments": [
                                                        {
                                                          "arguments": [
                                                            {
                                                              "name": "length",
                                                              "nativeSrc": "16323:6:56",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "16323:6:56"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "iszero",
                                                            "nativeSrc": "16316:6:56",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "16316:6:56"
                                                          },
                                                          "nativeSrc": "16316:14:56",
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "16316:14:56"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "iszero",
                                                        "nativeSrc": "16309:6:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "16309:6:56"
                                                      },
                                                      "nativeSrc": "16309:22:56",
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "16309:22:56"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "shl",
                                                    "nativeSrc": "16302:3:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16302:3:56"
                                                  },
                                                  "nativeSrc": "16302:30:56",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "16302:30:56"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "16293:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "16293:3:56"
                                              },
                                              "nativeSrc": "16293:40:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "16293:40:56"
                                            },
                                            {
                                              "name": "_1",
                                              "nativeSrc": "16335:2:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "16335:2:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "16289:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "16289:3:56"
                                          },
                                          "nativeSrc": "16289:49:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "16289:49:56"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "ret",
                                            "nativeSrc": "16282:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "16282:3:56"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "nativeSrc": "16202:146:56",
                                  "nodeType": "YulCase",
                                  "src": "16202:146:56",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "16207:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "16207:1:56",
                                    "type": "",
                                    "value": "0"
                                  }
                                },
                                {
                                  "body": {
                                    "nativeSrc": "16364:334:56",
                                    "nodeType": "YulBlock",
                                    "src": "16364:334:56",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "16385:1:56",
                                              "nodeType": "YulLiteral",
                                              "src": "16385:1:56",
                                              "type": "",
                                              "value": "0"
                                            },
                                            {
                                              "name": "value",
                                              "nativeSrc": "16388:5:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "16388:5:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mstore",
                                            "nativeSrc": "16378:6:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "16378:6:56"
                                          },
                                          "nativeSrc": "16378:16:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "16378:16:56"
                                        },
                                        "nativeSrc": "16378:16:56",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "16378:16:56"
                                      },
                                      {
                                        "nativeSrc": "16407:31:56",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "16407:31:56",
                                        "value": {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "16432:1:56",
                                              "nodeType": "YulLiteral",
                                              "src": "16432:1:56",
                                              "type": "",
                                              "value": "0"
                                            },
                                            {
                                              "name": "_1",
                                              "nativeSrc": "16435:2:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "16435:2:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "keccak256",
                                            "nativeSrc": "16422:9:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "16422:9:56"
                                          },
                                          "nativeSrc": "16422:16:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "16422:16:56"
                                        },
                                        "variables": [
                                          {
                                            "name": "dataPos",
                                            "nativeSrc": "16411:7:56",
                                            "nodeType": "YulTypedName",
                                            "src": "16411:7:56",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "nativeSrc": "16451:10:56",
                                        "nodeType": "YulVariableDeclaration",
                                        "src": "16451:10:56",
                                        "value": {
                                          "kind": "number",
                                          "nativeSrc": "16460:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "16460:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        "variables": [
                                          {
                                            "name": "i",
                                            "nativeSrc": "16455:1:56",
                                            "nodeType": "YulTypedName",
                                            "src": "16455:1:56",
                                            "type": ""
                                          }
                                        ]
                                      },
                                      {
                                        "body": {
                                          "nativeSrc": "16528:120:56",
                                          "nodeType": "YulBlock",
                                          "src": "16528:120:56",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "name": "pos",
                                                            "nativeSrc": "16561:3:56",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "16561:3:56"
                                                          },
                                                          {
                                                            "name": "i",
                                                            "nativeSrc": "16566:1:56",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "16566:1:56"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "add",
                                                          "nativeSrc": "16557:3:56",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "16557:3:56"
                                                        },
                                                        "nativeSrc": "16557:11:56",
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "16557:11:56"
                                                      },
                                                      {
                                                        "name": "_1",
                                                        "nativeSrc": "16570:2:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "16570:2:56"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "16553:3:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "16553:3:56"
                                                    },
                                                    "nativeSrc": "16553:20:56",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "16553:20:56"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "dataPos",
                                                        "nativeSrc": "16581:7:56",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "16581:7:56"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "sload",
                                                      "nativeSrc": "16575:5:56",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "16575:5:56"
                                                    },
                                                    "nativeSrc": "16575:14:56",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "16575:14:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mstore",
                                                  "nativeSrc": "16546:6:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16546:6:56"
                                                },
                                                "nativeSrc": "16546:44:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "16546:44:56"
                                              },
                                              "nativeSrc": "16546:44:56",
                                              "nodeType": "YulExpressionStatement",
                                              "src": "16546:44:56"
                                            },
                                            {
                                              "nativeSrc": "16607:27:56",
                                              "nodeType": "YulAssignment",
                                              "src": "16607:27:56",
                                              "value": {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nativeSrc": "16622:7:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16622:7:56"
                                                  },
                                                  {
                                                    "name": "_2",
                                                    "nativeSrc": "16631:2:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16631:2:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "16618:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16618:3:56"
                                                },
                                                "nativeSrc": "16618:16:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "16618:16:56"
                                              },
                                              "variableNames": [
                                                {
                                                  "name": "dataPos",
                                                  "nativeSrc": "16607:7:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16607:7:56"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        "condition": {
                                          "arguments": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "16485:1:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "16485:1:56"
                                            },
                                            {
                                              "name": "length",
                                              "nativeSrc": "16488:6:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "16488:6:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "lt",
                                            "nativeSrc": "16482:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "16482:2:56"
                                          },
                                          "nativeSrc": "16482:13:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "16482:13:56"
                                        },
                                        "nativeSrc": "16474:174:56",
                                        "nodeType": "YulForLoop",
                                        "post": {
                                          "nativeSrc": "16496:19:56",
                                          "nodeType": "YulBlock",
                                          "src": "16496:19:56",
                                          "statements": [
                                            {
                                              "nativeSrc": "16498:15:56",
                                              "nodeType": "YulAssignment",
                                              "src": "16498:15:56",
                                              "value": {
                                                "arguments": [
                                                  {
                                                    "name": "i",
                                                    "nativeSrc": "16507:1:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16507:1:56"
                                                  },
                                                  {
                                                    "name": "_1",
                                                    "nativeSrc": "16510:2:56",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16510:2:56"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "16503:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16503:3:56"
                                                },
                                                "nativeSrc": "16503:10:56",
                                                "nodeType": "YulFunctionCall",
                                                "src": "16503:10:56"
                                              },
                                              "variableNames": [
                                                {
                                                  "name": "i",
                                                  "nativeSrc": "16498:1:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16498:1:56"
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        "pre": {
                                          "nativeSrc": "16478:3:56",
                                          "nodeType": "YulBlock",
                                          "src": "16478:3:56",
                                          "statements": []
                                        },
                                        "src": "16474:174:56"
                                      },
                                      {
                                        "nativeSrc": "16661:27:56",
                                        "nodeType": "YulAssignment",
                                        "src": "16661:27:56",
                                        "value": {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "pos",
                                                  "nativeSrc": "16676:3:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16676:3:56"
                                                },
                                                {
                                                  "name": "i",
                                                  "nativeSrc": "16681:1:56",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16681:1:56"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "16672:3:56",
                                                "nodeType": "YulIdentifier",
                                                "src": "16672:3:56"
                                              },
                                              "nativeSrc": "16672:11:56",
                                              "nodeType": "YulFunctionCall",
                                              "src": "16672:11:56"
                                            },
                                            {
                                              "name": "_1",
                                              "nativeSrc": "16685:2:56",
                                              "nodeType": "YulIdentifier",
                                              "src": "16685:2:56"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "16668:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "16668:3:56"
                                          },
                                          "nativeSrc": "16668:20:56",
                                          "nodeType": "YulFunctionCall",
                                          "src": "16668:20:56"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "ret",
                                            "nativeSrc": "16661:3:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "16661:3:56"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "nativeSrc": "16357:341:56",
                                  "nodeType": "YulCase",
                                  "src": "16357:341:56",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "16362:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "16362:1:56",
                                    "type": "",
                                    "value": "1"
                                  }
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "slotValue",
                                    "nativeSrc": "16179:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "16179:9:56"
                                  },
                                  {
                                    "name": "_2",
                                    "nativeSrc": "16190:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "16190:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "16175:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "16175:3:56"
                                },
                                "nativeSrc": "16175:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "16175:18:56"
                              },
                              "nativeSrc": "16168:530:56",
                              "nodeType": "YulSwitch",
                              "src": "16168:530:56"
                            }
                          ]
                        },
                        "name": "abi_encode_string_storage_to_string",
                        "nativeSrc": "15922:782:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nativeSrc": "15967:5:56",
                            "nodeType": "YulTypedName",
                            "src": "15967:5:56",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nativeSrc": "15974:3:56",
                            "nodeType": "YulTypedName",
                            "src": "15974:3:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nativeSrc": "15982:3:56",
                            "nodeType": "YulTypedName",
                            "src": "15982:3:56",
                            "type": ""
                          }
                        ],
                        "src": "15922:782:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "16923:347:56",
                          "nodeType": "YulBlock",
                          "src": "16923:347:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "16940:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "16940:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "16951:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "16951:2:56",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "16933:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "16933:6:56"
                                },
                                "nativeSrc": "16933:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "16933:21:56"
                              },
                              "nativeSrc": "16933:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "16933:21:56"
                            },
                            {
                              "nativeSrc": "16963:59:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "16963:59:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "16995:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "16995:6:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "17007:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17007:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "17018:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "17018:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "17003:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17003:3:56"
                                    },
                                    "nativeSrc": "17003:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17003:18:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "16977:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "16977:17:56"
                                },
                                "nativeSrc": "16977:45:56",
                                "nodeType": "YulFunctionCall",
                                "src": "16977:45:56"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "16967:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "16967:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "17042:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17042:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "17053:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "17053:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "17038:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17038:3:56"
                                    },
                                    "nativeSrc": "17038:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17038:18:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "17062:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17062:6:56"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "17070:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17070:9:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "17058:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17058:3:56"
                                    },
                                    "nativeSrc": "17058:22:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17058:22:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "17031:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17031:6:56"
                                },
                                "nativeSrc": "17031:50:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17031:50:56"
                              },
                              "nativeSrc": "17031:50:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "17031:50:56"
                            },
                            {
                              "nativeSrc": "17090:47:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17090:47:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "17122:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17122:6:56"
                                  },
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "17130:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17130:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "17104:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17104:17:56"
                                },
                                "nativeSrc": "17104:33:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17104:33:56"
                              },
                              "variables": [
                                {
                                  "name": "tail_2",
                                  "nativeSrc": "17094:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "17094:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "17157:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17157:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "17168:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "17168:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "17153:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17153:3:56"
                                    },
                                    "nativeSrc": "17153:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17153:18:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_2",
                                        "nativeSrc": "17177:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17177:6:56"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "17185:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17185:9:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "17173:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17173:3:56"
                                    },
                                    "nativeSrc": "17173:22:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17173:22:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "17146:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17146:6:56"
                                },
                                "nativeSrc": "17146:50:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17146:50:56"
                              },
                              "nativeSrc": "17146:50:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "17146:50:56"
                            },
                            {
                              "nativeSrc": "17205:59:56",
                              "nodeType": "YulAssignment",
                              "src": "17205:59:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nativeSrc": "17249:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17249:6:56"
                                  },
                                  {
                                    "name": "tail_2",
                                    "nativeSrc": "17257:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17257:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string_storage_to_string",
                                  "nativeSrc": "17213:35:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17213:35:56"
                                },
                                "nativeSrc": "17213:51:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17213:51:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "17205:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17205:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "16709:561:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "16876:9:56",
                            "nodeType": "YulTypedName",
                            "src": "16876:9:56",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nativeSrc": "16887:6:56",
                            "nodeType": "YulTypedName",
                            "src": "16887:6:56",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "16895:6:56",
                            "nodeType": "YulTypedName",
                            "src": "16895:6:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "16903:6:56",
                            "nodeType": "YulTypedName",
                            "src": "16903:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "16914:4:56",
                            "nodeType": "YulTypedName",
                            "src": "16914:4:56",
                            "type": ""
                          }
                        ],
                        "src": "16709:561:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "17379:916:56",
                          "nodeType": "YulBlock",
                          "src": "17379:916:56",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "17425:16:56",
                                "nodeType": "YulBlock",
                                "src": "17425:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17434:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17434:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17437:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17437:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "17427:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17427:6:56"
                                      },
                                      "nativeSrc": "17427:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17427:12:56"
                                    },
                                    "nativeSrc": "17427:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "17427:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "17400:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17400:7:56"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "17409:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17409:9:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "17396:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17396:3:56"
                                    },
                                    "nativeSrc": "17396:23:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17396:23:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17421:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "17421:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "17392:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17392:3:56"
                                },
                                "nativeSrc": "17392:32:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17392:32:56"
                              },
                              "nativeSrc": "17389:52:56",
                              "nodeType": "YulIf",
                              "src": "17389:52:56"
                            },
                            {
                              "nativeSrc": "17450:30:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17450:30:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17470:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17470:9:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "17464:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17464:5:56"
                                },
                                "nativeSrc": "17464:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17464:16:56"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "17454:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "17454:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "17489:28:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17489:28:56",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "17499:18:56",
                                "nodeType": "YulLiteral",
                                "src": "17499:18:56",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "17493:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "17493:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "17544:16:56",
                                "nodeType": "YulBlock",
                                "src": "17544:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17553:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17553:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17556:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17556:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "17546:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17546:6:56"
                                      },
                                      "nativeSrc": "17546:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17546:12:56"
                                    },
                                    "nativeSrc": "17546:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "17546:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "17532:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17532:6:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "17540:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17540:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "17529:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17529:2:56"
                                },
                                "nativeSrc": "17529:14:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17529:14:56"
                              },
                              "nativeSrc": "17526:34:56",
                              "nodeType": "YulIf",
                              "src": "17526:34:56"
                            },
                            {
                              "nativeSrc": "17569:32:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17569:32:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17583:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17583:9:56"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "17594:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17594:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17579:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17579:3:56"
                                },
                                "nativeSrc": "17579:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17579:22:56"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nativeSrc": "17573:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "17573:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "17641:16:56",
                                "nodeType": "YulBlock",
                                "src": "17641:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17650:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17650:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17653:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17653:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "17643:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17643:6:56"
                                      },
                                      "nativeSrc": "17643:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17643:12:56"
                                    },
                                    "nativeSrc": "17643:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "17643:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "17621:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17621:7:56"
                                      },
                                      {
                                        "name": "_2",
                                        "nativeSrc": "17630:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17630:2:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "17617:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17617:3:56"
                                    },
                                    "nativeSrc": "17617:16:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17617:16:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17635:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "17635:4:56",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "17613:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17613:3:56"
                                },
                                "nativeSrc": "17613:27:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17613:27:56"
                              },
                              "nativeSrc": "17610:47:56",
                              "nodeType": "YulIf",
                              "src": "17610:47:56"
                            },
                            {
                              "nativeSrc": "17666:35:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17666:35:56",
                              "value": {
                                "arguments": [],
                                "functionName": {
                                  "name": "allocate_memory_3057",
                                  "nativeSrc": "17679:20:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17679:20:56"
                                },
                                "nativeSrc": "17679:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17679:22:56"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nativeSrc": "17670:5:56",
                                  "nodeType": "YulTypedName",
                                  "src": "17670:5:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "17710:25:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17710:25:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nativeSrc": "17732:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17732:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "17726:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17726:5:56"
                                },
                                "nativeSrc": "17726:9:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17726:9:56"
                              },
                              "variables": [
                                {
                                  "name": "offset_1",
                                  "nativeSrc": "17714:8:56",
                                  "nodeType": "YulTypedName",
                                  "src": "17714:8:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "17764:16:56",
                                "nodeType": "YulBlock",
                                "src": "17764:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17773:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17773:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17776:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17776:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "17766:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17766:6:56"
                                      },
                                      "nativeSrc": "17766:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17766:12:56"
                                    },
                                    "nativeSrc": "17766:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "17766:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset_1",
                                    "nativeSrc": "17750:8:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17750:8:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "17760:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17760:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "17747:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17747:2:56"
                                },
                                "nativeSrc": "17747:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17747:16:56"
                              },
                              "nativeSrc": "17744:36:56",
                              "nodeType": "YulIf",
                              "src": "17744:36:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "17796:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17796:5:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nativeSrc": "17836:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "17836:2:56"
                                          },
                                          {
                                            "name": "offset_1",
                                            "nativeSrc": "17840:8:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "17840:8:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "17832:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "17832:3:56"
                                        },
                                        "nativeSrc": "17832:17:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "17832:17:56"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "17851:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17851:7:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_string_fromMemory",
                                      "nativeSrc": "17803:28:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17803:28:56"
                                    },
                                    "nativeSrc": "17803:56:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17803:56:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "17789:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17789:6:56"
                                },
                                "nativeSrc": "17789:71:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17789:71:56"
                              },
                              "nativeSrc": "17789:71:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "17789:71:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "17880:5:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17880:5:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "17887:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "17887:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "17876:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17876:3:56"
                                    },
                                    "nativeSrc": "17876:14:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17876:14:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nativeSrc": "17902:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "17902:2:56"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "17906:2:56",
                                            "nodeType": "YulLiteral",
                                            "src": "17906:2:56",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "17898:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "17898:3:56"
                                        },
                                        "nativeSrc": "17898:11:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "17898:11:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nativeSrc": "17892:5:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17892:5:56"
                                    },
                                    "nativeSrc": "17892:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17892:18:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "17869:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17869:6:56"
                                },
                                "nativeSrc": "17869:42:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17869:42:56"
                              },
                              "nativeSrc": "17869:42:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "17869:42:56"
                            },
                            {
                              "nativeSrc": "17920:34:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17920:34:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "17946:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17946:2:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "17950:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "17950:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "17942:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "17942:3:56"
                                    },
                                    "nativeSrc": "17942:11:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17942:11:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "17936:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17936:5:56"
                                },
                                "nativeSrc": "17936:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17936:18:56"
                              },
                              "variables": [
                                {
                                  "name": "offset_2",
                                  "nativeSrc": "17924:8:56",
                                  "nodeType": "YulTypedName",
                                  "src": "17924:8:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "17983:16:56",
                                "nodeType": "YulBlock",
                                "src": "17983:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17992:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17992:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17995:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "17995:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "17985:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "17985:6:56"
                                      },
                                      "nativeSrc": "17985:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17985:12:56"
                                    },
                                    "nativeSrc": "17985:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "17985:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset_2",
                                    "nativeSrc": "17969:8:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17969:8:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "17979:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "17979:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "17966:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "17966:2:56"
                                },
                                "nativeSrc": "17966:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "17966:16:56"
                              },
                              "nativeSrc": "17963:36:56",
                              "nodeType": "YulIf",
                              "src": "17963:36:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "18019:5:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18019:5:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18026:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "18026:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18015:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18015:3:56"
                                    },
                                    "nativeSrc": "18015:14:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18015:14:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nativeSrc": "18064:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "18064:2:56"
                                          },
                                          {
                                            "name": "offset_2",
                                            "nativeSrc": "18068:8:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "18068:8:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "18060:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "18060:3:56"
                                        },
                                        "nativeSrc": "18060:17:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "18060:17:56"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "18079:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18079:7:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_string_fromMemory",
                                      "nativeSrc": "18031:28:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18031:28:56"
                                    },
                                    "nativeSrc": "18031:56:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18031:56:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18008:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18008:6:56"
                                },
                                "nativeSrc": "18008:80:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18008:80:56"
                              },
                              "nativeSrc": "18008:80:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "18008:80:56"
                            },
                            {
                              "nativeSrc": "18097:34:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18097:34:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "18123:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18123:2:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18127:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "18127:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18119:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18119:3:56"
                                    },
                                    "nativeSrc": "18119:11:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18119:11:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "18113:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18113:5:56"
                                },
                                "nativeSrc": "18113:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18113:18:56"
                              },
                              "variables": [
                                {
                                  "name": "offset_3",
                                  "nativeSrc": "18101:8:56",
                                  "nodeType": "YulTypedName",
                                  "src": "18101:8:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "18160:16:56",
                                "nodeType": "YulBlock",
                                "src": "18160:16:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18169:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "18169:1:56",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18172:1:56",
                                          "nodeType": "YulLiteral",
                                          "src": "18172:1:56",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "18162:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18162:6:56"
                                      },
                                      "nativeSrc": "18162:12:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "18162:12:56"
                                    },
                                    "nativeSrc": "18162:12:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18162:12:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset_3",
                                    "nativeSrc": "18146:8:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "18146:8:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "18156:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "18156:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "18143:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18143:2:56"
                                },
                                "nativeSrc": "18143:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18143:16:56"
                              },
                              "nativeSrc": "18140:36:56",
                              "nodeType": "YulIf",
                              "src": "18140:36:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "18196:5:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18196:5:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18203:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "18203:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18192:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18192:3:56"
                                    },
                                    "nativeSrc": "18192:14:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18192:14:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nativeSrc": "18241:2:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "18241:2:56"
                                          },
                                          {
                                            "name": "offset_3",
                                            "nativeSrc": "18245:8:56",
                                            "nodeType": "YulIdentifier",
                                            "src": "18245:8:56"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "18237:3:56",
                                          "nodeType": "YulIdentifier",
                                          "src": "18237:3:56"
                                        },
                                        "nativeSrc": "18237:17:56",
                                        "nodeType": "YulFunctionCall",
                                        "src": "18237:17:56"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "18256:7:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18256:7:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_string_fromMemory",
                                      "nativeSrc": "18208:28:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18208:28:56"
                                    },
                                    "nativeSrc": "18208:56:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18208:56:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18185:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18185:6:56"
                                },
                                "nativeSrc": "18185:80:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18185:80:56"
                              },
                              "nativeSrc": "18185:80:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "18185:80:56"
                            },
                            {
                              "nativeSrc": "18274:15:56",
                              "nodeType": "YulAssignment",
                              "src": "18274:15:56",
                              "value": {
                                "name": "value",
                                "nativeSrc": "18284:5:56",
                                "nodeType": "YulIdentifier",
                                "src": "18284:5:56"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "18274:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18274:6:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_struct$_Chain_$7844_memory_ptr_fromMemory",
                        "nativeSrc": "17275:1020:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "17345:9:56",
                            "nodeType": "YulTypedName",
                            "src": "17345:9:56",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "17356:7:56",
                            "nodeType": "YulTypedName",
                            "src": "17356:7:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "17368:6:56",
                            "nodeType": "YulTypedName",
                            "src": "17368:6:56",
                            "type": ""
                          }
                        ],
                        "src": "17275:1020:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "18570:366:56",
                          "nodeType": "YulBlock",
                          "src": "18570:366:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "18587:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "18587:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "18598:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "18598:2:56",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18580:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18580:6:56"
                                },
                                "nativeSrc": "18580:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18580:21:56"
                              },
                              "nativeSrc": "18580:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "18580:21:56"
                            },
                            {
                              "nativeSrc": "18610:59:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18610:59:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "18642:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "18642:6:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "18654:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18654:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18665:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "18665:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18650:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18650:3:56"
                                    },
                                    "nativeSrc": "18650:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18650:18:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "18624:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18624:17:56"
                                },
                                "nativeSrc": "18624:45:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18624:45:56"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "18614:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "18614:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "18678:32:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18678:32:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "18692:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "18692:6:56"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "18700:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "18700:9:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "18688:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18688:3:56"
                                },
                                "nativeSrc": "18688:22:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18688:22:56"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "18682:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "18682:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "18730:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18730:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18741:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "18741:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18726:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18726:3:56"
                                    },
                                    "nativeSrc": "18726:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18726:18:56"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "18746:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "18746:2:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18719:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18719:6:56"
                                },
                                "nativeSrc": "18719:30:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18719:30:56"
                              },
                              "nativeSrc": "18719:30:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "18719:30:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "18765:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "18765:6:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "18773:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "18773:2:56",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18758:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18758:6:56"
                                },
                                "nativeSrc": "18758:18:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18758:18:56"
                              },
                              "nativeSrc": "18758:18:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "18758:18:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "18796:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18796:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18804:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "18804:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18792:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18792:3:56"
                                    },
                                    "nativeSrc": "18792:15:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18792:15:56"
                                  },
                                  {
                                    "hexValue": "6e6574776f726b4e616d65",
                                    "kind": "string",
                                    "nativeSrc": "18809:13:56",
                                    "nodeType": "YulLiteral",
                                    "src": "18809:13:56",
                                    "type": "",
                                    "value": "networkName"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18785:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18785:6:56"
                                },
                                "nativeSrc": "18785:38:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18785:38:56"
                              },
                              "nativeSrc": "18785:38:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "18785:38:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "18843:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18843:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18854:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "18854:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18839:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18839:3:56"
                                    },
                                    "nativeSrc": "18839:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18839:18:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "18863:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18863:2:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18867:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "18867:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18859:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18859:3:56"
                                    },
                                    "nativeSrc": "18859:11:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18859:11:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18832:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18832:6:56"
                                },
                                "nativeSrc": "18832:39:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18832:39:56"
                              },
                              "nativeSrc": "18832:39:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "18832:39:56"
                            },
                            {
                              "nativeSrc": "18880:50:56",
                              "nodeType": "YulAssignment",
                              "src": "18880:50:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "18906:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "18906:6:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "18918:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "18918:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18926:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "18926:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18914:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "18914:3:56"
                                    },
                                    "nativeSrc": "18914:15:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18914:15:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "18888:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18888:17:56"
                                },
                                "nativeSrc": "18888:42:56",
                                "nodeType": "YulFunctionCall",
                                "src": "18888:42:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "18880:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "18880:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_4e6fff0fc5b5dc488a5e6a18c9962f889fd002b6870d15a6d38e2608c1672222_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "18300:636:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "18531:9:56",
                            "nodeType": "YulTypedName",
                            "src": "18531:9:56",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "18542:6:56",
                            "nodeType": "YulTypedName",
                            "src": "18542:6:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "18550:6:56",
                            "nodeType": "YulTypedName",
                            "src": "18550:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "18561:4:56",
                            "nodeType": "YulTypedName",
                            "src": "18561:4:56",
                            "type": ""
                          }
                        ],
                        "src": "18300:636:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "19107:232:56",
                          "nodeType": "YulBlock",
                          "src": "19107:232:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "19124:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19124:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "19135:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "19135:2:56",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19117:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19117:6:56"
                                },
                                "nativeSrc": "19117:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "19117:21:56"
                              },
                              "nativeSrc": "19117:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "19117:21:56"
                            },
                            {
                              "nativeSrc": "19147:59:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "19147:59:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "19179:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19179:6:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "19191:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "19191:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19202:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "19202:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19187:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "19187:3:56"
                                    },
                                    "nativeSrc": "19187:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19187:18:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "19161:17:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19161:17:56"
                                },
                                "nativeSrc": "19161:45:56",
                                "nodeType": "YulFunctionCall",
                                "src": "19161:45:56"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "19151:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "19151:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "19226:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "19226:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19237:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "19237:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19222:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "19222:3:56"
                                    },
                                    "nativeSrc": "19222:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19222:18:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "19246:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "19246:6:56"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "19254:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "19254:9:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "19242:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "19242:3:56"
                                    },
                                    "nativeSrc": "19242:22:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19242:22:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19215:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19215:6:56"
                                },
                                "nativeSrc": "19215:50:56",
                                "nodeType": "YulFunctionCall",
                                "src": "19215:50:56"
                              },
                              "nativeSrc": "19215:50:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "19215:50:56"
                            },
                            {
                              "nativeSrc": "19274:59:56",
                              "nodeType": "YulAssignment",
                              "src": "19274:59:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "19318:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19318:6:56"
                                  },
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "19326:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19326:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string_storage_to_string",
                                  "nativeSrc": "19282:35:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19282:35:56"
                                },
                                "nativeSrc": "19282:51:56",
                                "nodeType": "YulFunctionCall",
                                "src": "19282:51:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "19274:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19274:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "18941:398:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "19068:9:56",
                            "nodeType": "YulTypedName",
                            "src": "19068:9:56",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "19079:6:56",
                            "nodeType": "YulTypedName",
                            "src": "19079:6:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "19087:6:56",
                            "nodeType": "YulTypedName",
                            "src": "19087:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "19098:4:56",
                            "nodeType": "YulTypedName",
                            "src": "19098:4:56",
                            "type": ""
                          }
                        ],
                        "src": "18941:398:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "19584:219:56",
                          "nodeType": "YulBlock",
                          "src": "19584:219:56",
                          "statements": [
                            {
                              "nativeSrc": "19594:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "19594:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "19614:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19614:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "19608:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19608:5:56"
                                },
                                "nativeSrc": "19608:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "19608:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "19598:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "19598:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "19669:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "19669:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19677:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "19677:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19665:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "19665:3:56"
                                    },
                                    "nativeSrc": "19665:17:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19665:17:56"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "19684:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19684:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "19689:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19689:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "19630:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19630:34:56"
                                },
                                "nativeSrc": "19630:66:56",
                                "nodeType": "YulFunctionCall",
                                "src": "19630:66:56"
                              },
                              "nativeSrc": "19630:66:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "19630:66:56"
                            },
                            {
                              "nativeSrc": "19705:29:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "19705:29:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "19722:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19722:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "19727:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19727:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "19718:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19718:3:56"
                                },
                                "nativeSrc": "19718:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "19718:16:56"
                              },
                              "variables": [
                                {
                                  "name": "end_1",
                                  "nativeSrc": "19709:5:56",
                                  "nodeType": "YulTypedName",
                                  "src": "19709:5:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "19750:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19750:5:56"
                                  },
                                  {
                                    "hexValue": "5f5250435f55524c",
                                    "kind": "string",
                                    "nativeSrc": "19757:10:56",
                                    "nodeType": "YulLiteral",
                                    "src": "19757:10:56",
                                    "type": "",
                                    "value": "_RPC_URL"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19743:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19743:6:56"
                                },
                                "nativeSrc": "19743:25:56",
                                "nodeType": "YulFunctionCall",
                                "src": "19743:25:56"
                              },
                              "nativeSrc": "19743:25:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "19743:25:56"
                            },
                            {
                              "nativeSrc": "19777:20:56",
                              "nodeType": "YulAssignment",
                              "src": "19777:20:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "19788:5:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "19788:5:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "19795:1:56",
                                    "nodeType": "YulLiteral",
                                    "src": "19795:1:56",
                                    "type": "",
                                    "value": "8"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "19784:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19784:3:56"
                                },
                                "nativeSrc": "19784:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "19784:13:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "19777:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "19777:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_2186fe596dea1a615b7a1cb43899fd18c5b434aa29c8de36d4b8fcc67e3d6ad9__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "19344:459:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "19560:3:56",
                            "nodeType": "YulTypedName",
                            "src": "19560:3:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "19565:6:56",
                            "nodeType": "YulTypedName",
                            "src": "19565:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "19576:3:56",
                            "nodeType": "YulTypedName",
                            "src": "19576:3:56",
                            "type": ""
                          }
                        ],
                        "src": "19344:459:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "20048:208:56",
                          "nodeType": "YulBlock",
                          "src": "20048:208:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "20065:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "20065:3:56"
                                  },
                                  {
                                    "hexValue": "696e76616c6964207270632075726c20",
                                    "kind": "string",
                                    "nativeSrc": "20070:18:56",
                                    "nodeType": "YulLiteral",
                                    "src": "20070:18:56",
                                    "type": "",
                                    "value": "invalid rpc url "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20058:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20058:6:56"
                                },
                                "nativeSrc": "20058:31:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20058:31:56"
                              },
                              "nativeSrc": "20058:31:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "20058:31:56"
                            },
                            {
                              "nativeSrc": "20098:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "20098:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "20118:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "20118:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "20112:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20112:5:56"
                                },
                                "nativeSrc": "20112:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20112:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "20102:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "20102:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "20173:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20173:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20181:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "20181:4:56",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20169:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "20169:3:56"
                                    },
                                    "nativeSrc": "20169:17:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20169:17:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "20192:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20192:3:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20197:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "20197:2:56",
                                        "type": "",
                                        "value": "16"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20188:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "20188:3:56"
                                    },
                                    "nativeSrc": "20188:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20188:12:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "20202:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "20202:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "20134:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20134:34:56"
                                },
                                "nativeSrc": "20134:75:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20134:75:56"
                              },
                              "nativeSrc": "20134:75:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "20134:75:56"
                            },
                            {
                              "nativeSrc": "20218:32:56",
                              "nodeType": "YulAssignment",
                              "src": "20218:32:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "20233:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20233:3:56"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "20238:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20238:6:56"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20229:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "20229:3:56"
                                    },
                                    "nativeSrc": "20229:16:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20229:16:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20247:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "20247:2:56",
                                    "type": "",
                                    "value": "16"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "20225:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20225:3:56"
                                },
                                "nativeSrc": "20225:25:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20225:25:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "20218:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20218:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_2baf3da7b122675739218e635e969f0d1b560b915d35635239551f70fe123eed_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "19808:448:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "20024:3:56",
                            "nodeType": "YulTypedName",
                            "src": "20024:3:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "20029:6:56",
                            "nodeType": "YulTypedName",
                            "src": "20029:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "20040:3:56",
                            "nodeType": "YulTypedName",
                            "src": "20040:3:56",
                            "type": ""
                          }
                        ],
                        "src": "19808:448:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "20308:104:56",
                          "nodeType": "YulBlock",
                          "src": "20308:104:56",
                          "statements": [
                            {
                              "nativeSrc": "20318:39:56",
                              "nodeType": "YulAssignment",
                              "src": "20318:39:56",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nativeSrc": "20334:1:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20334:1:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20337:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "20337:4:56",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "20330:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "20330:3:56"
                                    },
                                    "nativeSrc": "20330:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20330:12:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nativeSrc": "20348:1:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20348:1:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20351:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "20351:4:56",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "20344:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "20344:3:56"
                                    },
                                    "nativeSrc": "20344:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20344:12:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "20326:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20326:3:56"
                                },
                                "nativeSrc": "20326:31:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20326:31:56"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nativeSrc": "20318:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20318:4:56"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "20384:22:56",
                                "nodeType": "YulBlock",
                                "src": "20384:22:56",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nativeSrc": "20386:16:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20386:16:56"
                                      },
                                      "nativeSrc": "20386:18:56",
                                      "nodeType": "YulFunctionCall",
                                      "src": "20386:18:56"
                                    },
                                    "nativeSrc": "20386:18:56",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "20386:18:56"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "diff",
                                    "nativeSrc": "20372:4:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "20372:4:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20378:4:56",
                                    "nodeType": "YulLiteral",
                                    "src": "20378:4:56",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "20369:2:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20369:2:56"
                                },
                                "nativeSrc": "20369:14:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20369:14:56"
                              },
                              "nativeSrc": "20366:40:56",
                              "nodeType": "YulIf",
                              "src": "20366:40:56"
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint8",
                        "nativeSrc": "20261:151:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nativeSrc": "20290:1:56",
                            "nodeType": "YulTypedName",
                            "src": "20290:1:56",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nativeSrc": "20293:1:56",
                            "nodeType": "YulTypedName",
                            "src": "20293:1:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nativeSrc": "20299:4:56",
                            "nodeType": "YulTypedName",
                            "src": "20299:4:56",
                            "type": ""
                          }
                        ],
                        "src": "20261:151:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "20591:307:56",
                          "nodeType": "YulBlock",
                          "src": "20591:307:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "20608:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "20608:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20619:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "20619:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20601:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20601:6:56"
                                },
                                "nativeSrc": "20601:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20601:21:56"
                              },
                              "nativeSrc": "20601:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "20601:21:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "20642:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20642:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20653:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "20653:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20638:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "20638:3:56"
                                    },
                                    "nativeSrc": "20638:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20638:18:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20658:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "20658:2:56",
                                    "type": "",
                                    "value": "77"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20631:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20631:6:56"
                                },
                                "nativeSrc": "20631:30:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20631:30:56"
                              },
                              "nativeSrc": "20631:30:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "20631:30:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "20681:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20681:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20692:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "20692:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20677:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "20677:3:56"
                                    },
                                    "nativeSrc": "20677:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20677:18:56"
                                  },
                                  {
                                    "hexValue": "537464436861696e7320736574436861696e28737472696e672c436861696e44",
                                    "kind": "string",
                                    "nativeSrc": "20697:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "20697:34:56",
                                    "type": "",
                                    "value": "StdChains setChain(string,ChainD"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20670:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20670:6:56"
                                },
                                "nativeSrc": "20670:62:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20670:62:56"
                              },
                              "nativeSrc": "20670:62:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "20670:62:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "20752:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20752:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20763:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "20763:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20748:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "20748:3:56"
                                    },
                                    "nativeSrc": "20748:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20748:18:56"
                                  },
                                  {
                                    "hexValue": "617461293a20436861696e20616c6961732063616e6e6f742062652074686520",
                                    "kind": "string",
                                    "nativeSrc": "20768:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "20768:34:56",
                                    "type": "",
                                    "value": "ata): Chain alias cannot be the "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20741:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20741:6:56"
                                },
                                "nativeSrc": "20741:62:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20741:62:56"
                              },
                              "nativeSrc": "20741:62:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "20741:62:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "20823:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "20823:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20834:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "20834:3:56",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20819:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "20819:3:56"
                                    },
                                    "nativeSrc": "20819:19:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20819:19:56"
                                  },
                                  {
                                    "hexValue": "656d70747920737472696e672e",
                                    "kind": "string",
                                    "nativeSrc": "20840:15:56",
                                    "nodeType": "YulLiteral",
                                    "src": "20840:15:56",
                                    "type": "",
                                    "value": "empty string."
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20812:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20812:6:56"
                                },
                                "nativeSrc": "20812:44:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20812:44:56"
                              },
                              "nativeSrc": "20812:44:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "20812:44:56"
                            },
                            {
                              "nativeSrc": "20865:27:56",
                              "nodeType": "YulAssignment",
                              "src": "20865:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "20877:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "20877:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20888:3:56",
                                    "nodeType": "YulLiteral",
                                    "src": "20888:3:56",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "20873:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20873:3:56"
                                },
                                "nativeSrc": "20873:19:56",
                                "nodeType": "YulFunctionCall",
                                "src": "20873:19:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "20865:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "20865:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_30b2334ec57cbeeece39c6405e10d3437560135ecd84835d6b9144db1d575354__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "20417:481:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "20568:9:56",
                            "nodeType": "YulTypedName",
                            "src": "20568:9:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "20582:4:56",
                            "nodeType": "YulTypedName",
                            "src": "20582:4:56",
                            "type": ""
                          }
                        ],
                        "src": "20417:481:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "21077:249:56",
                          "nodeType": "YulBlock",
                          "src": "21077:249:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "21094:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "21094:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "21105:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "21105:2:56",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "21087:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21087:6:56"
                                },
                                "nativeSrc": "21087:21:56",
                                "nodeType": "YulFunctionCall",
                                "src": "21087:21:56"
                              },
                              "nativeSrc": "21087:21:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "21087:21:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "21128:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "21128:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "21139:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "21139:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "21124:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "21124:3:56"
                                    },
                                    "nativeSrc": "21124:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "21124:18:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "21144:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "21144:2:56",
                                    "type": "",
                                    "value": "59"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "21117:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21117:6:56"
                                },
                                "nativeSrc": "21117:30:56",
                                "nodeType": "YulFunctionCall",
                                "src": "21117:30:56"
                              },
                              "nativeSrc": "21117:30:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "21117:30:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "21167:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "21167:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "21178:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "21178:2:56",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "21163:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "21163:3:56"
                                    },
                                    "nativeSrc": "21163:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "21163:18:56"
                                  },
                                  {
                                    "hexValue": "537464436861696e7320736574436861696e28737472696e672c436861696e44",
                                    "kind": "string",
                                    "nativeSrc": "21183:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "21183:34:56",
                                    "type": "",
                                    "value": "StdChains setChain(string,ChainD"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "21156:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21156:6:56"
                                },
                                "nativeSrc": "21156:62:56",
                                "nodeType": "YulFunctionCall",
                                "src": "21156:62:56"
                              },
                              "nativeSrc": "21156:62:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "21156:62:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "21238:9:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "21238:9:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "21249:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "21249:2:56",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "21234:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "21234:3:56"
                                    },
                                    "nativeSrc": "21234:18:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "21234:18:56"
                                  },
                                  {
                                    "hexValue": "617461293a20436861696e2049442063616e6e6f7420626520302e",
                                    "kind": "string",
                                    "nativeSrc": "21254:29:56",
                                    "nodeType": "YulLiteral",
                                    "src": "21254:29:56",
                                    "type": "",
                                    "value": "ata): Chain ID cannot be 0."
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "21227:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21227:6:56"
                                },
                                "nativeSrc": "21227:57:56",
                                "nodeType": "YulFunctionCall",
                                "src": "21227:57:56"
                              },
                              "nativeSrc": "21227:57:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "21227:57:56"
                            },
                            {
                              "nativeSrc": "21293:27:56",
                              "nodeType": "YulAssignment",
                              "src": "21293:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "21305:9:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "21305:9:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "21316:3:56",
                                    "nodeType": "YulLiteral",
                                    "src": "21316:3:56",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "21301:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21301:3:56"
                                },
                                "nativeSrc": "21301:19:56",
                                "nodeType": "YulFunctionCall",
                                "src": "21301:19:56"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "21293:4:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21293:4:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_ab0ba8dace83d80dc1941286e8d0551223497db1b420e58abff2f3db2ad3fbf4__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "20903:423:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "21054:9:56",
                            "nodeType": "YulTypedName",
                            "src": "21054:9:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "21068:4:56",
                            "nodeType": "YulTypedName",
                            "src": "21068:4:56",
                            "type": ""
                          }
                        ],
                        "src": "20903:423:56"
                      },
                      {
                        "body": {
                          "nativeSrc": "21821:570:56",
                          "nodeType": "YulBlock",
                          "src": "21821:570:56",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "21838:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "21838:3:56"
                                  },
                                  {
                                    "hexValue": "537464436861696e7320736574436861696e28737472696e672c436861696e44",
                                    "kind": "string",
                                    "nativeSrc": "21843:34:56",
                                    "nodeType": "YulLiteral",
                                    "src": "21843:34:56",
                                    "type": "",
                                    "value": "StdChains setChain(string,ChainD"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "21831:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21831:6:56"
                                },
                                "nativeSrc": "21831:47:56",
                                "nodeType": "YulFunctionCall",
                                "src": "21831:47:56"
                              },
                              "nativeSrc": "21831:47:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "21831:47:56"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "21898:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "21898:3:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "21903:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "21903:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "21894:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "21894:3:56"
                                    },
                                    "nativeSrc": "21894:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "21894:12:56"
                                  },
                                  {
                                    "hexValue": "617461293a20436861696e20494420",
                                    "kind": "string",
                                    "nativeSrc": "21908:17:56",
                                    "nodeType": "YulLiteral",
                                    "src": "21908:17:56",
                                    "type": "",
                                    "value": "ata): Chain ID "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "21887:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21887:6:56"
                                },
                                "nativeSrc": "21887:39:56",
                                "nodeType": "YulFunctionCall",
                                "src": "21887:39:56"
                              },
                              "nativeSrc": "21887:39:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "21887:39:56"
                            },
                            {
                              "nativeSrc": "21935:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "21935:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "21955:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "21955:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "21949:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21949:5:56"
                                },
                                "nativeSrc": "21949:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "21949:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "21939:6:56",
                                  "nodeType": "YulTypedName",
                                  "src": "21939:6:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "22010:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "22010:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22018:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22018:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22006:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "22006:3:56"
                                    },
                                    "nativeSrc": "22006:15:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22006:15:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "22027:3:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "22027:3:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22032:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22032:2:56",
                                        "type": "",
                                        "value": "47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22023:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "22023:3:56"
                                    },
                                    "nativeSrc": "22023:12:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22023:12:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "22037:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "22037:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "21971:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "21971:34:56"
                                },
                                "nativeSrc": "21971:73:56",
                                "nodeType": "YulFunctionCall",
                                "src": "21971:73:56"
                              },
                              "nativeSrc": "21971:73:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "21971:73:56"
                            },
                            {
                              "nativeSrc": "22053:26:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "22053:26:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "22067:3:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "22067:3:56"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "22072:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "22072:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "22063:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "22063:3:56"
                                },
                                "nativeSrc": "22063:16:56",
                                "nodeType": "YulFunctionCall",
                                "src": "22063:16:56"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "22057:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "22057:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "22099:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "22099:2:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22103:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22103:2:56",
                                        "type": "",
                                        "value": "47"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22095:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "22095:3:56"
                                    },
                                    "nativeSrc": "22095:11:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22095:11:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22112:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22112:3:56",
                                        "type": "",
                                        "value": "113"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22117:38:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22117:38:56",
                                        "type": "",
                                        "value": "0x1030b63932b0b23c903ab9b2b210313c9011"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "22108:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "22108:3:56"
                                    },
                                    "nativeSrc": "22108:48:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22108:48:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "22088:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "22088:6:56"
                                },
                                "nativeSrc": "22088:69:56",
                                "nodeType": "YulFunctionCall",
                                "src": "22088:69:56"
                              },
                              "nativeSrc": "22088:69:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "22088:69:56"
                            },
                            {
                              "nativeSrc": "22166:29:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "22166:29:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "22188:6:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "22188:6:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "22182:5:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "22182:5:56"
                                },
                                "nativeSrc": "22182:13:56",
                                "nodeType": "YulFunctionCall",
                                "src": "22182:13:56"
                              },
                              "variables": [
                                {
                                  "name": "length_1",
                                  "nativeSrc": "22170:8:56",
                                  "nodeType": "YulTypedName",
                                  "src": "22170:8:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "22243:6:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "22243:6:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22251:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22251:2:56",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22239:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "22239:3:56"
                                    },
                                    "nativeSrc": "22239:15:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22239:15:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "22260:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "22260:2:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22264:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22264:2:56",
                                        "type": "",
                                        "value": "65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22256:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "22256:3:56"
                                    },
                                    "nativeSrc": "22256:11:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22256:11:56"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "22269:8:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "22269:8:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "22204:34:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "22204:34:56"
                                },
                                "nativeSrc": "22204:74:56",
                                "nodeType": "YulFunctionCall",
                                "src": "22204:74:56"
                              },
                              "nativeSrc": "22204:74:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "22204:74:56"
                            },
                            {
                              "nativeSrc": "22287:27:56",
                              "nodeType": "YulVariableDeclaration",
                              "src": "22287:27:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "22301:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "22301:2:56"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "22305:8:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "22305:8:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "22297:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "22297:3:56"
                                },
                                "nativeSrc": "22297:17:56",
                                "nodeType": "YulFunctionCall",
                                "src": "22297:17:56"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nativeSrc": "22291:2:56",
                                  "nodeType": "YulTypedName",
                                  "src": "22291:2:56",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "22334:2:56",
                                        "nodeType": "YulIdentifier",
                                        "src": "22334:2:56"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22338:2:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22338:2:56",
                                        "type": "",
                                        "value": "65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22330:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "22330:3:56"
                                    },
                                    "nativeSrc": "22330:11:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22330:11:56"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22347:3:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22347:3:56",
                                        "type": "",
                                        "value": "241"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22352:4:56",
                                        "nodeType": "YulLiteral",
                                        "src": "22352:4:56",
                                        "type": "",
                                        "value": "4375"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "22343:3:56",
                                      "nodeType": "YulIdentifier",
                                      "src": "22343:3:56"
                                    },
                                    "nativeSrc": "22343:14:56",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22343:14:56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "22323:6:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "22323:6:56"
                                },
                                "nativeSrc": "22323:35:56",
                                "nodeType": "YulFunctionCall",
                                "src": "22323:35:56"
                              },
                              "nativeSrc": "22323:35:56",
                              "nodeType": "YulExpressionStatement",
                              "src": "22323:35:56"
                            },
                            {
                              "nativeSrc": "22367:18:56",
                              "nodeType": "YulAssignment",
                              "src": "22367:18:56",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nativeSrc": "22378:2:56",
                                    "nodeType": "YulIdentifier",
                                    "src": "22378:2:56"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "22382:2:56",
                                    "nodeType": "YulLiteral",
                                    "src": "22382:2:56",
                                    "type": "",
                                    "value": "67"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "22374:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "22374:3:56"
                                },
                                "nativeSrc": "22374:11:56",
                                "nodeType": "YulFunctionCall",
                                "src": "22374:11:56"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "22367:3:56",
                                  "nodeType": "YulIdentifier",
                                  "src": "22367:3:56"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_2f5ddfff35cec202bbf760c515d7332e259c9b0c330efa0b2d03073b34906ba0_t_string_memory_ptr_t_stringliteral_03dcc98944d744f10105f4b63a1d5b4f5b14493812e66201e5f21a3da2662077_t_string_memory_ptr_t_stringliteral_cb54fc3dbdac1cb7b87378fdaddeb9e7549db2a108b5270efaa4bcd576270193__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "21331:1060:56",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "21789:3:56",
                            "nodeType": "YulTypedName",
                            "src": "21789:3:56",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "21794:6:56",
                            "nodeType": "YulTypedName",
                            "src": "21794:6:56",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "21802:6:56",
                            "nodeType": "YulTypedName",
                            "src": "21802:6:56",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "21813:3:56",
                            "nodeType": "YulTypedName",
                            "src": "21813:3:56",
                            "type": ""
                          }
                        ],
                        "src": "21331:1060:56"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_struct$_Chain_$7844_memory_ptr__to_t_struct$_Chain_$7844_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let memberValue0 := mload(value0)\n        mstore(add(headStart, 32), 0x80)\n        let tail_1 := abi_encode_string(memberValue0, add(headStart, 160))\n        mstore(add(headStart, 64), mload(add(value0, 32)))\n        let memberValue0_1 := mload(add(value0, 64))\n        let _1 := not(31)\n        mstore(add(headStart, 96), add(sub(tail_1, headStart), _1))\n        let tail_2 := abi_encode_string(memberValue0_1, tail_1)\n        let memberValue0_2 := mload(add(value0, 96))\n        mstore(add(headStart, 0x80), add(sub(tail_2, headStart), _1))\n        tail := abi_encode_string(memberValue0_2, tail_2)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_0f9b2418403e0efe0b594cd5a0bbad664afce7e82ee227d7bdd13366fe6c27b1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"ADMIN_PRIVATE_KEY\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_126dc7d4763b2b2c23a60aa98a5d472584b4ae417eca2b2710f81792900a6ecc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"OWNER_ADDRESS\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_2016869337567cea9dbdd5c3e7389f812a72b7d8339efb4f14ead7b7cb06dc46__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 142)\n        mstore(add(headStart, 64), \"You don't have a deployer accoun\")\n        mstore(add(headStart, 96), \"t. Make sure you have set DEPLOY\")\n        mstore(add(headStart, 128), \"ER_PRIVATE_KEY in .env or use `y\")\n        mstore(add(headStart, 160), \"arn generate` to generate a new \")\n        mstore(add(headStart, 192), \"random account\")\n        tail := add(headStart, 224)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_3055() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory_3057() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x80)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_47f4e387a3e3a1bf5441a11471d96bb40e79f7cd37d0651a9e52162fbbec1fcf_t_string_memory_ptr__to_t_bytes30_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"factory contract deployed at: \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 30), length)\n        end := add(add(pos, length), 30)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_06bc3ef3eee4fdcce3195cef9d74d258aba0896341bc2c935480fe386e382b3e_t_string_memory_ptr__to_t_bytes27_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"wnrk contract deployed at: \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 27), length)\n        end := add(add(pos, length), 27)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_5d7c56fcc4e141be4faeb6cfd4880f29589549ce44f76d87ef22b113d79741ad_t_string_memory_ptr__to_t_bytes29_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"router contract deployed at: \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 29), length)\n        end := add(add(pos, length), 29)\n    }\n    function abi_decode_tuple_t_array$_t_array$_t_string_memory_ptr_$2_memory_ptr_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let dst := allocate_memory(add(shl(5, _4), _1))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, _2) { revert(0, 0) }\n            let _5 := add(_3, innerOffset)\n            if iszero(slt(add(_5, 63), dataEnd)) { revert(0, 0) }\n            let dst_2 := allocate_memory_3055()\n            let dst_3 := dst_2\n            if gt(add(_5, 96), dataEnd) { revert(0, 0) }\n            let src_1 := add(_5, _1)\n            for { } lt(src_1, add(_5, 96)) { src_1 := add(src_1, _1) }\n            {\n                let innerOffset_1 := mload(src_1)\n                if gt(innerOffset_1, _2) { revert(0, 0) }\n                mstore(dst_2, abi_decode_string_fromMemory(add(add(_5, innerOffset_1), _1), dataEnd))\n                dst_2 := add(dst_2, _1)\n            }\n            mstore(dst, dst_3)\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_64f1cd082b277ed92a70b6890cc1e3b6ebd77bc6c9299e7ce82305de04926a4a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"StdChains getChain(uint256): Cha\")\n        mstore(add(headStart, 96), \"in ID cannot be 0.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_ce7b2cad45f1a6d0b9b7bb125e9a8742fce8fed7d742c83265d4a2da4caf457d_t_string_memory_ptr_t_stringliteral_f310d2efb88747fac959fa7567a0a1a161dd43a77ba9af074f6191cf5bcf4f8b__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"StdChains getChain(uint256): Cha\")\n        mstore(add(pos, 32), \"in with ID \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 43), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 43), \" not found.\")\n        end := add(_1, 54)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_string_storage(value, pos) -> ret\n    {\n        let slotValue := sload(value)\n        let length := extract_byte_array_length(slotValue)\n        let _1 := 1\n        switch and(slotValue, _1)\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            mstore(0, value)\n            let _2 := 0x20\n            let dataPos := keccak256(0, _2)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_stringliteral_9b849f40317fba7d532c0bb5a0048fc588a330868a6212ac1ddf9bd048284b1c__to_t_string_memory_ptr_t_bytes13__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let pos_1 := abi_encode_string_storage(value0, pos)\n        mstore(pos_1, \"/deployments/\")\n        end := add(pos_1, 13)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_bytes5__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \".json\")\n        end := add(end_1, 5)\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let _1 := abi_encode_string_storage(value0, pos)\n        let length := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), _1, length)\n        end := add(_1, length)\n    }\n    function abi_encode_string_storage_to_string(value, pos) -> ret\n    {\n        let slotValue := sload(value)\n        let length := extract_byte_array_length(slotValue)\n        mstore(pos, length)\n        let _1 := 0x20\n        let _2 := 1\n        switch and(slotValue, _2)\n        case 0 {\n            mstore(add(pos, _1), and(slotValue, not(255)))\n            ret := add(add(pos, shl(5, iszero(iszero(length)))), _1)\n        }\n        case 1 {\n            mstore(0, value)\n            let dataPos := keccak256(0, _1)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _1) }\n            {\n                mstore(add(add(pos, i), _1), sload(dataPos))\n                dataPos := add(dataPos, _2)\n            }\n            ret := add(add(pos, i), _1)\n        }\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string(value0, add(headStart, 96))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_string_storage_to_string(value2, tail_2)\n    }\n    function abi_decode_tuple_t_struct$_Chain_$7844_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x80) { revert(0, 0) }\n        let value := allocate_memory_3057()\n        let offset_1 := mload(_2)\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(value, abi_decode_string_fromMemory(add(_2, offset_1), dataEnd))\n        mstore(add(value, 32), mload(add(_2, 32)))\n        let offset_2 := mload(add(_2, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        mstore(add(value, 64), abi_decode_string_fromMemory(add(_2, offset_2), dataEnd))\n        let offset_3 := mload(add(_2, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        mstore(add(value, 96), abi_decode_string_fromMemory(add(_2, offset_3), dataEnd))\n        value0 := value\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_4e6fff0fc5b5dc488a5e6a18c9962f889fd002b6870d15a6d38e2608c1672222_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string(value0, add(headStart, 96))\n        let _1 := sub(tail_1, headStart)\n        mstore(add(headStart, 32), _1)\n        mstore(tail_1, 11)\n        mstore(add(tail_1, 32), \"networkName\")\n        mstore(add(headStart, 64), add(_1, 64))\n        tail := abi_encode_string(value1, add(tail_1, 64))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string_storage_to_string(value1, tail_1)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_2186fe596dea1a615b7a1cb43899fd18c5b434aa29c8de36d4b8fcc67e3d6ad9__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \"_RPC_URL\")\n        end := add(end_1, 8)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_2baf3da7b122675739218e635e969f0d1b560b915d35635239551f70fe123eed_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"invalid rpc url \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 16), length)\n        end := add(add(pos, length), 16)\n    }\n    function checked_sub_t_uint8(x, y) -> diff\n    {\n        diff := sub(and(x, 0xff), and(y, 0xff))\n        if gt(diff, 0xff) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_30b2334ec57cbeeece39c6405e10d3437560135ecd84835d6b9144db1d575354__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 77)\n        mstore(add(headStart, 64), \"StdChains setChain(string,ChainD\")\n        mstore(add(headStart, 96), \"ata): Chain alias cannot be the \")\n        mstore(add(headStart, 128), \"empty string.\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_ab0ba8dace83d80dc1941286e8d0551223497db1b420e58abff2f3db2ad3fbf4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 59)\n        mstore(add(headStart, 64), \"StdChains setChain(string,ChainD\")\n        mstore(add(headStart, 96), \"ata): Chain ID cannot be 0.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_2f5ddfff35cec202bbf760c515d7332e259c9b0c330efa0b2d03073b34906ba0_t_string_memory_ptr_t_stringliteral_03dcc98944d744f10105f4b63a1d5b4f5b14493812e66201e5f21a3da2662077_t_string_memory_ptr_t_stringliteral_cb54fc3dbdac1cb7b87378fdaddeb9e7549db2a108b5270efaa4bcd576270193__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"StdChains setChain(string,ChainD\")\n        mstore(add(pos, 32), \"ata): Chain ID \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 47), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 47), shl(113, 0x1030b63932b0b23c903ab9b2b210313c9011))\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 32), add(_1, 65), length_1)\n        let _2 := add(_1, length_1)\n        mstore(add(_2, 65), shl(241, 4375))\n        end := add(_2, 67)\n    }\n}",
                  "id": 56,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {}
            },
            "methodIdentifiers": {
              "IS_SCRIPT()": "f8ccbf47",
              "deployments(uint256)": "06609bbe",
              "findChainName()": "d2007265",
              "getChain()": "32e21ae7",
              "run()": "c0406226",
              "test()": "f8a8fd6d"
            }
          }
        }
      }
    }
  }
}